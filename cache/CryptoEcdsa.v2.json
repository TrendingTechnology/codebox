{
   "func (*PrivateKey).Public() crypto.PublicKey": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*PrivateKey).Sign(rand io.Reader, digest []byte, opts crypto.SignerOpts) ([]byte, error)": {
      "GeneratedClass": "\n    private class PrivateKeySign extends TaintTracking::FunctionModel, Method {\n      // signature: func (*PrivateKey).Sign(rand io.Reader, digest []byte, opts crypto.SignerOpts) ([]byte, error)\n      PrivateKeySign() { this.(Method).hasQualifiedName(\"crypto/ecdsa\", \"PrivateKey\", \"Sign\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(1)) and (outp.isResult(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(1)) and (outp.isResult(0)))",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               true,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false,
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func GenerateKey(c crypto/elliptic.Curve, rand io.Reader) (*PrivateKey, error)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r *math/big.Int, s *math/big.Int, err error)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Verify(pub *PublicKey, hash []byte, r *math/big.Int, s *math/big.Int) bool": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   }
}
