{"Name":"math","PkgPath":"math","PkgName":"math","ID":"math","Funcs":[{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"Abs","Signature":"func Abs(x float64) float64","ID":"FunctionAbs","Docs":["Abs returns the absolute value of x.","","Special cases are:","\tAbs(±Inf) = +Inf","\tAbs(NaN) = NaN"],"Name":"Abs","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into499","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"Acos","Signature":"func Acos(x float64) float64","ID":"FunctionAcos","Docs":["Acos returns the arccosine, in radians, of x.","","Special case is:","\tAcos(x) = NaN if x \u003c -1 or x \u003e 1"],"Name":"Acos","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into262","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"Acosh","Signature":"func Acosh(x float64) float64","ID":"FunctionAcosh","Docs":["Acosh returns the inverse hyperbolic cosine of x.","","Special cases are:","\tAcosh(+Inf) = +Inf","\tAcosh(x) = NaN if x \u003c 1","\tAcosh(NaN) = NaN"],"Name":"Acosh","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into506","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"Asin","Signature":"func Asin(x float64) float64","ID":"FunctionAsin","Docs":["Asin returns the arcsine, in radians, of x.","","Special cases are:","\tAsin(±0) = ±0","\tAsin(x) = NaN if x \u003c -1 or x \u003e 1"],"Name":"Asin","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into280","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"Asinh","Signature":"func Asinh(x float64) float64","ID":"FunctionAsinh","Docs":["Asinh returns the inverse hyperbolic sine of x.","","Special cases are:","\tAsinh(±0) = ±0","\tAsinh(±Inf) = ±Inf","\tAsinh(NaN) = NaN"],"Name":"Asinh","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into163","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"Atan","Signature":"func Atan(x float64) float64","ID":"FunctionAtan","Docs":["Atan returns the arctangent, in radians, of x.","","Special cases are:","     Atan(±0) = ±0","     Atan(±Inf) = ±Pi/2"],"Name":"Atan","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into274","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Atan2","Signature":"func Atan2(y float64, x float64) float64","ID":"FunctionAtan2","Docs":["Atan2 returns the arc tangent of y/x, using","the signs of the two to determine the quadrant","of the return value.","","Special cases are (in order):","\tAtan2(y, NaN) = NaN","\tAtan2(NaN, x) = NaN","\tAtan2(+0, x\u003e=0) = +0","\tAtan2(-0, x\u003e=0) = -0","\tAtan2(+0, x\u003c=-0) = +Pi","\tAtan2(-0, x\u003c=-0) = -Pi","\tAtan2(y\u003e0, 0) = +Pi/2","\tAtan2(y\u003c0, 0) = -Pi/2","\tAtan2(+Inf, +Inf) = +Pi/4","\tAtan2(-Inf, +Inf) = -Pi/4","\tAtan2(+Inf, -Inf) = 3Pi/4","\tAtan2(-Inf, -Inf) = -3Pi/4","\tAtan2(y, +Inf) = 0","\tAtan2(y\u003e0, -Inf) = +Pi","\tAtan2(y\u003c0, -Inf) = -Pi","\tAtan2(+Inf, x) = +Pi/2","\tAtan2(-Inf, x) = -Pi/2"],"Name":"Atan2","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"y","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Atanh","Signature":"func Atanh(x float64) float64","ID":"FunctionAtanh","Docs":["Atanh returns the inverse hyperbolic tangent of x.","","Special cases are:","\tAtanh(1) = +Inf","\tAtanh(±0) = ±0","\tAtanh(-1) = -Inf","\tAtanh(x) = NaN if x \u003c -1 or x \u003e 1","\tAtanh(NaN) = NaN"],"Name":"Atanh","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Cbrt","Signature":"func Cbrt(x float64) float64","ID":"FunctionCbrt","Docs":["Cbrt returns the cube root of x.","","Special cases are:","\tCbrt(±0) = ±0","\tCbrt(±Inf) = ±Inf","\tCbrt(NaN) = NaN"],"Name":"Cbrt","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Ceil","Signature":"func Ceil(x float64) float64","ID":"FunctionCeil","Docs":["Ceil returns the least integer value greater than or equal to x.","","Special cases are:","\tCeil(±0) = ±0","\tCeil(±Inf) = ±Inf","\tCeil(NaN) = NaN"],"Name":"Ceil","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Copysign","Signature":"func Copysign(x float64, y float64) float64","ID":"FunctionCopysign","Docs":["Copysign returns a value with the magnitude","of x and the sign of y."],"Name":"Copysign","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"y","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Cos","Signature":"func Cos(x float64) float64","ID":"FunctionCos","Docs":["Cos returns the cosine of the radian argument x.","","Special cases are:","\tCos(±Inf) = NaN","\tCos(NaN) = NaN"],"Name":"Cos","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Cosh","Signature":"func Cosh(x float64) float64","ID":"FunctionCosh","Docs":["Cosh returns the hyperbolic cosine of x.","","Special cases are:","\tCosh(±0) = 1","\tCosh(±Inf) = +Inf","\tCosh(NaN) = NaN"],"Name":"Cosh","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Dim","Signature":"func Dim(x float64, y float64) float64","ID":"FunctionDim","Docs":["Dim returns the maximum of x-y or 0.","","Special cases are:","\tDim(+Inf, +Inf) = NaN","\tDim(-Inf, -Inf) = NaN","\tDim(x, NaN) = Dim(NaN, x) = NaN"],"Name":"Dim","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"y","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Erf","Signature":"func Erf(x float64) float64","ID":"FunctionErf","Docs":["Erf returns the error function of x.","","Special cases are:","\tErf(+Inf) = 1","\tErf(-Inf) = -1","\tErf(NaN) = NaN"],"Name":"Erf","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Erfc","Signature":"func Erfc(x float64) float64","ID":"FunctionErfc","Docs":["Erfc returns the complementary error function of x.","","Special cases are:","\tErfc(+Inf) = 0","\tErfc(-Inf) = 2","\tErfc(NaN) = NaN"],"Name":"Erfc","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Erfcinv","Signature":"func Erfcinv(x float64) float64","ID":"FunctionErfcinv","Docs":["Erfcinv returns the inverse of Erfc(x).","","Special cases are:","\tErfcinv(0) = +Inf","\tErfcinv(2) = -Inf","\tErfcinv(x) = NaN if x \u003c 0 or x \u003e 2","\tErfcinv(NaN) = NaN"],"Name":"Erfcinv","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Erfinv","Signature":"func Erfinv(x float64) float64","ID":"FunctionErfinv","Docs":["Erfinv returns the inverse error function of x.","","Special cases are:","\tErfinv(1) = +Inf","\tErfinv(-1) = -Inf","\tErfinv(x) = NaN if x \u003c -1 or x \u003e 1","\tErfinv(NaN) = NaN"],"Name":"Erfinv","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Exp","Signature":"func Exp(x float64) float64","ID":"FunctionExp","Docs":["Exp returns e**x, the base-e exponential of x.","","Special cases are:","\tExp(+Inf) = +Inf","\tExp(NaN) = NaN","Very large values overflow to 0 or +Inf.","Very small values underflow to 1."],"Name":"Exp","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Exp2","Signature":"func Exp2(x float64) float64","ID":"FunctionExp2","Docs":["Exp2 returns 2**x, the base-2 exponential of x.","","Special cases are the same as Exp."],"Name":"Exp2","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Expm1","Signature":"func Expm1(x float64) float64","ID":"FunctionExpm1","Docs":["Expm1 returns e**x - 1, the base-e exponential of x minus 1.","It is more accurate than Exp(x) - 1 when x is near zero.","","Special cases are:","\tExpm1(+Inf) = +Inf","\tExpm1(-Inf) = -1","\tExpm1(NaN) = NaN","Very large values overflow to -1 or +Inf."],"Name":"Expm1","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"FMA","Signature":"func FMA(x float64, y float64, z float64) float64","ID":"FunctionFMA","Docs":["FMA returns x * y + z, computed with only one rounding.","(That is, FMA returns the fused multiply-add of x, y, and z.)"],"Name":"FMA","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"y","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"z","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Float32Bits","Signature":"func Float32bits(f float32) uint32","ID":"FunctionFloat32Bits","Docs":["Float32bits returns the IEEE 754 binary representation of f,","with the sign bit of f and the result in the same bit position.","Float32bits(Float32frombits(x)) == x."],"Name":"Float32bits","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"f","TypeName":"float32","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"uint32","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Float32Frombits","Signature":"func Float32frombits(b uint32) float32","ID":"FunctionFloat32Frombits","Docs":["Float32frombits returns the floating-point number corresponding","to the IEEE 754 binary representation b, with the sign bit of b","and the result in the same bit position.","Float32frombits(Float32bits(x)) == x."],"Name":"Float32frombits","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"b","TypeName":"uint32","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float32","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Float64Bits","Signature":"func Float64bits(f float64) uint64","ID":"FunctionFloat64Bits","Docs":["Float64bits returns the IEEE 754 binary representation of f,","with the sign bit of f and the result in the same bit position,","and Float64bits(Float64frombits(x)) == x."],"Name":"Float64bits","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"f","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"uint64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Float64Frombits","Signature":"func Float64frombits(b uint64) float64","ID":"FunctionFloat64Frombits","Docs":["Float64frombits returns the floating-point number corresponding","to the IEEE 754 binary representation b, with the sign bit of b","and the result in the same bit position.","Float64frombits(Float64bits(x)) == x."],"Name":"Float64frombits","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"b","TypeName":"uint64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Floor","Signature":"func Floor(x float64) float64","ID":"FunctionFloor","Docs":["Floor returns the greatest integer value less than or equal to x.","","Special cases are:","\tFloor(±0) = ±0","\tFloor(±Inf) = ±Inf","\tFloor(NaN) = NaN"],"Name":"Floor","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Frexp","Signature":"func Frexp(f float64) (frac float64, exp int)","ID":"FunctionFrexp","Docs":["Frexp breaks f into a normalized fraction","and an integral power of two.","It returns frac and exp satisfying f == frac × 2**exp,","with the absolute value of frac in the interval [½, 1).","","Special cases are:","\tFrexp(±0) = ±0, 0","\tFrexp(±Inf) = ±Inf, 0","\tFrexp(NaN) = NaN, 0"],"Name":"Frexp","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"f","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"frac","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"exp","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Gamma","Signature":"func Gamma(x float64) float64","ID":"FunctionGamma","Docs":["Gamma returns the Gamma function of x.","","Special cases are:","\tGamma(+Inf) = +Inf","\tGamma(+0) = +Inf","\tGamma(-0) = -Inf","\tGamma(x) = NaN for integer x \u003c 0","\tGamma(-Inf) = NaN","\tGamma(NaN) = NaN"],"Name":"Gamma","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Hypot","Signature":"func Hypot(p float64, q float64) float64","ID":"FunctionHypot","Docs":["Hypot returns Sqrt(p*p + q*q), taking care to avoid","unnecessary overflow and underflow.","","Special cases are:","\tHypot(±Inf, q) = +Inf","\tHypot(p, ±Inf) = +Inf","\tHypot(NaN, q) = NaN","\tHypot(p, NaN) = NaN"],"Name":"Hypot","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"p","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"q","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Ilogb","Signature":"func Ilogb(x float64) int","ID":"FunctionIlogb","Docs":["Ilogb returns the binary exponent of x as an integer.","","Special cases are:","\tIlogb(±Inf) = MaxInt32","\tIlogb(0) = MinInt32","\tIlogb(NaN) = MaxInt32"],"Name":"Ilogb","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Inf","Signature":"func Inf(sign int) float64","ID":"FunctionInf","Docs":["Inf returns positive infinity if sign \u003e= 0, negative infinity if sign \u003c 0."],"Name":"Inf","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"sign","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"IsInf","Signature":"func IsInf(f float64, sign int) bool","ID":"FunctionIsInf","Docs":["IsInf reports whether f is an infinity, according to sign.","If sign \u003e 0, IsInf reports whether f is positive infinity.","If sign \u003c 0, IsInf reports whether f is negative infinity.","If sign == 0, IsInf reports whether f is either infinity."],"Name":"IsInf","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"f","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"sign","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"IsNaN","Signature":"func IsNaN(f float64) (is bool)","ID":"FunctionIsNaN","Docs":["IsNaN reports whether f is an IEEE 754 ``not-a-number'' value."],"Name":"IsNaN","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"f","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"is","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"J0","Signature":"func J0(x float64) float64","ID":"FunctionJ0","Docs":["J0 returns the order-zero Bessel function of the first kind.","","Special cases are:","\tJ0(±Inf) = 0","\tJ0(0) = 1","\tJ0(NaN) = NaN"],"Name":"J0","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"J1","Signature":"func J1(x float64) float64","ID":"FunctionJ1","Docs":["J1 returns the order-one Bessel function of the first kind.","","Special cases are:","\tJ1(±Inf) = 0","\tJ1(NaN) = NaN"],"Name":"J1","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Jn","Signature":"func Jn(n int, x float64) float64","ID":"FunctionJn","Docs":["Jn returns the order-n Bessel function of the first kind.","","Special cases are:","\tJn(n, ±Inf) = 0","\tJn(n, NaN) = NaN"],"Name":"Jn","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"n","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Ldexp","Signature":"func Ldexp(frac float64, exp int) float64","ID":"FunctionLdexp","Docs":["Ldexp is the inverse of Frexp.","It returns frac × 2**exp.","","Special cases are:","\tLdexp(±0, exp) = ±0","\tLdexp(±Inf, exp) = ±Inf","\tLdexp(NaN, exp) = NaN"],"Name":"Ldexp","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"frac","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"exp","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Lgamma","Signature":"func Lgamma(x float64) (lgamma float64, sign int)","ID":"FunctionLgamma","Docs":["Lgamma returns the natural logarithm and sign (-1 or +1) of Gamma(x).","","Special cases are:","\tLgamma(+Inf) = +Inf","\tLgamma(0) = +Inf","\tLgamma(-integer) = +Inf","\tLgamma(-Inf) = -Inf","\tLgamma(NaN) = NaN"],"Name":"Lgamma","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"lgamma","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"sign","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Log","Signature":"func Log(x float64) float64","ID":"FunctionLog","Docs":["Log returns the natural logarithm of x.","","Special cases are:","\tLog(+Inf) = +Inf","\tLog(0) = -Inf","\tLog(x \u003c 0) = NaN","\tLog(NaN) = NaN"],"Name":"Log","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Log10","Signature":"func Log10(x float64) float64","ID":"FunctionLog10","Docs":["Log10 returns the decimal logarithm of x.","The special cases are the same as for Log."],"Name":"Log10","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Log1P","Signature":"func Log1p(x float64) float64","ID":"FunctionLog1P","Docs":["Log1p returns the natural logarithm of 1 plus its argument x.","It is more accurate than Log(1 + x) when x is near zero.","","Special cases are:","\tLog1p(+Inf) = +Inf","\tLog1p(±0) = ±0","\tLog1p(-1) = -Inf","\tLog1p(x \u003c -1) = NaN","\tLog1p(NaN) = NaN"],"Name":"Log1p","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Log2","Signature":"func Log2(x float64) float64","ID":"FunctionLog2","Docs":["Log2 returns the binary logarithm of x.","The special cases are the same as for Log."],"Name":"Log2","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Logb","Signature":"func Logb(x float64) float64","ID":"FunctionLogb","Docs":["Logb returns the binary exponent of x.","","Special cases are:","\tLogb(±Inf) = +Inf","\tLogb(0) = -Inf","\tLogb(NaN) = NaN"],"Name":"Logb","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Max","Signature":"func Max(x float64, y float64) float64","ID":"FunctionMax","Docs":["Max returns the larger of x or y.","","Special cases are:","\tMax(x, +Inf) = Max(+Inf, x) = +Inf","\tMax(x, NaN) = Max(NaN, x) = NaN","\tMax(+0, ±0) = Max(±0, +0) = +0","\tMax(-0, -0) = -0"],"Name":"Max","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"y","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Min","Signature":"func Min(x float64, y float64) float64","ID":"FunctionMin","Docs":["Min returns the smaller of x or y.","","Special cases are:","\tMin(x, -Inf) = Min(-Inf, x) = -Inf","\tMin(x, NaN) = Min(NaN, x) = NaN","\tMin(-0, ±0) = Min(±0, -0) = -0"],"Name":"Min","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"y","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Mod","Signature":"func Mod(x float64, y float64) float64","ID":"FunctionMod","Docs":["Mod returns the floating-point remainder of x/y.","The magnitude of the result is less than y and its","sign agrees with that of x.","","Special cases are:","\tMod(±Inf, y) = NaN","\tMod(NaN, y) = NaN","\tMod(x, 0) = NaN","\tMod(x, ±Inf) = x","\tMod(x, NaN) = NaN"],"Name":"Mod","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"y","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Modf","Signature":"func Modf(f float64) (int float64, frac float64)","ID":"FunctionModf","Docs":["Modf returns integer and fractional floating-point numbers","that sum to f. Both values have the same sign as f.","","Special cases are:","\tModf(±Inf) = ±Inf, NaN","\tModf(NaN) = NaN, NaN"],"Name":"Modf","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"f","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"int","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"frac","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NaN","Signature":"func NaN() float64","ID":"FunctionNaN","Docs":["NaN returns an IEEE 754 ``not-a-number'' value."],"Name":"NaN","PkgPath":"math","PkgName":"math","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Nextafter","Signature":"func Nextafter(x float64, y float64) (r float64)","ID":"FunctionNextafter","Docs":["Nextafter returns the next representable float64 value after x towards y.","","Special cases are:","\tNextafter(x, x)   = x","\tNextafter(NaN, y) = NaN","\tNextafter(x, NaN) = NaN"],"Name":"Nextafter","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"y","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"r","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Nextafter32","Signature":"func Nextafter32(x float32, y float32) (r float32)","ID":"FunctionNextafter32","Docs":["Nextafter32 returns the next representable float32 value after x towards y.","","Special cases are:","\tNextafter32(x, x)   = x","\tNextafter32(NaN, y) = NaN","\tNextafter32(x, NaN) = NaN"],"Name":"Nextafter32","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float32","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"y","TypeName":"float32","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"r","TypeName":"float32","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Pow","Signature":"func Pow(x float64, y float64) float64","ID":"FunctionPow","Docs":["Pow returns x**y, the base-x exponential of y.","","Special cases are (in order):","\tPow(x, ±0) = 1 for any x","\tPow(1, y) = 1 for any y","\tPow(x, 1) = x for any x","\tPow(NaN, y) = NaN","\tPow(x, NaN) = NaN","\tPow(±0, y) = ±Inf for y an odd integer \u003c 0","\tPow(±0, -Inf) = +Inf","\tPow(±0, +Inf) = +0","\tPow(±0, y) = +Inf for finite y \u003c 0 and not an odd integer","\tPow(±0, y) = ±0 for y an odd integer \u003e 0","\tPow(±0, y) = +0 for finite y \u003e 0 and not an odd integer","\tPow(-1, ±Inf) = 1","\tPow(x, +Inf) = +Inf for |x| \u003e 1","\tPow(x, -Inf) = +0 for |x| \u003e 1","\tPow(x, +Inf) = +0 for |x| \u003c 1","\tPow(x, -Inf) = +Inf for |x| \u003c 1","\tPow(+Inf, y) = +Inf for y \u003e 0","\tPow(+Inf, y) = +0 for y \u003c 0","\tPow(-Inf, y) = Pow(-0, -y)","\tPow(x, y) = NaN for finite x \u003c 0 and finite non-integer y"],"Name":"Pow","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"y","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Pow10","Signature":"func Pow10(n int) float64","ID":"FunctionPow10","Docs":["Pow10 returns 10**n, the base-10 exponential of n.","","Special cases are:","\tPow10(n) =    0 for n \u003c -323","\tPow10(n) = +Inf for n \u003e 308"],"Name":"Pow10","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"n","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Remainder","Signature":"func Remainder(x float64, y float64) float64","ID":"FunctionRemainder","Docs":["Remainder returns the IEEE 754 floating-point remainder of x/y.","","Special cases are:","\tRemainder(±Inf, y) = NaN","\tRemainder(NaN, y) = NaN","\tRemainder(x, 0) = NaN","\tRemainder(x, ±Inf) = x","\tRemainder(x, NaN) = NaN"],"Name":"Remainder","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"y","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Round","Signature":"func Round(x float64) float64","ID":"FunctionRound","Docs":["Round returns the nearest integer, rounding half away from zero.","","Special cases are:","\tRound(±0) = ±0","\tRound(±Inf) = ±Inf","\tRound(NaN) = NaN"],"Name":"Round","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RoundToEven","Signature":"func RoundToEven(x float64) float64","ID":"FunctionRoundToEven","Docs":["RoundToEven returns the nearest integer, rounding ties to even.","","Special cases are:","\tRoundToEven(±0) = ±0","\tRoundToEven(±Inf) = ±Inf","\tRoundToEven(NaN) = NaN"],"Name":"RoundToEven","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Signbit","Signature":"func Signbit(x float64) bool","ID":"FunctionSignbit","Docs":["Signbit reports whether x is negative or negative zero."],"Name":"Signbit","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Sin","Signature":"func Sin(x float64) float64","ID":"FunctionSin","Docs":["Sin returns the sine of the radian argument x.","","Special cases are:","\tSin(±0) = ±0","\tSin(±Inf) = NaN","\tSin(NaN) = NaN"],"Name":"Sin","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Sincos","Signature":"func Sincos(x float64) (sin float64, cos float64)","ID":"FunctionSincos","Docs":["Sincos returns Sin(x), Cos(x).","","Special cases are:","\tSincos(±0) = ±0, 1","\tSincos(±Inf) = NaN, NaN","\tSincos(NaN) = NaN, NaN"],"Name":"Sincos","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"sin","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"cos","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Sinh","Signature":"func Sinh(x float64) float64","ID":"FunctionSinh","Docs":["Sinh returns the hyperbolic sine of x.","","Special cases are:","\tSinh(±0) = ±0","\tSinh(±Inf) = ±Inf","\tSinh(NaN) = NaN"],"Name":"Sinh","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Sqrt","Signature":"func Sqrt(x float64) float64","ID":"FunctionSqrt","Docs":["Sqrt returns the square root of x.","","Special cases are:","\tSqrt(+Inf) = +Inf","\tSqrt(±0) = ±0","\tSqrt(x \u003c 0) = NaN","\tSqrt(NaN) = NaN"],"Name":"Sqrt","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Tan","Signature":"func Tan(x float64) float64","ID":"FunctionTan","Docs":["Tan returns the tangent of the radian argument x.","","Special cases are:","\tTan(±0) = ±0","\tTan(±Inf) = NaN","\tTan(NaN) = NaN"],"Name":"Tan","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Tanh","Signature":"func Tanh(x float64) float64","ID":"FunctionTanh","Docs":["Tanh returns the hyperbolic tangent of x.","","Special cases are:","\tTanh(±0) = ±0","\tTanh(±Inf) = ±1","\tTanh(NaN) = NaN"],"Name":"Tanh","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Trunc","Signature":"func Trunc(x float64) float64","ID":"FunctionTrunc","Docs":["Trunc returns the integer value of x.","","Special cases are:","\tTrunc(±0) = ±0","\tTrunc(±Inf) = ±Inf","\tTrunc(NaN) = NaN"],"Name":"Trunc","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Y0","Signature":"func Y0(x float64) float64","ID":"FunctionY0","Docs":["Y0 returns the order-zero Bessel function of the second kind.","","Special cases are:","\tY0(+Inf) = 0","\tY0(0) = -Inf","\tY0(x \u003c 0) = NaN","\tY0(NaN) = NaN"],"Name":"Y0","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Y1","Signature":"func Y1(x float64) float64","ID":"FunctionY1","Docs":["Y1 returns the order-one Bessel function of the second kind.","","Special cases are:","\tY1(+Inf) = 0","\tY1(0) = -Inf","\tY1(x \u003c 0) = NaN","\tY1(NaN) = NaN"],"Name":"Y1","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Yn","Signature":"func Yn(n int, x float64) float64","ID":"FunctionYn","Docs":["Yn returns the order-n Bessel function of the second kind.","","Special cases are:","\tYn(n, +Inf) = 0","\tYn(n ≥ 0, 0) = -Inf","\tYn(n \u003c 0, 0) = +Inf if n is odd, -Inf if n is even","\tYn(n, x \u003c 0) = NaN","\tYn(n, NaN) = NaN"],"Name":"Yn","PkgPath":"math","PkgName":"math","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"n","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}],"TypeMethods":[],"InterfaceMethods":[]}