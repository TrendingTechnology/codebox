{
   "func (*WordDecoder).Decode(word string) (string, error)": {
      "GeneratedClass": "\n    private class WordDecoderDecode extends TaintTracking::FunctionModel, Method {\n      // signature: func (*WordDecoder).Decode(word string) (string, error)\n      WordDecoderDecode() { this.(Method).hasQualifiedName(\"mime\", \"WordDecoder\", \"Decode\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult(0)))",
      "Blocks": [
         {
            "Inp": [
               false,
               true,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*WordDecoder).DecodeHeader(header string) (string, error)": {
      "GeneratedClass": "\n    private class WordDecoderDecodeHeader extends TaintTracking::FunctionModel, Method {\n      // signature: func (*WordDecoder).DecodeHeader(header string) (string, error)\n      WordDecoderDecodeHeader() { this.(Method).hasQualifiedName(\"mime\", \"WordDecoder\", \"DecodeHeader\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult(0)))",
      "Blocks": [
         {
            "Inp": [
               false,
               true,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (WordEncoder).Encode(charset string, s string) string": {
      "GeneratedClass": "\n    private class WordEncoderEncode extends TaintTracking::FunctionModel, Method {\n      // signature: func (WordEncoder).Encode(charset string, s string) string\n      WordEncoderEncode() { this.(Method).hasQualifiedName(\"mime\", \"WordEncoder\", \"Encode\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(1)) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(1)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               true,
               false
            ],
            "Outp": [
               false,
               false,
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func AddExtensionType(ext string, typ string) error": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func ExtensionsByType(typ string) ([]string, error)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func FormatMediaType(t string, param map[string]string) string": {
      "GeneratedClass": "\n    private class FormatMediaType extends TaintTracking::FunctionModel {\n      // signature: func FormatMediaType(t string, param map[string]string) string\n      FormatMediaType() { hasQualifiedName(\"mime\", \"FormatMediaType\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(_)) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(_)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               true,
               false
            ],
            "Outp": [
               false,
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func ParseMediaType(v string) (mediatype string, params map[string]string, err error)": {
      "GeneratedClass": "\n    private class ParseMediaType extends TaintTracking::FunctionModel {\n      // signature: func ParseMediaType(v string) (mediatype string, params map[string]string, err error)\n      ParseMediaType() { hasQualifiedName(\"mime\", \"ParseMediaType\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult([0, 1])))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult([0, 1])))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               true,
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func TypeByExtension(ext string) string": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   }
}
