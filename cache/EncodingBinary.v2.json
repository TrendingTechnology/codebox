{
   "func (ByteOrder).PutUint16([]byte, uint16)": {
      "GeneratedClass": "",
      "GeneratedConditions": "((inp.isParameter(1)) and (outp.isParameter(0)))",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               true
            ],
            "Outp": [
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (ByteOrder).PutUint32([]byte, uint32)": {
      "GeneratedClass": "",
      "GeneratedConditions": "((inp.isParameter(1)) and (outp.isParameter(0)))",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               true
            ],
            "Outp": [
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (ByteOrder).PutUint64([]byte, uint64)": {
      "GeneratedClass": "",
      "GeneratedConditions": "((inp.isParameter(1)) and (outp.isParameter(0)))",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               true
            ],
            "Outp": [
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (ByteOrder).String() string": {
      "GeneratedClass": "\n    private class ByteOrderString extends TaintTracking::FunctionModel, Method {\n      // signature: func (ByteOrder).String() string\n      ByteOrderString() {\n        this.implements(\"encoding/binary\", \"ByteOrder\", \"String\")\n      }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (ByteOrder).Uint16([]byte) uint16": {
      "GeneratedClass": "",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true,
               false
            ],
            "Outp": [
               false,
               false,
               true
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (ByteOrder).Uint32([]byte) uint32": {
      "GeneratedClass": "",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true,
               false
            ],
            "Outp": [
               false,
               false,
               true
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (ByteOrder).Uint64([]byte) uint64": {
      "GeneratedClass": "",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true,
               false
            ],
            "Outp": [
               false,
               false,
               true
            ]
         }
      ],
      "IsEnabled": false
   },
   "func PutUvarint(buf []byte, x uint64) int": {
      "GeneratedClass": "\n    private class PutUvarint extends TaintTracking::FunctionModel {\n      // signature: func PutUvarint(buf []byte, x uint64) int\n      PutUvarint() { hasQualifiedName(\"encoding/binary\", \"PutUvarint\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(1)) and (outp.isParameter(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(1)) and (outp.isParameter(0)))",
      "Blocks": [
         {
            "Inp": [
               false,
               true,
               false
            ],
            "Outp": [
               true,
               false,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func PutVarint(buf []byte, x int64) int": {
      "GeneratedClass": "",
      "GeneratedConditions": "((inp.isParameter(1)) and (outp.isParameter(0)))",
      "Blocks": [
         {
            "Inp": [
               false,
               true,
               false
            ],
            "Outp": [
               true,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Read(r io.Reader, order ByteOrder, data interface{}) error": {
      "GeneratedClass": "\n    private class Read extends TaintTracking::FunctionModel {\n      // signature: func Read(r io.Reader, order ByteOrder, data interface{}) error\n      Read() { hasQualifiedName(\"encoding/binary\", \"Read\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isParameter(2)))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isParameter(2)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func ReadUvarint(r io.ByteReader) (uint64, error)": {
      "GeneratedClass": "\n    private class ReadUvarint extends TaintTracking::FunctionModel {\n      // signature: func ReadUvarint(r io.ByteReader) (uint64, error)\n      ReadUvarint() { hasQualifiedName(\"encoding/binary\", \"ReadUvarint\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult(0)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false
            ],
            "Outp": [
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func ReadVarint(r io.ByteReader) (int64, error)": {
      "GeneratedClass": "",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult(0)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false
            ],
            "Outp": [
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Size(v interface{}) int": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Uvarint(buf []byte) (uint64, int)": {
      "GeneratedClass": "",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult(0)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false
            ],
            "Outp": [
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Varint(buf []byte) (int64, int)": {
      "GeneratedClass": "",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult(0)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false
            ],
            "Outp": [
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Write(w io.Writer, order ByteOrder, data interface{}) error": {
      "GeneratedClass": "\n    private class Write extends TaintTracking::FunctionModel {\n      // signature: func Write(w io.Writer, order ByteOrder, data interface{}) error\n      Write() { hasQualifiedName(\"encoding/binary\", \"Write\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(2)) and (outp.isParameter(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(2)) and (outp.isParameter(0)))",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               true,
               false
            ],
            "Outp": [
               true,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": true
   }
}
