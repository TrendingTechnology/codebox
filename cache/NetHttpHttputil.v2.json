{
   "func (*ClientConn).Close() error": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*ClientConn).Do(req *net/http.Request) (*net/http.Response, error)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*ClientConn).Hijack() (c net.Conn, r *bufio.Reader)": {
      "GeneratedClass": "\n    private class ClientConnHijack extends TaintTracking::FunctionModel, Method {\n      // signature: func (*ClientConn).Hijack() (c net.Conn, r *bufio.Reader)\n      ClientConnHijack() { this.(Method).hasQualifiedName(\"net/http/httputil\", \"ClientConn\", \"Hijack\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult(_)))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult(_)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false
            ],
            "Outp": [
               false,
               true,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*ClientConn).Pending() int": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*ClientConn).Read(req *net/http.Request) (resp *net/http.Response, err error)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*ClientConn).Write(req *net/http.Request) error": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*ReverseProxy).ServeHTTP(rw net/http.ResponseWriter, req *net/http.Request)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*ServerConn).Close() error": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*ServerConn).Hijack() (net.Conn, *bufio.Reader)": {
      "GeneratedClass": "\n    private class ServerConnHijack extends TaintTracking::FunctionModel, Method {\n      // signature: func (*ServerConn).Hijack() (net.Conn, *bufio.Reader)\n      ServerConnHijack() { this.(Method).hasQualifiedName(\"net/http/httputil\", \"ServerConn\", \"Hijack\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult(_)))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult(_)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false
            ],
            "Outp": [
               false,
               true,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*ServerConn).Pending() int": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*ServerConn).Read() (*net/http.Request, error)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*ServerConn).Write(req *net/http.Request, resp *net/http.Response) error": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (BufferPool).Get() []byte": {
      "GeneratedClass": "\n    private class BufferPoolGet extends TaintTracking::FunctionModel, Method {\n      // signature: func (BufferPool).Get() []byte\n      BufferPoolGet() {\n        this.implements(\"net/http/httputil\", \"BufferPool\", \"Get\")\n      }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (BufferPool).Put([]byte)": {
      "GeneratedClass": "\n    private class BufferPoolPut extends TaintTracking::FunctionModel, Method {\n      // signature: func (BufferPool).Put([]byte)\n      BufferPoolPut() {\n        this.implements(\"net/http/httputil\", \"BufferPool\", \"Put\")\n      }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true
            ],
            "Outp": [
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func DumpRequest(req *net/http.Request, body bool) ([]byte, error)": {
      "GeneratedClass": "\n    private class DumpRequest extends TaintTracking::FunctionModel {\n      // signature: func DumpRequest(req *net/http.Request, body bool) ([]byte, error)\n      DumpRequest() { hasQualifiedName(\"net/http/httputil\", \"DumpRequest\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult(0)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func DumpRequestOut(req *net/http.Request, body bool) ([]byte, error)": {
      "GeneratedClass": "\n    private class DumpRequestOut extends TaintTracking::FunctionModel {\n      // signature: func DumpRequestOut(req *net/http.Request, body bool) ([]byte, error)\n      DumpRequestOut() { hasQualifiedName(\"net/http/httputil\", \"DumpRequestOut\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult(0)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func DumpResponse(resp *net/http.Response, body bool) ([]byte, error)": {
      "GeneratedClass": "\n    private class DumpResponse extends TaintTracking::FunctionModel {\n      // signature: func DumpResponse(resp *net/http.Response, body bool) ([]byte, error)\n      DumpResponse() { hasQualifiedName(\"net/http/httputil\", \"DumpResponse\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult(0)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func NewChunkedReader(r io.Reader) io.Reader": {
      "GeneratedClass": "\n    private class NewChunkedReader extends TaintTracking::FunctionModel {\n      // signature: func NewChunkedReader(r io.Reader) io.Reader\n      NewChunkedReader() { hasQualifiedName(\"net/http/httputil\", \"NewChunkedReader\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func NewChunkedWriter(w io.Writer) io.WriteCloser": {
      "GeneratedClass": "\n    private class NewChunkedWriter extends TaintTracking::FunctionModel {\n      // signature: func NewChunkedWriter(w io.Writer) io.WriteCloser\n      NewChunkedWriter() { hasQualifiedName(\"net/http/httputil\", \"NewChunkedWriter\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isResult()) and (outp.isParameter(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isResult()) and (outp.isParameter(0)))",
      "Blocks": [
         {
            "Inp": [
               false,
               true
            ],
            "Outp": [
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func NewClientConn(c net.Conn, r *bufio.Reader) *ClientConn": {
      "GeneratedClass": "\n    private class NewClientConn extends TaintTracking::FunctionModel {\n      // signature: func NewClientConn(c net.Conn, r *bufio.Reader) *ClientConn\n      NewClientConn() { hasQualifiedName(\"net/http/httputil\", \"NewClientConn\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(_)) and (outp.isResult()))\n        or\n        ((inp.isResult()) and (outp.isParameter(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(_)) and (outp.isResult()))\n        or\n        ((inp.isResult()) and (outp.isParameter(0)))",
      "Blocks": [
         {
            "Inp": [
               true,
               true,
               false
            ],
            "Outp": [
               false,
               false,
               true
            ]
         },
         {
            "Inp": [
               false,
               false,
               true
            ],
            "Outp": [
               true,
               false,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func NewProxyClientConn(c net.Conn, r *bufio.Reader) *ClientConn": {
      "GeneratedClass": "\n    private class NewProxyClientConn extends TaintTracking::FunctionModel {\n      // signature: func NewProxyClientConn(c net.Conn, r *bufio.Reader) *ClientConn\n      NewProxyClientConn() { hasQualifiedName(\"net/http/httputil\", \"NewProxyClientConn\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(_)) and (outp.isResult()))\n        or\n        ((inp.isResult()) and (outp.isParameter(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(_)) and (outp.isResult()))\n        or\n        ((inp.isResult()) and (outp.isParameter(0)))",
      "Blocks": [
         {
            "Inp": [
               true,
               true,
               false
            ],
            "Outp": [
               false,
               false,
               true
            ]
         },
         {
            "Inp": [
               false,
               false,
               true
            ],
            "Outp": [
               true,
               false,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func NewServerConn(c net.Conn, r *bufio.Reader) *ServerConn": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               true,
               false
            ],
            "Outp": [
               false,
               false,
               true
            ]
         }
      ],
      "IsEnabled": false
   },
   "func NewSingleHostReverseProxy(target *net/url.URL) *ReverseProxy": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   }
}
