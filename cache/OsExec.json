{"Name":"exec","PkgPath":"os/exec","PkgName":"exec","ID":"os/exec","Funcs":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Command","Signature":"func Command(name string, arg ...string) *Cmd","ID":"FunctionCommand","Docs":["Command returns the Cmd struct to execute the named program with","the given arguments.","","It sets only the Path and Args in the returned structure.","","If name contains no path separators, Command uses LookPath to","resolve name to a complete path if possible. Otherwise it uses name","directly as Path.","","The returned Cmd's Args field is constructed from the command name","followed by the elements of arg, so arg should not include the","command name itself. For example, Command(\"echo\", \"hello\").","Args[0] is always name, not the possibly resolved Path.","","On Windows, processes receive the whole command line as a single string","and do their own parsing. Command combines and quotes Args into a command","line string with an algorithm compatible with applications using","CommandLineToArgvW (which is the most common way). Notable exceptions are","msiexec.exe and cmd.exe (and thus, all batch files), which have a different","unquoting algorithm. In these or other similar cases, you can do the","quoting yourself and provide the full command line in SysProcAttr.CmdLine,","leaving Args empty."],"Name":"Command","PkgPath":"os/exec","PkgName":"exec","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"name","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 1))","Element":"parameter","Index":1},"VarName":"arg","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Cmd","PkgName":"exec","PkgPath":"os/exec","QualifiedName":"os/exec.Cmd","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"CommandContext","Signature":"func CommandContext(ctx context.Context, name string, arg ...string) *Cmd","ID":"FunctionCommandContext","Docs":["CommandContext is like Command but includes a context.","","The provided context is used to kill the process (by calling","os.Process.Kill) if the context becomes done before the command","completes on its own."],"Name":"CommandContext","PkgPath":"os/exec","PkgName":"exec","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"name","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 2))","Element":"parameter","Index":2},"VarName":"arg","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Cmd","PkgName":"exec","PkgPath":"os/exec","QualifiedName":"os/exec.Cmd","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"LookPath","Signature":"func LookPath(file string) (string, error)","ID":"FunctionLookPath","Docs":["LookPath searches for an executable named file in the","directories named by the PATH environment variable.","If file contains a slash, it is tried directly and the PATH is not consulted.","LookPath also uses PATHEXT environment variable to match","a suitable candidate.","The result may be an absolute path or a path relative to the current directory."],"Name":"LookPath","PkgPath":"os/exec","PkgName":"exec","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"file","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}],"TypeMethods":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"CmdCombinedOutput","Docs":["CombinedOutput runs the command and returns its combined standard","output and standard error."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Cmd","PkgName":"exec","PkgPath":"os/exec","QualifiedName":"os/exec.Cmd","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Cmd-CombinedOutput","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"CombinedOutput","Signature":"func (*Cmd).CombinedOutput() ([]byte, error)","ID":"FunctionCombinedOutput","Docs":["CombinedOutput runs the command and returns its combined standard","output and standard error."],"Name":"CombinedOutput","PkgPath":"os/exec","PkgName":"exec","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"CmdOutput","Docs":["Output runs the command and returns its standard output.","Any returned error will usually be of type *ExitError.","If c.Stderr was nil, Output populates ExitError.Stderr."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Cmd","PkgName":"exec","PkgPath":"os/exec","QualifiedName":"os/exec.Cmd","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Cmd-Output","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Output","Signature":"func (*Cmd).Output() ([]byte, error)","ID":"FunctionOutput","Docs":["Output runs the command and returns its standard output.","Any returned error will usually be of type *ExitError.","If c.Stderr was nil, Output populates ExitError.Stderr."],"Name":"Output","PkgPath":"os/exec","PkgName":"exec","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"CmdRun","Docs":["Run starts the specified command and waits for it to complete.","","The returned error is nil if the command runs, has no problems","copying stdin, stdout, and stderr, and exits with a zero exit","status.","","If the command starts but does not complete successfully, the error is of","type *ExitError. Other error types may be returned for other situations.","","If the calling goroutine has locked the operating system thread","with runtime.LockOSThread and modified any inheritable OS-level","thread state (for example, Linux or Plan 9 name spaces), the new","process will inherit the caller's thread state."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Cmd","PkgName":"exec","PkgPath":"os/exec","QualifiedName":"os/exec.Cmd","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Cmd-Run","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Run","Signature":"func (*Cmd).Run() error","ID":"FunctionRun","Docs":["Run starts the specified command and waits for it to complete.","","The returned error is nil if the command runs, has no problems","copying stdin, stdout, and stderr, and exits with a zero exit","status.","","If the command starts but does not complete successfully, the error is of","type *ExitError. Other error types may be returned for other situations.","","If the calling goroutine has locked the operating system thread","with runtime.LockOSThread and modified any inheritable OS-level","thread state (for example, Linux or Plan 9 name spaces), the new","process will inherit the caller's thread state."],"Name":"Run","PkgPath":"os/exec","PkgName":"exec","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"CmdStart","Docs":["Start starts the specified command but does not wait for it to complete.","","If Start returns successfully, the c.Process field will be set.","","The Wait method will return the exit code and release associated resources","once the command exits."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Cmd","PkgName":"exec","PkgPath":"os/exec","QualifiedName":"os/exec.Cmd","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Cmd-Start","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Start","Signature":"func (*Cmd).Start() error","ID":"FunctionStart","Docs":["Start starts the specified command but does not wait for it to complete.","","If Start returns successfully, the c.Process field will be set.","","The Wait method will return the exit code and release associated resources","once the command exits."],"Name":"Start","PkgPath":"os/exec","PkgName":"exec","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"CmdStderrPipe","Docs":["StderrPipe returns a pipe that will be connected to the command's","standard error when the command starts.","","Wait will close the pipe after seeing the command exit, so most callers","need not close the pipe themselves. It is thus incorrect to call Wait","before all reads from the pipe have completed.","For the same reason, it is incorrect to use Run when using StderrPipe.","See the StdoutPipe example for idiomatic usage."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Cmd","PkgName":"exec","PkgPath":"os/exec","QualifiedName":"os/exec.Cmd","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Cmd-StderrPipe","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"StderrPipe","Signature":"func (*Cmd).StderrPipe() (io.ReadCloser, error)","ID":"FunctionStderrPipe","Docs":["StderrPipe returns a pipe that will be connected to the command's","standard error when the command starts.","","Wait will close the pipe after seeing the command exit, so most callers","need not close the pipe themselves. It is thus incorrect to call Wait","before all reads from the pipe have completed.","For the same reason, it is incorrect to use Run when using StderrPipe.","See the StdoutPipe example for idiomatic usage."],"Name":"StderrPipe","PkgPath":"os/exec","PkgName":"exec","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"ReadCloser","PkgName":"io","PkgPath":"io","QualifiedName":"io.ReadCloser","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"CmdStdinPipe","Docs":["StdinPipe returns a pipe that will be connected to the command's","standard input when the command starts.","The pipe will be closed automatically after Wait sees the command exit.","A caller need only call Close to force the pipe to close sooner.","For example, if the command being run will not exit until standard input","is closed, the caller must close the pipe."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Cmd","PkgName":"exec","PkgPath":"os/exec","QualifiedName":"os/exec.Cmd","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Cmd-StdinPipe","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"StdinPipe","Signature":"func (*Cmd).StdinPipe() (io.WriteCloser, error)","ID":"FunctionStdinPipe","Docs":["StdinPipe returns a pipe that will be connected to the command's","standard input when the command starts.","The pipe will be closed automatically after Wait sees the command exit.","A caller need only call Close to force the pipe to close sooner.","For example, if the command being run will not exit until standard input","is closed, the caller must close the pipe."],"Name":"StdinPipe","PkgPath":"os/exec","PkgName":"exec","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"WriteCloser","PkgName":"io","PkgPath":"io","QualifiedName":"io.WriteCloser","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"CmdStdoutPipe","Docs":["StdoutPipe returns a pipe that will be connected to the command's","standard output when the command starts.","","Wait will close the pipe after seeing the command exit, so most callers","need not close the pipe themselves. It is thus incorrect to call Wait","before all reads from the pipe have completed.","For the same reason, it is incorrect to call Run when using StdoutPipe.","See the example for idiomatic usage."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Cmd","PkgName":"exec","PkgPath":"os/exec","QualifiedName":"os/exec.Cmd","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Cmd-StdoutPipe","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"StdoutPipe","Signature":"func (*Cmd).StdoutPipe() (io.ReadCloser, error)","ID":"FunctionStdoutPipe","Docs":["StdoutPipe returns a pipe that will be connected to the command's","standard output when the command starts.","","Wait will close the pipe after seeing the command exit, so most callers","need not close the pipe themselves. It is thus incorrect to call Wait","before all reads from the pipe have completed.","For the same reason, it is incorrect to call Run when using StdoutPipe.","See the example for idiomatic usage."],"Name":"StdoutPipe","PkgPath":"os/exec","PkgName":"exec","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"ReadCloser","PkgName":"io","PkgPath":"io","QualifiedName":"io.ReadCloser","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"CmdString","Docs":["String returns a human-readable description of c.","It is intended only for debugging.","In particular, it is not suitable for use as input to a shell.","The output of String may vary across Go releases."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Cmd","PkgName":"exec","PkgPath":"os/exec","QualifiedName":"os/exec.Cmd","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Cmd-String","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"String","Signature":"func (*Cmd).String() string","ID":"FunctionString","Docs":["String returns a human-readable description of c.","It is intended only for debugging.","In particular, it is not suitable for use as input to a shell.","The output of String may vary across Go releases."],"Name":"String","PkgPath":"os/exec","PkgName":"exec","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"CmdWait","Docs":["Wait waits for the command to exit and waits for any copying to","stdin or copying from stdout or stderr to complete.","","The command must have been started by Start.","","The returned error is nil if the command runs, has no problems","copying stdin, stdout, and stderr, and exits with a zero exit","status.","","If the command fails to run or doesn't complete successfully, the","error is of type *ExitError. Other error types may be","returned for I/O problems.","","If any of c.Stdin, c.Stdout or c.Stderr are not an *os.File, Wait also waits","for the respective I/O loop copying to or from the process to complete.","","Wait releases any resources associated with the Cmd."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Cmd","PkgName":"exec","PkgPath":"os/exec","QualifiedName":"os/exec.Cmd","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Cmd-Wait","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Wait","Signature":"func (*Cmd).Wait() error","ID":"FunctionWait","Docs":["Wait waits for the command to exit and waits for any copying to","stdin or copying from stdout or stderr to complete.","","The command must have been started by Start.","","The returned error is nil if the command runs, has no problems","copying stdin, stdout, and stderr, and exits with a zero exit","status.","","If the command fails to run or doesn't complete successfully, the","error is of type *ExitError. Other error types may be","returned for I/O problems.","","If any of c.Stdin, c.Stdout or c.Stderr are not an *os.File, Wait also waits","for the respective I/O loop copying to or from the process to complete.","","Wait releases any resources associated with the Cmd."],"Name":"Wait","PkgPath":"os/exec","PkgName":"exec","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ErrorError","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Error","PkgName":"exec","PkgPath":"os/exec","QualifiedName":"os/exec.Error","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Error-Error","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Error","Signature":"func (*Error).Error() string","ID":"FunctionError","Docs":[],"Name":"Error","PkgPath":"os/exec","PkgName":"exec","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ErrorUnwrap","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Error","PkgName":"exec","PkgPath":"os/exec","QualifiedName":"os/exec.Error","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Error-Unwrap","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Unwrap","Signature":"func (*Error).Unwrap() error","ID":"FunctionUnwrap","Docs":[],"Name":"Unwrap","PkgPath":"os/exec","PkgName":"exec","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ExitErrorError","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ExitError","PkgName":"exec","PkgPath":"os/exec","QualifiedName":"os/exec.ExitError","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ExitError-Error","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Error","Signature":"func (*ExitError).Error() string","ID":"FunctionError","Docs":[],"Name":"Error","PkgPath":"os/exec","PkgName":"exec","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}}],"InterfaceMethods":[]}