{"Name":"sql","PkgPath":"database/sql","PkgName":"sql","ID":"database/sql","Funcs":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Drivers","Signature":"func Drivers() []string","ID":"FunctionDrivers","Docs":["Drivers returns a sorted list of the names of the registered drivers."],"Name":"Drivers","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"Named","Signature":"func Named(name string, value interface{}) NamedArg","ID":"FunctionNamed","Docs":["Named provides a more concise way to create NamedArg values.","","Example usage:","","    db.ExecContext(ctx, `","        delete from Invoice","        where","            TimeCreated \u003c @end","            and TimeCreated \u003e= @start;`,","        sql.Named(\"start\", startTime),","        sql.Named(\"end\", endTime),","    )"],"Name":"Named","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"name","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"value","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"NamedArg","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.NamedArg","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Open","Signature":"func Open(driverName string, dataSourceName string) (*DB, error)","ID":"FunctionOpen","Docs":["Open opens a database specified by its database driver name and a","driver-specific data source name, usually consisting of at least a","database name and connection information.","","Most users will open a database via a driver-specific connection","helper function that returns a *DB. No database drivers are included","in the Go standard library. See https://golang.org/s/sqldrivers for","a list of third-party drivers.","","Open may just validate its arguments without creating a connection","to the database. To verify that the data source name is valid, call","Ping.","","The returned DB is safe for concurrent use by multiple goroutines","and maintains its own pool of idle connections. Thus, the Open","function should be called just once. It is rarely necessary to","close a DB."],"Name":"Open","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"driverName","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"dataSourceName","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"OpenDB","Signature":"func OpenDB(c database/sql/driver.Connector) *DB","ID":"FunctionOpenDB","Docs":["OpenDB opens a database using a Connector, allowing drivers to","bypass a string based data source name.","","Most users will open a database via a driver-specific connection","helper function that returns a *DB. No database drivers are included","in the Go standard library. See https://golang.org/s/sqldrivers for","a list of third-party drivers.","","OpenDB may just validate its arguments without creating a connection","to the database. To verify that the data source name is valid, call","Ping.","","The returned DB is safe for concurrent use by multiple goroutines","and maintains its own pool of idle connections. Thus, the OpenDB","function should be called just once. It is rarely necessary to","close a DB."],"Name":"OpenDB","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"c","TypeName":"Connector","PkgName":"driver","PkgPath":"database/sql/driver","QualifiedName":"database/sql/driver.Connector","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Register","Signature":"func Register(name string, driver database/sql/driver.Driver)","ID":"FunctionRegister","Docs":["Register makes a database driver available by the provided name.","If Register is called twice with the same name or if driver is nil,","it panics."],"Name":"Register","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"name","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"driver","TypeName":"Driver","PkgName":"driver","PkgPath":"database/sql/driver","QualifiedName":"database/sql/driver.Driver","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":null}],"TypeMethods":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ColumnTypeDatabaseTypeName","Docs":["DatabaseTypeName returns the database system name of the column type. If an empty","string is returned the driver type name is not supported.","Consult your driver documentation for a list of driver data types. Length specifiers","are not included.","Common type include \"VARCHAR\", \"TEXT\", \"NVARCHAR\", \"DECIMAL\", \"BOOL\", \"INT\", \"BIGINT\"."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ColumnType","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.ColumnType","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ColumnType-DatabaseTypeName","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DatabaseTypeName","Signature":"func (*ColumnType).DatabaseTypeName() string","ID":"FunctionDatabaseTypeName","Docs":["DatabaseTypeName returns the database system name of the column type. If an empty","string is returned the driver type name is not supported.","Consult your driver documentation for a list of driver data types. Length specifiers","are not included.","Common type include \"VARCHAR\", \"TEXT\", \"NVARCHAR\", \"DECIMAL\", \"BOOL\", \"INT\", \"BIGINT\"."],"Name":"DatabaseTypeName","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ColumnTypeDecimalSize","Docs":["DecimalSize returns the scale and precision of a decimal type.","If not applicable or if not supported ok is false."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ColumnType","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.ColumnType","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ColumnType-DecimalSize","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DecimalSize","Signature":"func (*ColumnType).DecimalSize() (precision int64, scale int64, ok bool)","ID":"FunctionDecimalSize","Docs":["DecimalSize returns the scale and precision of a decimal type.","If not applicable or if not supported ok is false."],"Name":"DecimalSize","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"precision","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"scale","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(2)","Element":"result","Index":2},"VarName":"ok","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ColumnTypeLength","Docs":["Length returns the column type length for variable length column types such","as text and binary field types. If the type length is unbounded the value will","be math.MaxInt64 (any database limits will still apply).","If the column type is not variable length, such as an int, or if not supported","by the driver ok is false."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ColumnType","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.ColumnType","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ColumnType-Length","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Length","Signature":"func (*ColumnType).Length() (length int64, ok bool)","ID":"FunctionLength","Docs":["Length returns the column type length for variable length column types such","as text and binary field types. If the type length is unbounded the value will","be math.MaxInt64 (any database limits will still apply).","If the column type is not variable length, such as an int, or if not supported","by the driver ok is false."],"Name":"Length","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"length","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"ok","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ColumnTypeName","Docs":["Name returns the name or alias of the column."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ColumnType","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.ColumnType","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ColumnType-Name","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Name","Signature":"func (*ColumnType).Name() string","ID":"FunctionName","Docs":["Name returns the name or alias of the column."],"Name":"Name","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ColumnTypeNullable","Docs":["Nullable reports whether the column may be null.","If a driver does not support this property ok will be false."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ColumnType","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.ColumnType","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ColumnType-Nullable","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Nullable","Signature":"func (*ColumnType).Nullable() (nullable bool, ok bool)","ID":"FunctionNullable","Docs":["Nullable reports whether the column may be null.","If a driver does not support this property ok will be false."],"Name":"Nullable","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"nullable","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"ok","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ColumnTypeScanType","Docs":["ScanType returns a Go type suitable for scanning into using Rows.Scan.","If a driver does not support this property ScanType will return","the type of an empty interface."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ColumnType","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.ColumnType","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ColumnType-ScanType","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ScanType","Signature":"func (*ColumnType).ScanType() reflect.Type","ID":"FunctionScanType","Docs":["ScanType returns a Go type suitable for scanning into using Rows.Scan.","If a driver does not support this property ScanType will return","the type of an empty interface."],"Name":"ScanType","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ConnBeginTx","Docs":["BeginTx starts a transaction.","","The provided context is used until the transaction is committed or rolled back.","If the context is canceled, the sql package will roll back","the transaction. Tx.Commit will return an error if the context provided to","BeginTx is canceled.","","The provided TxOptions is optional and may be nil if defaults should be used.","If a non-default isolation level is used that the driver doesn't support,","an error will be returned."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Conn","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Conn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Conn-BeginTx","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BeginTx","Signature":"func (*Conn).BeginTx(ctx context.Context, opts *TxOptions) (*Tx, error)","ID":"FunctionBeginTx","Docs":["BeginTx starts a transaction.","","The provided context is used until the transaction is committed or rolled back.","If the context is canceled, the sql package will roll back","the transaction. Tx.Commit will return an error if the context provided to","BeginTx is canceled.","","The provided TxOptions is optional and may be nil if defaults should be used.","If a non-default isolation level is used that the driver doesn't support,","an error will be returned."],"Name":"BeginTx","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"opts","TypeName":"TxOptions","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.TxOptions","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Tx","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Tx","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ConnClose","Docs":["Close returns the connection to the connection pool.","All operations after a Close will return with ErrConnDone.","Close is safe to call concurrently with other operations and will","block until all other operations finish. It may be useful to first","cancel any used context and then call close directly after."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Conn","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Conn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Conn-Close","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Close","Signature":"func (*Conn).Close() error","ID":"FunctionClose","Docs":["Close returns the connection to the connection pool.","All operations after a Close will return with ErrConnDone.","Close is safe to call concurrently with other operations and will","block until all other operations finish. It may be useful to first","cancel any used context and then call close directly after."],"Name":"Close","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ConnExecContext","Docs":["ExecContext executes a query without returning any rows.","The args are for any placeholder parameters in the query."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Conn","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Conn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Conn-ExecContext","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ExecContext","Signature":"func (*Conn).ExecContext(ctx context.Context, query string, args ...interface{}) (Result, error)","ID":"FunctionExecContext","Docs":["ExecContext executes a query without returning any rows.","The args are for any placeholder parameters in the query."],"Name":"ExecContext","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 2))","Element":"parameter","Index":2},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Result","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Result","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ConnPingContext","Docs":["PingContext verifies the connection to the database is still alive."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Conn","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Conn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Conn-PingContext","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"PingContext","Signature":"func (*Conn).PingContext(ctx context.Context) error","ID":"FunctionPingContext","Docs":["PingContext verifies the connection to the database is still alive."],"Name":"PingContext","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"ConnPrepareContext","Docs":["PrepareContext creates a prepared statement for later queries or executions.","Multiple queries or executions may be run concurrently from the","returned statement.","The caller must call the statement's Close method","when the statement is no longer needed.","","The provided context is used for the preparation of the statement, not for the","execution of the statement."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Conn","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Conn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Conn-PrepareContext","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"PrepareContext","Signature":"func (*Conn).PrepareContext(ctx context.Context, query string) (*Stmt, error)","ID":"FunctionPrepareContext","Docs":["PrepareContext creates a prepared statement for later queries or executions.","Multiple queries or executions may be run concurrently from the","returned statement.","The caller must call the statement's Close method","when the statement is no longer needed.","","The provided context is used for the preparation of the statement, not for the","execution of the statement."],"Name":"PrepareContext","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Stmt","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Stmt","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ConnQueryContext","Docs":["QueryContext executes a query that returns rows, typically a SELECT.","The args are for any placeholder parameters in the query."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Conn","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Conn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Conn-QueryContext","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"QueryContext","Signature":"func (*Conn).QueryContext(ctx context.Context, query string, args ...interface{}) (*Rows, error)","ID":"FunctionQueryContext","Docs":["QueryContext executes a query that returns rows, typically a SELECT.","The args are for any placeholder parameters in the query."],"Name":"QueryContext","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 2))","Element":"parameter","Index":2},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Rows","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Rows","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ConnQueryRowContext","Docs":["QueryRowContext executes a query that is expected to return at most one row.","QueryRowContext always returns a non-nil value. Errors are deferred until","Row's Scan method is called.","If the query selects no rows, the *Row's Scan will return ErrNoRows.","Otherwise, the *Row's Scan scans the first selected row and discards","the rest."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Conn","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Conn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Conn-QueryRowContext","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"QueryRowContext","Signature":"func (*Conn).QueryRowContext(ctx context.Context, query string, args ...interface{}) *Row","ID":"FunctionQueryRowContext","Docs":["QueryRowContext executes a query that is expected to return at most one row.","QueryRowContext always returns a non-nil value. Errors are deferred until","Row's Scan method is called.","If the query selects no rows, the *Row's Scan will return ErrNoRows.","Otherwise, the *Row's Scan scans the first selected row and discards","the rest."],"Name":"QueryRowContext","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 2))","Element":"parameter","Index":2},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Row","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Row","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ConnRaw","Docs":["Raw executes f exposing the underlying driver connection for the","duration of f. The driverConn must not be used outside of f.","","Once f returns and err is nil, the Conn will continue to be usable","until Conn.Close is called."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Conn","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Conn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Conn-Raw","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Raw","Signature":"func (*Conn).Raw(f func(driverConn interface{}) error) (err error)","ID":"FunctionRaw","Docs":["Raw executes f exposing the underlying driver connection for the","duration of f. The driverConn must not be used outside of f.","","Once f returns and err is nil, the Conn will continue to be usable","until Conn.Close is called."],"Name":"Raw","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"f","TypeName":"func(driverConn interface{}) error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"err","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DBBegin","Docs":["Begin starts a transaction. The default isolation level is dependent on","the driver."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-DB-Begin","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Begin","Signature":"func (*DB).Begin() (*Tx, error)","ID":"FunctionBegin","Docs":["Begin starts a transaction. The default isolation level is dependent on","the driver."],"Name":"Begin","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Tx","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Tx","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DBBeginTx","Docs":["BeginTx starts a transaction.","","The provided context is used until the transaction is committed or rolled back.","If the context is canceled, the sql package will roll back","the transaction. Tx.Commit will return an error if the context provided to","BeginTx is canceled.","","The provided TxOptions is optional and may be nil if defaults should be used.","If a non-default isolation level is used that the driver doesn't support,","an error will be returned."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-DB-BeginTx","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BeginTx","Signature":"func (*DB).BeginTx(ctx context.Context, opts *TxOptions) (*Tx, error)","ID":"FunctionBeginTx","Docs":["BeginTx starts a transaction.","","The provided context is used until the transaction is committed or rolled back.","If the context is canceled, the sql package will roll back","the transaction. Tx.Commit will return an error if the context provided to","BeginTx is canceled.","","The provided TxOptions is optional and may be nil if defaults should be used.","If a non-default isolation level is used that the driver doesn't support,","an error will be returned."],"Name":"BeginTx","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"opts","TypeName":"TxOptions","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.TxOptions","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Tx","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Tx","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DBClose","Docs":["Close closes the database and prevents new queries from starting.","Close then waits for all queries that have started processing on the server","to finish.","","It is rare to Close a DB, as the DB handle is meant to be","long-lived and shared between many goroutines."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-DB-Close","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Close","Signature":"func (*DB).Close() error","ID":"FunctionClose","Docs":["Close closes the database and prevents new queries from starting.","Close then waits for all queries that have started processing on the server","to finish.","","It is rare to Close a DB, as the DB handle is meant to be","long-lived and shared between many goroutines."],"Name":"Close","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DBConn","Docs":["Conn returns a single connection by either opening a new connection","or returning an existing connection from the connection pool. Conn will","block until either a connection is returned or ctx is canceled.","Queries run on the same Conn will be run in the same database session.","","Every Conn must be returned to the database pool after use by","calling Conn.Close."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-DB-Conn","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Conn","Signature":"func (*DB).Conn(ctx context.Context) (*Conn, error)","ID":"FunctionConn","Docs":["Conn returns a single connection by either opening a new connection","or returning an existing connection from the connection pool. Conn will","block until either a connection is returned or ctx is canceled.","Queries run on the same Conn will be run in the same database session.","","Every Conn must be returned to the database pool after use by","calling Conn.Close."],"Name":"Conn","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Conn","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Conn","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DBDriver","Docs":["Driver returns the database's underlying driver."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-DB-Driver","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Driver","Signature":"func (*DB).Driver() database/sql/driver.Driver","ID":"FunctionDriver","Docs":["Driver returns the database's underlying driver."],"Name":"Driver","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Driver","PkgName":"driver","PkgPath":"database/sql/driver","QualifiedName":"database/sql/driver.Driver","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DBExec","Docs":["Exec executes a query without returning any rows.","The args are for any placeholder parameters in the query."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-DB-Exec","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Exec","Signature":"func (*DB).Exec(query string, args ...interface{}) (Result, error)","ID":"FunctionExec","Docs":["Exec executes a query without returning any rows.","The args are for any placeholder parameters in the query."],"Name":"Exec","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 1))","Element":"parameter","Index":1},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Result","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Result","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DBExecContext","Docs":["ExecContext executes a query without returning any rows.","The args are for any placeholder parameters in the query."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-DB-ExecContext","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ExecContext","Signature":"func (*DB).ExecContext(ctx context.Context, query string, args ...interface{}) (Result, error)","ID":"FunctionExecContext","Docs":["ExecContext executes a query without returning any rows.","The args are for any placeholder parameters in the query."],"Name":"ExecContext","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 2))","Element":"parameter","Index":2},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Result","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Result","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DBPing","Docs":["Ping verifies a connection to the database is still alive,","establishing a connection if necessary."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-DB-Ping","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Ping","Signature":"func (*DB).Ping() error","ID":"FunctionPing","Docs":["Ping verifies a connection to the database is still alive,","establishing a connection if necessary."],"Name":"Ping","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DBPingContext","Docs":["PingContext verifies a connection to the database is still alive,","establishing a connection if necessary."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-DB-PingContext","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"PingContext","Signature":"func (*DB).PingContext(ctx context.Context) error","ID":"FunctionPingContext","Docs":["PingContext verifies a connection to the database is still alive,","establishing a connection if necessary."],"Name":"PingContext","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"DBPrepare","Docs":["Prepare creates a prepared statement for later queries or executions.","Multiple queries or executions may be run concurrently from the","returned statement.","The caller must call the statement's Close method","when the statement is no longer needed."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-DB-Prepare","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Prepare","Signature":"func (*DB).Prepare(query string) (*Stmt, error)","ID":"FunctionPrepare","Docs":["Prepare creates a prepared statement for later queries or executions.","Multiple queries or executions may be run concurrently from the","returned statement.","The caller must call the statement's Close method","when the statement is no longer needed."],"Name":"Prepare","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Stmt","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Stmt","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"DBPrepareContext","Docs":["PrepareContext creates a prepared statement for later queries or executions.","Multiple queries or executions may be run concurrently from the","returned statement.","The caller must call the statement's Close method","when the statement is no longer needed.","","The provided context is used for the preparation of the statement, not for the","execution of the statement."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-DB-PrepareContext","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"PrepareContext","Signature":"func (*DB).PrepareContext(ctx context.Context, query string) (*Stmt, error)","ID":"FunctionPrepareContext","Docs":["PrepareContext creates a prepared statement for later queries or executions.","Multiple queries or executions may be run concurrently from the","returned statement.","The caller must call the statement's Close method","when the statement is no longer needed.","","The provided context is used for the preparation of the statement, not for the","execution of the statement."],"Name":"PrepareContext","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Stmt","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Stmt","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DBQuery","Docs":["Query executes a query that returns rows, typically a SELECT.","The args are for any placeholder parameters in the query."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-DB-Query","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Query","Signature":"func (*DB).Query(query string, args ...interface{}) (*Rows, error)","ID":"FunctionQuery","Docs":["Query executes a query that returns rows, typically a SELECT.","The args are for any placeholder parameters in the query."],"Name":"Query","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 1))","Element":"parameter","Index":1},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Rows","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Rows","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DBQueryContext","Docs":["QueryContext executes a query that returns rows, typically a SELECT.","The args are for any placeholder parameters in the query."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-DB-QueryContext","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"QueryContext","Signature":"func (*DB).QueryContext(ctx context.Context, query string, args ...interface{}) (*Rows, error)","ID":"FunctionQueryContext","Docs":["QueryContext executes a query that returns rows, typically a SELECT.","The args are for any placeholder parameters in the query."],"Name":"QueryContext","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 2))","Element":"parameter","Index":2},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Rows","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Rows","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DBQueryRow","Docs":["QueryRow executes a query that is expected to return at most one row.","QueryRow always returns a non-nil value. Errors are deferred until","Row's Scan method is called.","If the query selects no rows, the *Row's Scan will return ErrNoRows.","Otherwise, the *Row's Scan scans the first selected row and discards","the rest."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-DB-QueryRow","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"QueryRow","Signature":"func (*DB).QueryRow(query string, args ...interface{}) *Row","ID":"FunctionQueryRow","Docs":["QueryRow executes a query that is expected to return at most one row.","QueryRow always returns a non-nil value. Errors are deferred until","Row's Scan method is called.","If the query selects no rows, the *Row's Scan will return ErrNoRows.","Otherwise, the *Row's Scan scans the first selected row and discards","the rest."],"Name":"QueryRow","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 1))","Element":"parameter","Index":1},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Row","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Row","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DBQueryRowContext","Docs":["QueryRowContext executes a query that is expected to return at most one row.","QueryRowContext always returns a non-nil value. Errors are deferred until","Row's Scan method is called.","If the query selects no rows, the *Row's Scan will return ErrNoRows.","Otherwise, the *Row's Scan scans the first selected row and discards","the rest."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-DB-QueryRowContext","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"QueryRowContext","Signature":"func (*DB).QueryRowContext(ctx context.Context, query string, args ...interface{}) *Row","ID":"FunctionQueryRowContext","Docs":["QueryRowContext executes a query that is expected to return at most one row.","QueryRowContext always returns a non-nil value. Errors are deferred until","Row's Scan method is called.","If the query selects no rows, the *Row's Scan will return ErrNoRows.","Otherwise, the *Row's Scan scans the first selected row and discards","the rest."],"Name":"QueryRowContext","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 2))","Element":"parameter","Index":2},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Row","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Row","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DBSetConnMaxLifetime","Docs":["SetConnMaxLifetime sets the maximum amount of time a connection may be reused.","","Expired connections may be closed lazily before reuse.","","If d \u003c= 0, connections are reused forever."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-DB-SetConnMaxLifetime","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetConnMaxLifetime","Signature":"func (*DB).SetConnMaxLifetime(d time.Duration)","ID":"FunctionSetConnMaxLifetime","Docs":["SetConnMaxLifetime sets the maximum amount of time a connection may be reused.","","Expired connections may be closed lazily before reuse.","","If d \u003c= 0, connections are reused forever."],"Name":"SetConnMaxLifetime","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"d","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DBSetMaxIdleConns","Docs":["SetMaxIdleConns sets the maximum number of connections in the idle","connection pool.","","If MaxOpenConns is greater than 0 but less than the new MaxIdleConns,","then the new MaxIdleConns will be reduced to match the MaxOpenConns limit.","","If n \u003c= 0, no idle connections are retained.","","The default max idle connections is currently 2. This may change in","a future release."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-DB-SetMaxIdleConns","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetMaxIdleConns","Signature":"func (*DB).SetMaxIdleConns(n int)","ID":"FunctionSetMaxIdleConns","Docs":["SetMaxIdleConns sets the maximum number of connections in the idle","connection pool.","","If MaxOpenConns is greater than 0 but less than the new MaxIdleConns,","then the new MaxIdleConns will be reduced to match the MaxOpenConns limit.","","If n \u003c= 0, no idle connections are retained.","","The default max idle connections is currently 2. This may change in","a future release."],"Name":"SetMaxIdleConns","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"n","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DBSetMaxOpenConns","Docs":["SetMaxOpenConns sets the maximum number of open connections to the database.","","If MaxIdleConns is greater than 0 and the new MaxOpenConns is less than","MaxIdleConns, then MaxIdleConns will be reduced to match the new","MaxOpenConns limit.","","If n \u003c= 0, then there is no limit on the number of open connections.","The default is 0 (unlimited)."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-DB-SetMaxOpenConns","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetMaxOpenConns","Signature":"func (*DB).SetMaxOpenConns(n int)","ID":"FunctionSetMaxOpenConns","Docs":["SetMaxOpenConns sets the maximum number of open connections to the database.","","If MaxIdleConns is greater than 0 and the new MaxOpenConns is less than","MaxIdleConns, then MaxIdleConns will be reduced to match the new","MaxOpenConns limit.","","If n \u003c= 0, then there is no limit on the number of open connections.","The default is 0 (unlimited)."],"Name":"SetMaxOpenConns","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"n","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DBStats","Docs":["Stats returns database statistics."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"DB","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-DB-Stats","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Stats","Signature":"func (*DB).Stats() DBStats","ID":"FunctionStats","Docs":["Stats returns database statistics."],"Name":"Stats","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"DBStats","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.DBStats","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"IsolationLevelString","Docs":["String returns the name of the transaction isolation level."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"IsolationLevel","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.IsolationLevel","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-IsolationLevel-String","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"String","Signature":"func (IsolationLevel).String() string","ID":"FunctionString","Docs":["String returns the name of the transaction isolation level."],"Name":"String","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NullBoolScan","Docs":["Scan implements the Scanner interface."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"NullBool","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.NullBool","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-NullBool-Scan","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Scan","Signature":"func (*NullBool).Scan(value interface{}) error","ID":"FunctionScan","Docs":["Scan implements the Scanner interface."],"Name":"Scan","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"value","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NullBoolValue","Docs":["Value implements the driver Valuer interface."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"NullBool","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.NullBool","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-NullBool-Value","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Value","Signature":"func (NullBool).Value() (database/sql/driver.Value, error)","ID":"FunctionValue","Docs":["Value implements the driver Valuer interface."],"Name":"Value","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"driver","PkgPath":"database/sql/driver","QualifiedName":"database/sql/driver.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NullFloat64Scan","Docs":["Scan implements the Scanner interface."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"NullFloat64","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.NullFloat64","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-NullFloat64-Scan","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Scan","Signature":"func (*NullFloat64).Scan(value interface{}) error","ID":"FunctionScan","Docs":["Scan implements the Scanner interface."],"Name":"Scan","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"value","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NullFloat64Value","Docs":["Value implements the driver Valuer interface."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"NullFloat64","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.NullFloat64","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-NullFloat64-Value","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Value","Signature":"func (NullFloat64).Value() (database/sql/driver.Value, error)","ID":"FunctionValue","Docs":["Value implements the driver Valuer interface."],"Name":"Value","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"driver","PkgPath":"database/sql/driver","QualifiedName":"database/sql/driver.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NullInt32Scan","Docs":["Scan implements the Scanner interface."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"NullInt32","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.NullInt32","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-NullInt32-Scan","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Scan","Signature":"func (*NullInt32).Scan(value interface{}) error","ID":"FunctionScan","Docs":["Scan implements the Scanner interface."],"Name":"Scan","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"value","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NullInt32Value","Docs":["Value implements the driver Valuer interface."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"NullInt32","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.NullInt32","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-NullInt32-Value","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Value","Signature":"func (NullInt32).Value() (database/sql/driver.Value, error)","ID":"FunctionValue","Docs":["Value implements the driver Valuer interface."],"Name":"Value","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"driver","PkgPath":"database/sql/driver","QualifiedName":"database/sql/driver.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NullInt64Scan","Docs":["Scan implements the Scanner interface."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"NullInt64","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.NullInt64","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-NullInt64-Scan","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Scan","Signature":"func (*NullInt64).Scan(value interface{}) error","ID":"FunctionScan","Docs":["Scan implements the Scanner interface."],"Name":"Scan","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"value","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NullInt64Value","Docs":["Value implements the driver Valuer interface."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"NullInt64","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.NullInt64","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-NullInt64-Value","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Value","Signature":"func (NullInt64).Value() (database/sql/driver.Value, error)","ID":"FunctionValue","Docs":["Value implements the driver Valuer interface."],"Name":"Value","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"driver","PkgPath":"database/sql/driver","QualifiedName":"database/sql/driver.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NullStringScan","Docs":["Scan implements the Scanner interface."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"NullString","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.NullString","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-NullString-Scan","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Scan","Signature":"func (*NullString).Scan(value interface{}) error","ID":"FunctionScan","Docs":["Scan implements the Scanner interface."],"Name":"Scan","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"value","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NullStringValue","Docs":["Value implements the driver Valuer interface."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"NullString","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.NullString","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-NullString-Value","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Value","Signature":"func (NullString).Value() (database/sql/driver.Value, error)","ID":"FunctionValue","Docs":["Value implements the driver Valuer interface."],"Name":"Value","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"driver","PkgPath":"database/sql/driver","QualifiedName":"database/sql/driver.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NullTimeScan","Docs":["Scan implements the Scanner interface."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"NullTime","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.NullTime","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-NullTime-Scan","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Scan","Signature":"func (*NullTime).Scan(value interface{}) error","ID":"FunctionScan","Docs":["Scan implements the Scanner interface."],"Name":"Scan","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"value","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NullTimeValue","Docs":["Value implements the driver Valuer interface."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"NullTime","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.NullTime","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-NullTime-Value","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Value","Signature":"func (NullTime).Value() (database/sql/driver.Value, error)","ID":"FunctionValue","Docs":["Value implements the driver Valuer interface."],"Name":"Value","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"driver","PkgPath":"database/sql/driver","QualifiedName":"database/sql/driver.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RowScan","Docs":["Scan copies the columns from the matched row into the values","pointed at by dest. See the documentation on Rows.Scan for details.","If more than one row matches the query,","Scan uses the first row and discards the rest. If no row matches","the query, Scan returns ErrNoRows."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Row","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Row","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Row-Scan","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Scan","Signature":"func (*Row).Scan(dest ...interface{}) error","ID":"FunctionScan","Docs":["Scan copies the columns from the matched row into the values","pointed at by dest. See the documentation on Rows.Scan for details.","If more than one row matches the query,","Scan uses the first row and discards the rest. If no row matches","the query, Scan returns ErrNoRows."],"Name":"Scan","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(_)","Element":"parameter","Index":0},"VarName":"dest","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RowsClose","Docs":["Close closes the Rows, preventing further enumeration. If Next is called","and returns false and there are no further result sets,","the Rows are closed automatically and it will suffice to check the","result of Err. Close is idempotent and does not affect the result of Err."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Rows","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Rows","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Rows-Close","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Close","Signature":"func (*Rows).Close() error","ID":"FunctionClose","Docs":["Close closes the Rows, preventing further enumeration. If Next is called","and returns false and there are no further result sets,","the Rows are closed automatically and it will suffice to check the","result of Err. Close is idempotent and does not affect the result of Err."],"Name":"Close","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RowsColumnTypes","Docs":["ColumnTypes returns column information such as column type, length,","and nullable. Some information may not be available from some drivers."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Rows","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Rows","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Rows-ColumnTypes","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ColumnTypes","Signature":"func (*Rows).ColumnTypes() ([]*ColumnType, error)","ID":"FunctionColumnTypes","Docs":["ColumnTypes returns column information such as column type, length,","and nullable. Some information may not be available from some drivers."],"Name":"ColumnTypes","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"ColumnType","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.ColumnType","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RowsColumns","Docs":["Columns returns the column names.","Columns returns an error if the rows are closed."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Rows","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Rows","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Rows-Columns","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Columns","Signature":"func (*Rows).Columns() ([]string, error)","ID":"FunctionColumns","Docs":["Columns returns the column names.","Columns returns an error if the rows are closed."],"Name":"Columns","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RowsErr","Docs":["Err returns the error, if any, that was encountered during iteration.","Err may be called after an explicit or implicit Close."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Rows","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Rows","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Rows-Err","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Err","Signature":"func (*Rows).Err() error","ID":"FunctionErr","Docs":["Err returns the error, if any, that was encountered during iteration.","Err may be called after an explicit or implicit Close."],"Name":"Err","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RowsNext","Docs":["Next prepares the next result row for reading with the Scan method. It","returns true on success, or false if there is no next result row or an error","happened while preparing it. Err should be consulted to distinguish between","the two cases.","","Every call to Scan, even the first one, must be preceded by a call to Next."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Rows","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Rows","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Rows-Next","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Next","Signature":"func (*Rows).Next() bool","ID":"FunctionNext","Docs":["Next prepares the next result row for reading with the Scan method. It","returns true on success, or false if there is no next result row or an error","happened while preparing it. Err should be consulted to distinguish between","the two cases.","","Every call to Scan, even the first one, must be preceded by a call to Next."],"Name":"Next","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RowsNextResultSet","Docs":["NextResultSet prepares the next result set for reading. It reports whether","there is further result sets, or false if there is no further result set","or if there is an error advancing to it. The Err method should be consulted","to distinguish between the two cases.","","After calling NextResultSet, the Next method should always be called before","scanning. If there are further result sets they may not have rows in the result","set."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Rows","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Rows","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Rows-NextResultSet","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NextResultSet","Signature":"func (*Rows).NextResultSet() bool","ID":"FunctionNextResultSet","Docs":["NextResultSet prepares the next result set for reading. It reports whether","there is further result sets, or false if there is no further result set","or if there is an error advancing to it. The Err method should be consulted","to distinguish between the two cases.","","After calling NextResultSet, the Next method should always be called before","scanning. If there are further result sets they may not have rows in the result","set."],"Name":"NextResultSet","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RowsScan","Docs":["Scan copies the columns in the current row into the values pointed","at by dest. The number of values in dest must be the same as the","number of columns in Rows.","","Scan converts columns read from the database into the following","common Go types and special types provided by the sql package:","","   *string","   *[]byte","   *int, *int8, *int16, *int32, *int64","   *uint, *uint8, *uint16, *uint32, *uint64","   *bool","   *float32, *float64","   *interface{}","   *RawBytes","   *Rows (cursor value)","   any type implementing Scanner (see Scanner docs)","","In the most simple case, if the type of the value from the source","column is an integer, bool or string type T and dest is of type *T,","Scan simply assigns the value through the pointer.","","Scan also converts between string and numeric types, as long as no","information would be lost. While Scan stringifies all numbers","scanned from numeric database columns into *string, scans into","numeric types are checked for overflow. For example, a float64 with","value 300 or a string with value \"300\" can scan into a uint16, but","not into a uint8, though float64(255) or \"255\" can scan into a","uint8. One exception is that scans of some float64 numbers to","strings may lose information when stringifying. In general, scan","floating point columns into *float64.","","If a dest argument has type *[]byte, Scan saves in that argument a","copy of the corresponding data. The copy is owned by the caller and","can be modified and held indefinitely. The copy can be avoided by","using an argument of type *RawBytes instead; see the documentation","for RawBytes for restrictions on its use.","","If an argument has type *interface{}, Scan copies the value","provided by the underlying driver without conversion. When scanning","from a source value of type []byte to *interface{}, a copy of the","slice is made and the caller owns the result.","","Source values of type time.Time may be scanned into values of type","*time.Time, *interface{}, *string, or *[]byte. When converting to","the latter two, time.RFC3339Nano is used.","","Source values of type bool may be scanned into types *bool,","*interface{}, *string, *[]byte, or *RawBytes.","","For scanning into *bool, the source may be true, false, 1, 0, or","string inputs parseable by strconv.ParseBool.","","Scan can also convert a cursor returned from a query, such as","\"select cursor(select * from my_table) from dual\", into a","*Rows value that can itself be scanned from. The parent","select query will close any cursor *Rows if the parent *Rows is closed."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Rows","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Rows","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Rows-Scan","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Scan","Signature":"func (*Rows).Scan(dest ...interface{}) error","ID":"FunctionScan","Docs":["Scan copies the columns in the current row into the values pointed","at by dest. The number of values in dest must be the same as the","number of columns in Rows.","","Scan converts columns read from the database into the following","common Go types and special types provided by the sql package:","","   *string","   *[]byte","   *int, *int8, *int16, *int32, *int64","   *uint, *uint8, *uint16, *uint32, *uint64","   *bool","   *float32, *float64","   *interface{}","   *RawBytes","   *Rows (cursor value)","   any type implementing Scanner (see Scanner docs)","","In the most simple case, if the type of the value from the source","column is an integer, bool or string type T and dest is of type *T,","Scan simply assigns the value through the pointer.","","Scan also converts between string and numeric types, as long as no","information would be lost. While Scan stringifies all numbers","scanned from numeric database columns into *string, scans into","numeric types are checked for overflow. For example, a float64 with","value 300 or a string with value \"300\" can scan into a uint16, but","not into a uint8, though float64(255) or \"255\" can scan into a","uint8. One exception is that scans of some float64 numbers to","strings may lose information when stringifying. In general, scan","floating point columns into *float64.","","If a dest argument has type *[]byte, Scan saves in that argument a","copy of the corresponding data. The copy is owned by the caller and","can be modified and held indefinitely. The copy can be avoided by","using an argument of type *RawBytes instead; see the documentation","for RawBytes for restrictions on its use.","","If an argument has type *interface{}, Scan copies the value","provided by the underlying driver without conversion. When scanning","from a source value of type []byte to *interface{}, a copy of the","slice is made and the caller owns the result.","","Source values of type time.Time may be scanned into values of type","*time.Time, *interface{}, *string, or *[]byte. When converting to","the latter two, time.RFC3339Nano is used.","","Source values of type bool may be scanned into types *bool,","*interface{}, *string, *[]byte, or *RawBytes.","","For scanning into *bool, the source may be true, false, 1, 0, or","string inputs parseable by strconv.ParseBool.","","Scan can also convert a cursor returned from a query, such as","\"select cursor(select * from my_table) from dual\", into a","*Rows value that can itself be scanned from. The parent","select query will close any cursor *Rows if the parent *Rows is closed."],"Name":"Scan","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(_)","Element":"parameter","Index":0},"VarName":"dest","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"StmtClose","Docs":["Close closes the statement."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Stmt","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Stmt","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Stmt-Close","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Close","Signature":"func (*Stmt).Close() error","ID":"FunctionClose","Docs":["Close closes the statement."],"Name":"Close","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"StmtExec","Docs":["Exec executes a prepared statement with the given arguments and","returns a Result summarizing the effect of the statement."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Stmt","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Stmt","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Stmt-Exec","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Exec","Signature":"func (*Stmt).Exec(args ...interface{}) (Result, error)","ID":"FunctionExec","Docs":["Exec executes a prepared statement with the given arguments and","returns a Result summarizing the effect of the statement."],"Name":"Exec","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(_)","Element":"parameter","Index":0},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Result","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Result","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"StmtExecContext","Docs":["ExecContext executes a prepared statement with the given arguments and","returns a Result summarizing the effect of the statement."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Stmt","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Stmt","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Stmt-ExecContext","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ExecContext","Signature":"func (*Stmt).ExecContext(ctx context.Context, args ...interface{}) (Result, error)","ID":"FunctionExecContext","Docs":["ExecContext executes a prepared statement with the given arguments and","returns a Result summarizing the effect of the statement."],"Name":"ExecContext","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 1))","Element":"parameter","Index":1},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Result","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Result","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"StmtQuery","Docs":["Query executes a prepared query statement with the given arguments","and returns the query results as a *Rows."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Stmt","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Stmt","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Stmt-Query","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Query","Signature":"func (*Stmt).Query(args ...interface{}) (*Rows, error)","ID":"FunctionQuery","Docs":["Query executes a prepared query statement with the given arguments","and returns the query results as a *Rows."],"Name":"Query","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(_)","Element":"parameter","Index":0},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Rows","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Rows","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"StmtQueryContext","Docs":["QueryContext executes a prepared query statement with the given arguments","and returns the query results as a *Rows."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Stmt","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Stmt","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Stmt-QueryContext","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"QueryContext","Signature":"func (*Stmt).QueryContext(ctx context.Context, args ...interface{}) (*Rows, error)","ID":"FunctionQueryContext","Docs":["QueryContext executes a prepared query statement with the given arguments","and returns the query results as a *Rows."],"Name":"QueryContext","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 1))","Element":"parameter","Index":1},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Rows","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Rows","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"StmtQueryRow","Docs":["QueryRow executes a prepared query statement with the given arguments.","If an error occurs during the execution of the statement, that error will","be returned by a call to Scan on the returned *Row, which is always non-nil.","If the query selects no rows, the *Row's Scan will return ErrNoRows.","Otherwise, the *Row's Scan scans the first selected row and discards","the rest.","","Example usage:",""," var name string"," err := nameByUseridStmt.QueryRow(id).Scan(\u0026name)"],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Stmt","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Stmt","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Stmt-QueryRow","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"QueryRow","Signature":"func (*Stmt).QueryRow(args ...interface{}) *Row","ID":"FunctionQueryRow","Docs":["QueryRow executes a prepared query statement with the given arguments.","If an error occurs during the execution of the statement, that error will","be returned by a call to Scan on the returned *Row, which is always non-nil.","If the query selects no rows, the *Row's Scan will return ErrNoRows.","Otherwise, the *Row's Scan scans the first selected row and discards","the rest.","","Example usage:",""," var name string"," err := nameByUseridStmt.QueryRow(id).Scan(\u0026name)"],"Name":"QueryRow","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(_)","Element":"parameter","Index":0},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Row","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Row","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"StmtQueryRowContext","Docs":["QueryRowContext executes a prepared query statement with the given arguments.","If an error occurs during the execution of the statement, that error will","be returned by a call to Scan on the returned *Row, which is always non-nil.","If the query selects no rows, the *Row's Scan will return ErrNoRows.","Otherwise, the *Row's Scan scans the first selected row and discards","the rest."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Stmt","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Stmt","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Stmt-QueryRowContext","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"QueryRowContext","Signature":"func (*Stmt).QueryRowContext(ctx context.Context, args ...interface{}) *Row","ID":"FunctionQueryRowContext","Docs":["QueryRowContext executes a prepared query statement with the given arguments.","If an error occurs during the execution of the statement, that error will","be returned by a call to Scan on the returned *Row, which is always non-nil.","If the query selects no rows, the *Row's Scan will return ErrNoRows.","Otherwise, the *Row's Scan scans the first selected row and discards","the rest."],"Name":"QueryRowContext","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 1))","Element":"parameter","Index":1},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Row","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Row","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TxCommit","Docs":["Commit commits the transaction."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Tx","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Tx","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Tx-Commit","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Commit","Signature":"func (*Tx).Commit() error","ID":"FunctionCommit","Docs":["Commit commits the transaction."],"Name":"Commit","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TxExec","Docs":["Exec executes a query that doesn't return rows.","For example: an INSERT and UPDATE."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Tx","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Tx","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Tx-Exec","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Exec","Signature":"func (*Tx).Exec(query string, args ...interface{}) (Result, error)","ID":"FunctionExec","Docs":["Exec executes a query that doesn't return rows.","For example: an INSERT and UPDATE."],"Name":"Exec","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 1))","Element":"parameter","Index":1},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Result","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Result","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TxExecContext","Docs":["ExecContext executes a query that doesn't return rows.","For example: an INSERT and UPDATE."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Tx","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Tx","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Tx-ExecContext","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ExecContext","Signature":"func (*Tx).ExecContext(ctx context.Context, query string, args ...interface{}) (Result, error)","ID":"FunctionExecContext","Docs":["ExecContext executes a query that doesn't return rows.","For example: an INSERT and UPDATE."],"Name":"ExecContext","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 2))","Element":"parameter","Index":2},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Result","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Result","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"TxPrepare","Docs":["Prepare creates a prepared statement for use within a transaction.","","The returned statement operates within the transaction and can no longer","be used once the transaction has been committed or rolled back.","","To use an existing prepared statement on this transaction, see Tx.Stmt."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Tx","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Tx","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Tx-Prepare","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Prepare","Signature":"func (*Tx).Prepare(query string) (*Stmt, error)","ID":"FunctionPrepare","Docs":["Prepare creates a prepared statement for use within a transaction.","","The returned statement operates within the transaction and can no longer","be used once the transaction has been committed or rolled back.","","To use an existing prepared statement on this transaction, see Tx.Stmt."],"Name":"Prepare","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Stmt","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Stmt","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"TxPrepareContext","Docs":["PrepareContext creates a prepared statement for use within a transaction.","","The returned statement operates within the transaction and will be closed","when the transaction has been committed or rolled back.","","To use an existing prepared statement on this transaction, see Tx.Stmt.","","The provided context will be used for the preparation of the context, not","for the execution of the returned statement. The returned statement","will run in the transaction context."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Tx","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Tx","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Tx-PrepareContext","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"PrepareContext","Signature":"func (*Tx).PrepareContext(ctx context.Context, query string) (*Stmt, error)","ID":"FunctionPrepareContext","Docs":["PrepareContext creates a prepared statement for use within a transaction.","","The returned statement operates within the transaction and will be closed","when the transaction has been committed or rolled back.","","To use an existing prepared statement on this transaction, see Tx.Stmt.","","The provided context will be used for the preparation of the context, not","for the execution of the returned statement. The returned statement","will run in the transaction context."],"Name":"PrepareContext","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Stmt","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Stmt","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TxQuery","Docs":["Query executes a query that returns rows, typically a SELECT."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Tx","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Tx","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Tx-Query","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Query","Signature":"func (*Tx).Query(query string, args ...interface{}) (*Rows, error)","ID":"FunctionQuery","Docs":["Query executes a query that returns rows, typically a SELECT."],"Name":"Query","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 1))","Element":"parameter","Index":1},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Rows","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Rows","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TxQueryContext","Docs":["QueryContext executes a query that returns rows, typically a SELECT."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Tx","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Tx","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Tx-QueryContext","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"QueryContext","Signature":"func (*Tx).QueryContext(ctx context.Context, query string, args ...interface{}) (*Rows, error)","ID":"FunctionQueryContext","Docs":["QueryContext executes a query that returns rows, typically a SELECT."],"Name":"QueryContext","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 2))","Element":"parameter","Index":2},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Rows","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Rows","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TxQueryRow","Docs":["QueryRow executes a query that is expected to return at most one row.","QueryRow always returns a non-nil value. Errors are deferred until","Row's Scan method is called.","If the query selects no rows, the *Row's Scan will return ErrNoRows.","Otherwise, the *Row's Scan scans the first selected row and discards","the rest."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Tx","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Tx","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Tx-QueryRow","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"QueryRow","Signature":"func (*Tx).QueryRow(query string, args ...interface{}) *Row","ID":"FunctionQueryRow","Docs":["QueryRow executes a query that is expected to return at most one row.","QueryRow always returns a non-nil value. Errors are deferred until","Row's Scan method is called.","If the query selects no rows, the *Row's Scan will return ErrNoRows.","Otherwise, the *Row's Scan scans the first selected row and discards","the rest."],"Name":"QueryRow","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 1))","Element":"parameter","Index":1},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Row","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Row","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TxQueryRowContext","Docs":["QueryRowContext executes a query that is expected to return at most one row.","QueryRowContext always returns a non-nil value. Errors are deferred until","Row's Scan method is called.","If the query selects no rows, the *Row's Scan will return ErrNoRows.","Otherwise, the *Row's Scan scans the first selected row and discards","the rest."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Tx","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Tx","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Tx-QueryRowContext","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"QueryRowContext","Signature":"func (*Tx).QueryRowContext(ctx context.Context, query string, args ...interface{}) *Row","ID":"FunctionQueryRowContext","Docs":["QueryRowContext executes a query that is expected to return at most one row.","QueryRowContext always returns a non-nil value. Errors are deferred until","Row's Scan method is called.","If the query selects no rows, the *Row's Scan will return ErrNoRows.","Otherwise, the *Row's Scan scans the first selected row and discards","the rest."],"Name":"QueryRowContext","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 2))","Element":"parameter","Index":2},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Row","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Row","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TxRollback","Docs":["Rollback aborts the transaction."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Tx","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Tx","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Tx-Rollback","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Rollback","Signature":"func (*Tx).Rollback() error","ID":"FunctionRollback","Docs":["Rollback aborts the transaction."],"Name":"Rollback","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"TxStmt","Docs":["Stmt returns a transaction-specific prepared statement from","an existing statement.","","Example:"," updateMoney, err := db.Prepare(\"UPDATE balance SET money=money+? WHERE id=?\")"," ..."," tx, err := db.Begin()"," ..."," res, err := tx.Stmt(updateMoney).Exec(123.45, 98293203)","","The returned statement operates within the transaction and will be closed","when the transaction has been committed or rolled back."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Tx","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Tx","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Tx-Stmt","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Stmt","Signature":"func (*Tx).Stmt(stmt *Stmt) *Stmt","ID":"FunctionStmt","Docs":["Stmt returns a transaction-specific prepared statement from","an existing statement.","","Example:"," updateMoney, err := db.Prepare(\"UPDATE balance SET money=money+? WHERE id=?\")"," ..."," tx, err := db.Begin()"," ..."," res, err := tx.Stmt(updateMoney).Exec(123.45, 98293203)","","The returned statement operates within the transaction and will be closed","when the transaction has been committed or rolled back."],"Name":"Stmt","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"stmt","TypeName":"Stmt","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Stmt","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Stmt","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Stmt","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"TxStmtContext","Docs":["StmtContext returns a transaction-specific prepared statement from","an existing statement.","","Example:"," updateMoney, err := db.Prepare(\"UPDATE balance SET money=money+? WHERE id=?\")"," ..."," tx, err := db.Begin()"," ..."," res, err := tx.StmtContext(ctx, updateMoney).Exec(123.45, 98293203)","","The provided context is used for the preparation of the statement, not for the","execution of the statement.","","The returned statement operates within the transaction and will be closed","when the transaction has been committed or rolled back."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Tx","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Tx","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Tx-StmtContext","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"StmtContext","Signature":"func (*Tx).StmtContext(ctx context.Context, stmt *Stmt) *Stmt","ID":"FunctionStmtContext","Docs":["StmtContext returns a transaction-specific prepared statement from","an existing statement.","","Example:"," updateMoney, err := db.Prepare(\"UPDATE balance SET money=money+? WHERE id=?\")"," ..."," tx, err := db.Begin()"," ..."," res, err := tx.StmtContext(ctx, updateMoney).Exec(123.45, 98293203)","","The provided context is used for the preparation of the statement, not for the","execution of the statement.","","The returned statement operates within the transaction and will be closed","when the transaction has been committed or rolled back."],"Name":"StmtContext","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ctx","TypeName":"Context","PkgName":"context","PkgPath":"context","QualifiedName":"context.Context","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"stmt","TypeName":"Stmt","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Stmt","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Stmt","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Stmt","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}}],"InterfaceMethods":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ResultLastInsertId","Docs":["LastInsertId returns the integer generated by the database","in response to a command. Typically this will be from an","\"auto increment\" column when inserting a new row. Not all","databases support this feature, and the syntax of such","statements varies."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Result","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.LastInsertId","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Result-LastInsertId","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"LastInsertId","Signature":"func (Result).LastInsertId() (int64, error)","ID":"FunctionLastInsertId","Docs":["LastInsertId returns the integer generated by the database","in response to a command. Typically this will be from an","\"auto increment\" column when inserting a new row. Not all","databases support this feature, and the syntax of such","statements varies."],"Name":"LastInsertId","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ResultRowsAffected","Docs":["RowsAffected returns the number of rows affected by an","update, insert, or delete. Not every database or database","driver may support this."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Result","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.RowsAffected","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Result-RowsAffected","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RowsAffected","Signature":"func (Result).RowsAffected() (int64, error)","ID":"FunctionRowsAffected","Docs":["RowsAffected returns the number of rows affected by an","update, insert, or delete. Not every database or database","driver may support this."],"Name":"RowsAffected","PkgPath":"database/sql","PkgName":"sql","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ScannerScan","Docs":["Scan assigns a value from a database driver.","","The src value will be of one of the following types:","","   int64","   float64","   bool","   []byte","   string","   time.Time","   nil - for NULL values","","An error should be returned if the value cannot be stored","without loss of information.","","Reference types such as []byte are only valid until the next call to Scan","and should not be retained. Their underlying memory is owned by the driver.","If retention is necessary, copy their values before the next call to Scan."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Scanner","PkgName":"sql","PkgPath":"database/sql","QualifiedName":"database/sql.Scan","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Scanner-Scan","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Scan","Signature":"func (Scanner).Scan(src interface{}) error","ID":"FunctionScan","Docs":["Scan assigns a value from a database driver.","","The src value will be of one of the following types:","","   int64","   float64","   bool","   []byte","   string","   time.Time","   nil - for NULL values","","An error should be returned if the value cannot be stored","without loss of information.","","Reference types such as []byte are only valid until the next call to Scan","and should not be retained. Their underlying memory is owned by the driver.","If retention is necessary, copy their values before the next call to Scan."],"Name":"Scan","PkgPath":"database/sql","PkgName":"sql","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"src","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}}]}