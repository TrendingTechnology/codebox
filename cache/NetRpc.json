{"Name":"rpc","PkgPath":"net/rpc","PkgName":"rpc","ID":"net/rpc","Funcs":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Accept","Signature":"func Accept(lis net.Listener)","ID":"FunctionAccept","Docs":["Accept accepts connections on the listener and serves requests","to DefaultServer for each incoming connection.","Accept blocks; the caller typically invokes it in a go statement."],"Name":"Accept","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"lis","TypeName":"Listener","PkgName":"net","PkgPath":"net","QualifiedName":"net.Listener","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":null},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Dial","Signature":"func Dial(network string, address string) (*Client, error)","ID":"FunctionDial","Docs":["Dial connects to an RPC server at the specified network address."],"Name":"Dial","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"network","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"address","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Client","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Client","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DialHTTP","Signature":"func DialHTTP(network string, address string) (*Client, error)","ID":"FunctionDialHTTP","Docs":["DialHTTP connects to an HTTP RPC server at the specified network address","listening on the default HTTP RPC path."],"Name":"DialHTTP","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"network","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"address","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Client","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Client","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DialHTTPPath","Signature":"func DialHTTPPath(network string, address string, path string) (*Client, error)","ID":"FunctionDialHTTPPath","Docs":["DialHTTPPath connects to an HTTP RPC server","at the specified network address and path."],"Name":"DialHTTPPath","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"network","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"address","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"path","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Client","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Client","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"HandleHTTP","Signature":"func HandleHTTP()","ID":"FunctionHandleHTTP","Docs":["HandleHTTP registers an HTTP handler for RPC messages to DefaultServer","on DefaultRPCPath and a debugging handler on DefaultDebugPath.","It is still necessary to invoke http.Serve(), typically in a go statement."],"Name":"HandleHTTP","PkgPath":"net/rpc","PkgName":"rpc","Parameters":null,"Results":null},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewClient","Signature":"func NewClient(conn io.ReadWriteCloser) *Client","ID":"FunctionNewClient","Docs":["NewClient returns a new Client to handle requests to the","set of services at the other end of the connection.","It adds a buffer to the write side of the connection so","the header and payload are sent as a unit.","","The read and write halves of the connection are serialized independently,","so no interlocking is required. However each half may be accessed","concurrently so the implementation of conn should protect against","concurrent reads or concurrent writes."],"Name":"NewClient","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"conn","TypeName":"ReadWriteCloser","PkgName":"io","PkgPath":"io","QualifiedName":"io.ReadWriteCloser","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Client","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Client","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewClientWithCodec","Signature":"func NewClientWithCodec(codec ClientCodec) *Client","ID":"FunctionNewClientWithCodec","Docs":["NewClientWithCodec is like NewClient but uses the specified","codec to encode requests and decode responses."],"Name":"NewClientWithCodec","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"codec","TypeName":"ClientCodec","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.ClientCodec","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Client","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Client","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewServer","Signature":"func NewServer() *Server","ID":"FunctionNewServer","Docs":["NewServer returns a new Server."],"Name":"NewServer","PkgPath":"net/rpc","PkgName":"rpc","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Server","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Server","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Register","Signature":"func Register(rcvr interface{}) error","ID":"FunctionRegister","Docs":["Register publishes the receiver's methods in the DefaultServer."],"Name":"Register","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"rcvr","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RegisterName","Signature":"func RegisterName(name string, rcvr interface{}) error","ID":"FunctionRegisterName","Docs":["RegisterName is like Register but uses the provided name for the type","instead of the receiver's concrete type."],"Name":"RegisterName","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"name","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"rcvr","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServeCodec","Signature":"func ServeCodec(codec ServerCodec)","ID":"FunctionServeCodec","Docs":["ServeCodec is like ServeConn but uses the specified codec to","decode requests and encode responses."],"Name":"ServeCodec","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"codec","TypeName":"ServerCodec","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.ServerCodec","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":null},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServeConn","Signature":"func ServeConn(conn io.ReadWriteCloser)","ID":"FunctionServeConn","Docs":["ServeConn runs the DefaultServer on a single connection.","ServeConn blocks, serving the connection until the client hangs up.","The caller typically invokes ServeConn in a go statement.","ServeConn uses the gob wire format (see package gob) on the","connection. To use an alternate codec, use ServeCodec.","See NewClient's comment for information about concurrent access."],"Name":"ServeConn","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"conn","TypeName":"ReadWriteCloser","PkgName":"io","PkgPath":"io","QualifiedName":"io.ReadWriteCloser","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":null},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServeRequest","Signature":"func ServeRequest(codec ServerCodec) error","ID":"FunctionServeRequest","Docs":["ServeRequest is like ServeCodec but synchronously serves a single request.","It does not close the codec upon completion."],"Name":"ServeRequest","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"codec","TypeName":"ServerCodec","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.ServerCodec","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}],"TypeMethods":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ClientCall","Docs":["Call invokes the named function, waits for it to complete, and returns its error status."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Client","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Client","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Client-Call","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Call","Signature":"func (*Client).Call(serviceMethod string, args interface{}, reply interface{}) error","ID":"FunctionCall","Docs":["Call invokes the named function, waits for it to complete, and returns its error status."],"Name":"Call","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"serviceMethod","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"reply","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ClientClose","Docs":["Close calls the underlying codec's Close method. If the connection is already","shutting down, ErrShutdown is returned."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Client","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Client","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Client-Close","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Close","Signature":"func (*Client).Close() error","ID":"FunctionClose","Docs":["Close calls the underlying codec's Close method. If the connection is already","shutting down, ErrShutdown is returned."],"Name":"Close","PkgPath":"net/rpc","PkgName":"rpc","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ClientGo","Docs":["Go invokes the function asynchronously. It returns the Call structure representing","the invocation. The done channel will signal when the call is complete by returning","the same Call object. If done is nil, Go will allocate a new channel.","If non-nil, done must be buffered or Go will deliberately crash."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Client","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Client","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Client-Go","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Go","Signature":"func (*Client).Go(serviceMethod string, args interface{}, reply interface{}, done chan *Call) *Call","ID":"FunctionGo","Docs":["Go invokes the function asynchronously. It returns the Call structure representing","the invocation. The done channel will signal when the call is complete by returning","the same Call object. If done is nil, Go will allocate a new channel.","If non-nil, done must be buffered or Go will deliberately crash."],"Name":"Go","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"serviceMethod","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"reply","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(3)","Element":"parameter","Index":3},"VarName":"done","TypeName":"chan *net/rpc.Call","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Call","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Call","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerAccept","Docs":["Accept accepts connections on the listener and serves requests","for each incoming connection. Accept blocks until the listener","returns a non-nil error. The caller typically invokes Accept in a","go statement."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Server","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Server","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Server-Accept","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Accept","Signature":"func (*Server).Accept(lis net.Listener)","ID":"FunctionAccept","Docs":["Accept accepts connections on the listener and serves requests","for each incoming connection. Accept blocks until the listener","returns a non-nil error. The caller typically invokes Accept in a","go statement."],"Name":"Accept","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"lis","TypeName":"Listener","PkgName":"net","PkgPath":"net","QualifiedName":"net.Listener","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerHandleHTTP","Docs":["HandleHTTP registers an HTTP handler for RPC messages on rpcPath,","and a debugging handler on debugPath.","It is still necessary to invoke http.Serve(), typically in a go statement."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Server","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Server","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Server-HandleHTTP","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"HandleHTTP","Signature":"func (*Server).HandleHTTP(rpcPath string, debugPath string)","ID":"FunctionHandleHTTP","Docs":["HandleHTTP registers an HTTP handler for RPC messages on rpcPath,","and a debugging handler on debugPath.","It is still necessary to invoke http.Serve(), typically in a go statement."],"Name":"HandleHTTP","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"rpcPath","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"debugPath","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerRegister","Docs":["Register publishes in the server the set of methods of the","receiver value that satisfy the following conditions:","\t- exported method of exported type","\t- two arguments, both of exported type","\t- the second argument is a pointer","\t- one return value, of type error","It returns an error if the receiver is not an exported type or has","no suitable methods. It also logs the error using package log.","The client accesses each method using a string of the form \"Type.Method\",","where Type is the receiver's concrete type."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Server","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Server","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Server-Register","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Register","Signature":"func (*Server).Register(rcvr interface{}) error","ID":"FunctionRegister","Docs":["Register publishes in the server the set of methods of the","receiver value that satisfy the following conditions:","\t- exported method of exported type","\t- two arguments, both of exported type","\t- the second argument is a pointer","\t- one return value, of type error","It returns an error if the receiver is not an exported type or has","no suitable methods. It also logs the error using package log.","The client accesses each method using a string of the form \"Type.Method\",","where Type is the receiver's concrete type."],"Name":"Register","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"rcvr","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerRegisterName","Docs":["RegisterName is like Register but uses the provided name for the type","instead of the receiver's concrete type."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Server","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Server","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Server-RegisterName","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RegisterName","Signature":"func (*Server).RegisterName(name string, rcvr interface{}) error","ID":"FunctionRegisterName","Docs":["RegisterName is like Register but uses the provided name for the type","instead of the receiver's concrete type."],"Name":"RegisterName","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"name","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"rcvr","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerServeCodec","Docs":["ServeCodec is like ServeConn but uses the specified codec to","decode requests and encode responses."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Server","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Server","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Server-ServeCodec","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServeCodec","Signature":"func (*Server).ServeCodec(codec ServerCodec)","ID":"FunctionServeCodec","Docs":["ServeCodec is like ServeConn but uses the specified codec to","decode requests and encode responses."],"Name":"ServeCodec","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"codec","TypeName":"ServerCodec","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.ServerCodec","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerServeConn","Docs":["ServeConn runs the server on a single connection.","ServeConn blocks, serving the connection until the client hangs up.","The caller typically invokes ServeConn in a go statement.","ServeConn uses the gob wire format (see package gob) on the","connection. To use an alternate codec, use ServeCodec.","See NewClient's comment for information about concurrent access."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Server","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Server","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Server-ServeConn","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServeConn","Signature":"func (*Server).ServeConn(conn io.ReadWriteCloser)","ID":"FunctionServeConn","Docs":["ServeConn runs the server on a single connection.","ServeConn blocks, serving the connection until the client hangs up.","The caller typically invokes ServeConn in a go statement.","ServeConn uses the gob wire format (see package gob) on the","connection. To use an alternate codec, use ServeCodec.","See NewClient's comment for information about concurrent access."],"Name":"ServeConn","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"conn","TypeName":"ReadWriteCloser","PkgName":"io","PkgPath":"io","QualifiedName":"io.ReadWriteCloser","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerServeHTTP","Docs":["ServeHTTP implements an http.Handler that answers RPC requests."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Server","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Server","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Server-ServeHTTP","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServeHTTP","Signature":"func (*Server).ServeHTTP(w net/http.ResponseWriter, req *net/http.Request)","ID":"FunctionServeHTTP","Docs":["ServeHTTP implements an http.Handler that answers RPC requests."],"Name":"ServeHTTP","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"w","TypeName":"ResponseWriter","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.ResponseWriter","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"req","TypeName":"Request","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Request","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerServeRequest","Docs":["ServeRequest is like ServeCodec but synchronously serves a single request.","It does not close the codec upon completion."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Server","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Server","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Server-ServeRequest","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServeRequest","Signature":"func (*Server).ServeRequest(codec ServerCodec) error","ID":"FunctionServeRequest","Docs":["ServeRequest is like ServeCodec but synchronously serves a single request.","It does not close the codec upon completion."],"Name":"ServeRequest","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"codec","TypeName":"ServerCodec","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.ServerCodec","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerErrorError","Docs":[],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ServerError","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.ServerError","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ServerError-Error","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Error","Signature":"func (ServerError).Error() string","ID":"FunctionError","Docs":[],"Name":"Error","PkgPath":"net/rpc","PkgName":"rpc","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}}],"InterfaceMethods":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ClientCodecClose","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ClientCodec","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Close","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-ClientCodec-Close","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Close","Signature":"func (ClientCodec).Close() error","ID":"FunctionClose","Docs":[],"Name":"Close","PkgPath":"net/rpc","PkgName":"rpc","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ClientCodecReadResponseBody","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ClientCodec","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.ReadResponseBody","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-ClientCodec-ReadResponseBody","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ReadResponseBody","Signature":"func (ClientCodec).ReadResponseBody(interface{}) error","ID":"FunctionReadResponseBody","Docs":[],"Name":"ReadResponseBody","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ClientCodecReadResponseHeader","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ClientCodec","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.ReadResponseHeader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-ClientCodec-ReadResponseHeader","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ReadResponseHeader","Signature":"func (ClientCodec).ReadResponseHeader(*Response) error","ID":"FunctionReadResponseHeader","Docs":[],"Name":"ReadResponseHeader","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"","TypeName":"Response","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Response","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ClientCodecWriteRequest","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ClientCodec","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.WriteRequest","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-ClientCodec-WriteRequest","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"WriteRequest","Signature":"func (ClientCodec).WriteRequest(*Request, interface{}) error","ID":"FunctionWriteRequest","Docs":[],"Name":"WriteRequest","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"","TypeName":"Request","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Request","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerCodecClose","Docs":["Close can be called multiple times and must be idempotent."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ServerCodec","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Close","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-ServerCodec-Close","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Close","Signature":"func (ServerCodec).Close() error","ID":"FunctionClose","Docs":["Close can be called multiple times and must be idempotent."],"Name":"Close","PkgPath":"net/rpc","PkgName":"rpc","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerCodecReadRequestBody","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ServerCodec","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.ReadRequestBody","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-ServerCodec-ReadRequestBody","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ReadRequestBody","Signature":"func (ServerCodec).ReadRequestBody(interface{}) error","ID":"FunctionReadRequestBody","Docs":[],"Name":"ReadRequestBody","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerCodecReadRequestHeader","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ServerCodec","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.ReadRequestHeader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-ServerCodec-ReadRequestHeader","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ReadRequestHeader","Signature":"func (ServerCodec).ReadRequestHeader(*Request) error","ID":"FunctionReadRequestHeader","Docs":[],"Name":"ReadRequestHeader","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"","TypeName":"Request","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Request","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerCodecWriteResponse","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ServerCodec","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.WriteResponse","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-ServerCodec-WriteResponse","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"WriteResponse","Signature":"func (ServerCodec).WriteResponse(*Response, interface{}) error","ID":"FunctionWriteResponse","Docs":[],"Name":"WriteResponse","PkgPath":"net/rpc","PkgName":"rpc","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"","TypeName":"Response","PkgName":"rpc","PkgPath":"net/rpc","QualifiedName":"net/rpc.Response","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}}]}