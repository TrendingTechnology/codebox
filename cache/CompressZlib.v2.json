{
   "func (*Writer).Close() error": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Writer).Flush() error": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Writer).Reset(w io.Writer)": {
      "GeneratedClass": "\n    private class WriterReset extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Writer).Reset(w io.Writer)\n      WriterReset() { this.(Method).hasQualifiedName(\"compress/zlib\", \"Writer\", \"Reset\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isParameter(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isParameter(0)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Writer).Write(p []byte) (n int, err error)": {
      "GeneratedClass": "\n    private class WriterWrite extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Writer).Write(p []byte) (n int, err error)\n      WriterWrite() { this.(Method).hasQualifiedName(\"compress/zlib\", \"Writer\", \"Write\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true,
               false,
               false
            ],
            "Outp": [
               true,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (Resetter).Reset(r io.Reader, dict []byte) error": {
      "GeneratedClass": "\n    private class ResetterReset extends TaintTracking::FunctionModel, Method {\n      // signature: func (Resetter).Reset(r io.Reader, dict []byte) error\n      ResetterReset() {\n        this.implements(\"compress/zlib\", \"Resetter\", \"Reset\")\n      }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true,
               false,
               false
            ],
            "Outp": [
               true,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func NewReader(r io.Reader) (io.ReadCloser, error)": {
      "GeneratedClass": "\n    private class NewReader extends TaintTracking::FunctionModel {\n      // signature: func NewReader(r io.Reader) (io.ReadCloser, error)\n      NewReader() { hasQualifiedName(\"compress/zlib\", \"NewReader\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult(0)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false
            ],
            "Outp": [
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func NewReaderDict(r io.Reader, dict []byte) (io.ReadCloser, error)": {
      "GeneratedClass": "\n    private class NewReaderDict extends TaintTracking::FunctionModel {\n      // signature: func NewReaderDict(r io.Reader, dict []byte) (io.ReadCloser, error)\n      NewReaderDict() { hasQualifiedName(\"compress/zlib\", \"NewReaderDict\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult(0)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func NewWriter(w io.Writer) *Writer": {
      "GeneratedClass": "\n    private class NewWriter extends TaintTracking::FunctionModel {\n      // signature: func NewWriter(w io.Writer) *Writer\n      NewWriter() { hasQualifiedName(\"compress/zlib\", \"NewWriter\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isResult()) and (outp.isParameter(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isResult()) and (outp.isParameter(0)))",
      "Blocks": [
         {
            "Inp": [
               false,
               true
            ],
            "Outp": [
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func NewWriterLevel(w io.Writer, level int) (*Writer, error)": {
      "GeneratedClass": "\n    private class NewWriterLevel extends TaintTracking::FunctionModel {\n      // signature: func NewWriterLevel(w io.Writer, level int) (*Writer, error)\n      NewWriterLevel() { hasQualifiedName(\"compress/zlib\", \"NewWriterLevel\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isResult(0)) and (outp.isParameter(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isResult(0)) and (outp.isParameter(0)))",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               true,
               false
            ],
            "Outp": [
               true,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func NewWriterLevelDict(w io.Writer, level int, dict []byte) (*Writer, error)": {
      "GeneratedClass": "\n    private class NewWriterLevelDict extends TaintTracking::FunctionModel {\n      // signature: func NewWriterLevelDict(w io.Writer, level int, dict []byte) (*Writer, error)\n      NewWriterLevelDict() { hasQualifiedName(\"compress/zlib\", \"NewWriterLevelDict\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isResult(0)) and (outp.isParameter(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isResult(0)) and (outp.isParameter(0)))",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false,
               true,
               false
            ],
            "Outp": [
               true,
               false,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": true
   }
}
