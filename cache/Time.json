{"Name":"time","PkgPath":"time","PkgName":"time","ID":"time","Funcs":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"After","Signature":"func After(d Duration) \u003c-chan Time","ID":"FunctionAfter","Docs":["After waits for the duration to elapse and then sends the current time","on the returned channel.","It is equivalent to NewTimer(d).C.","The underlying Timer is not recovered by the garbage collector","until the timer fires. If efficiency is a concern, use NewTimer","instead and call Timer.Stop if the timer is no longer needed."],"Name":"After","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"d","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"\u003c-chan time.Time","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"AfterFunc","Signature":"func AfterFunc(d Duration, f func()) *Timer","ID":"FunctionAfterFunc","Docs":["AfterFunc waits for the duration to elapse and then calls f","in its own goroutine. It returns a Timer that can","be used to cancel the call using its Stop method."],"Name":"AfterFunc","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"d","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"f","TypeName":"func()","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Timer","PkgName":"time","PkgPath":"time","QualifiedName":"time.Timer","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Date","Signature":"func Date(year int, month Month, day int, hour int, min int, sec int, nsec int, loc *Location) Time","ID":"FunctionDate","Docs":["Date returns the Time corresponding to","\tyyyy-mm-dd hh:mm:ss + nsec nanoseconds","in the appropriate zone for that time in the given location.","","The month, day, hour, min, sec, and nsec values may be outside","their usual ranges and will be normalized during the conversion.","For example, October 32 converts to November 1.","","A daylight savings time transition skips or repeats times.","For example, in the United States, March 13, 2011 2:15am never occurred,","while November 6, 2011 1:15am occurred twice. In such cases, the","choice of time zone, and therefore the time, is not well-defined.","Date returns a time that is correct in one of the two zones involved","in the transition, but it does not guarantee which.","","Date panics if loc is nil."],"Name":"Date","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"year","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"month","TypeName":"Month","PkgName":"time","PkgPath":"time","QualifiedName":"time.Month","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"day","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(3)","Element":"parameter","Index":3},"VarName":"hour","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(4)","Element":"parameter","Index":4},"VarName":"min","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(5)","Element":"parameter","Index":5},"VarName":"sec","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(6)","Element":"parameter","Index":6},"VarName":"nsec","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(7)","Element":"parameter","Index":7},"VarName":"loc","TypeName":"Location","PkgName":"time","PkgPath":"time","QualifiedName":"time.Location","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"FixedZone","Signature":"func FixedZone(name string, offset int) *Location","ID":"FunctionFixedZone","Docs":["FixedZone returns a Location that always uses","the given zone name and offset (seconds east of UTC)."],"Name":"FixedZone","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"name","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"offset","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Location","PkgName":"time","PkgPath":"time","QualifiedName":"time.Location","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"LoadLocation","Signature":"func LoadLocation(name string) (*Location, error)","ID":"FunctionLoadLocation","Docs":["LoadLocation returns the Location with the given name.","","If the name is \"\" or \"UTC\", LoadLocation returns UTC.","If the name is \"Local\", LoadLocation returns Local.","","Otherwise, the name is taken to be a location name corresponding to a file","in the IANA Time Zone database, such as \"America/New_York\".","","The time zone database needed by LoadLocation may not be","present on all systems, especially non-Unix systems.","LoadLocation looks in the directory or uncompressed zip file","named by the ZONEINFO environment variable, if any, then looks in","known installation locations on Unix systems,","and finally looks in $GOROOT/lib/time/zoneinfo.zip."],"Name":"LoadLocation","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"name","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Location","PkgName":"time","PkgPath":"time","QualifiedName":"time.Location","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"LoadLocationFromTZData","Signature":"func LoadLocationFromTZData(name string, data []byte) (*Location, error)","ID":"FunctionLoadLocationFromTZData","Docs":["LoadLocationFromTZData returns a Location with the given name","initialized from the IANA Time Zone database-formatted data.","The data should be in the format of a standard IANA time zone file","(for example, the content of /etc/localtime on Unix systems)."],"Name":"LoadLocationFromTZData","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"name","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"data","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Location","PkgName":"time","PkgPath":"time","QualifiedName":"time.Location","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewTicker","Signature":"func NewTicker(d Duration) *Ticker","ID":"FunctionNewTicker","Docs":["NewTicker returns a new Ticker containing a channel that will send the","time with a period specified by the duration argument.","It adjusts the intervals or drops ticks to make up for slow receivers.","The duration d must be greater than zero; if not, NewTicker will panic.","Stop the ticker to release associated resources."],"Name":"NewTicker","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"d","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Ticker","PkgName":"time","PkgPath":"time","QualifiedName":"time.Ticker","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewTimer","Signature":"func NewTimer(d Duration) *Timer","ID":"FunctionNewTimer","Docs":["NewTimer creates a new Timer that will send","the current time on its channel after at least duration d."],"Name":"NewTimer","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"d","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Timer","PkgName":"time","PkgPath":"time","QualifiedName":"time.Timer","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Now","Signature":"func Now() Time","ID":"FunctionNow","Docs":["Now returns the current local time."],"Name":"Now","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Parse","Signature":"func Parse(layout string, value string) (Time, error)","ID":"FunctionParse","Docs":["Parse parses a formatted string and returns the time value it represents.","The layout defines the format by showing how the reference time,","defined to be","\tMon Jan 2 15:04:05 -0700 MST 2006","would be interpreted if it were the value; it serves as an example of","the input format. The same interpretation will then be made to the","input string.","","Predefined layouts ANSIC, UnixDate, RFC3339 and others describe standard","and convenient representations of the reference time. For more information","about the formats and the definition of the reference time, see the","documentation for ANSIC and the other constants defined by this package.","Also, the executable example for Time.Format demonstrates the working","of the layout string in detail and is a good reference.","","Elements omitted from the value are assumed to be zero or, when","zero is impossible, one, so parsing \"3:04pm\" returns the time","corresponding to Jan 1, year 0, 15:04:00 UTC (note that because the year is","0, this time is before the zero Time).","Years must be in the range 0000..9999. The day of the week is checked","for syntax but it is otherwise ignored.","","For layouts specifying the two-digit year 06, a value NN \u003e= 69 will be treated","as 19NN and a value NN \u003c 69 will be treated as 20NN.","","In the absence of a time zone indicator, Parse returns a time in UTC.","","When parsing a time with a zone offset like -0700, if the offset corresponds","to a time zone used by the current location (Local), then Parse uses that","location and zone in the returned time. Otherwise it records the time as","being in a fabricated location with time fixed at the given zone offset.","","When parsing a time with a zone abbreviation like MST, if the zone abbreviation","has a defined offset in the current location, then that offset is used.","The zone abbreviation \"UTC\" is recognized as UTC regardless of location.","If the zone abbreviation is unknown, Parse records the time as being","in a fabricated location with the given zone abbreviation and a zero offset.","This choice means that such a time can be parsed and reformatted with the","same layout losslessly, but the exact instant used in the representation will","differ by the actual zone offset. To avoid such problems, prefer time layouts","that use a numeric zone offset, or use ParseInLocation."],"Name":"Parse","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"layout","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"value","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ParseDuration","Signature":"func ParseDuration(s string) (Duration, error)","ID":"FunctionParseDuration","Docs":["ParseDuration parses a duration string.","A duration string is a possibly signed sequence of","decimal numbers, each with optional fraction and a unit suffix,","such as \"300ms\", \"-1.5h\" or \"2h45m\".","Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\"."],"Name":"ParseDuration","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"s","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ParseInLocation","Signature":"func ParseInLocation(layout string, value string, loc *Location) (Time, error)","ID":"FunctionParseInLocation","Docs":["ParseInLocation is like Parse but differs in two important ways.","First, in the absence of time zone information, Parse interprets a time as UTC;","ParseInLocation interprets the time as in the given location.","Second, when given a zone offset or abbreviation, Parse tries to match it","against the Local location; ParseInLocation uses the given location."],"Name":"ParseInLocation","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"layout","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"value","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"loc","TypeName":"Location","PkgName":"time","PkgPath":"time","QualifiedName":"time.Location","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Since","Signature":"func Since(t Time) Duration","ID":"FunctionSince","Docs":["Since returns the time elapsed since t.","It is shorthand for time.Now().Sub(t)."],"Name":"Since","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"t","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Sleep","Signature":"func Sleep(d Duration)","ID":"FunctionSleep","Docs":["Sleep pauses the current goroutine for at least the duration d.","A negative or zero duration causes Sleep to return immediately."],"Name":"Sleep","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"d","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Tick","Signature":"func Tick(d Duration) \u003c-chan Time","ID":"FunctionTick","Docs":["Tick is a convenience wrapper for NewTicker providing access to the ticking","channel only. While Tick is useful for clients that have no need to shut down","the Ticker, be aware that without a way to shut it down the underlying","Ticker cannot be recovered by the garbage collector; it \"leaks\".","Unlike NewTicker, Tick will return nil if d \u003c= 0."],"Name":"Tick","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"d","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"\u003c-chan time.Time","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Unix","Signature":"func Unix(sec int64, nsec int64) Time","ID":"FunctionUnix","Docs":["Unix returns the local Time corresponding to the given Unix time,","sec seconds and nsec nanoseconds since January 1, 1970 UTC.","It is valid to pass nsec outside the range [0, 999999999].","Not all sec values have a corresponding time value. One such","value is 1\u003c\u003c63-1 (the largest int64 value)."],"Name":"Unix","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"sec","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"nsec","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Until","Signature":"func Until(t Time) Duration","ID":"FunctionUntil","Docs":["Until returns the duration until t.","It is shorthand for t.Sub(time.Now())."],"Name":"Until","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"t","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}],"TypeMethods":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DurationHours","Docs":["Hours returns the duration as a floating point number of hours."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Duration-Hours","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Hours","Signature":"func (Duration).Hours() float64","ID":"FunctionHours","Docs":["Hours returns the duration as a floating point number of hours."],"Name":"Hours","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DurationMicroseconds","Docs":["Microseconds returns the duration as an integer microsecond count."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Duration-Microseconds","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Microseconds","Signature":"func (Duration).Microseconds() int64","ID":"FunctionMicroseconds","Docs":["Microseconds returns the duration as an integer microsecond count."],"Name":"Microseconds","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DurationMilliseconds","Docs":["Milliseconds returns the duration as an integer millisecond count."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Duration-Milliseconds","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Milliseconds","Signature":"func (Duration).Milliseconds() int64","ID":"FunctionMilliseconds","Docs":["Milliseconds returns the duration as an integer millisecond count."],"Name":"Milliseconds","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DurationMinutes","Docs":["Minutes returns the duration as a floating point number of minutes."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Duration-Minutes","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Minutes","Signature":"func (Duration).Minutes() float64","ID":"FunctionMinutes","Docs":["Minutes returns the duration as a floating point number of minutes."],"Name":"Minutes","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DurationNanoseconds","Docs":["Nanoseconds returns the duration as an integer nanosecond count."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Duration-Nanoseconds","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Nanoseconds","Signature":"func (Duration).Nanoseconds() int64","ID":"FunctionNanoseconds","Docs":["Nanoseconds returns the duration as an integer nanosecond count."],"Name":"Nanoseconds","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DurationRound","Docs":["Round returns the result of rounding d to the nearest multiple of m.","The rounding behavior for halfway values is to round away from zero.","If the result exceeds the maximum (or minimum)","value that can be stored in a Duration,","Round returns the maximum (or minimum) duration.","If m \u003c= 0, Round returns d unchanged."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Duration-Round","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Round","Signature":"func (Duration).Round(m Duration) Duration","ID":"FunctionRound","Docs":["Round returns the result of rounding d to the nearest multiple of m.","The rounding behavior for halfway values is to round away from zero.","If the result exceeds the maximum (or minimum)","value that can be stored in a Duration,","Round returns the maximum (or minimum) duration.","If m \u003c= 0, Round returns d unchanged."],"Name":"Round","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"m","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DurationSeconds","Docs":["Seconds returns the duration as a floating point number of seconds."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Duration-Seconds","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Seconds","Signature":"func (Duration).Seconds() float64","ID":"FunctionSeconds","Docs":["Seconds returns the duration as a floating point number of seconds."],"Name":"Seconds","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DurationString","Docs":["String returns a string representing the duration in the form \"72h3m0.5s\".","Leading zero units are omitted. As a special case, durations less than one","second format use a smaller unit (milli-, micro-, or nanoseconds) to ensure","that the leading digit is non-zero. The zero duration formats as 0s."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Duration-String","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"String","Signature":"func (Duration).String() string","ID":"FunctionString","Docs":["String returns a string representing the duration in the form \"72h3m0.5s\".","Leading zero units are omitted. As a special case, durations less than one","second format use a smaller unit (milli-, micro-, or nanoseconds) to ensure","that the leading digit is non-zero. The zero duration formats as 0s."],"Name":"String","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DurationTruncate","Docs":["Truncate returns the result of rounding d toward zero to a multiple of m.","If m \u003c= 0, Truncate returns d unchanged."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Duration-Truncate","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Truncate","Signature":"func (Duration).Truncate(m Duration) Duration","ID":"FunctionTruncate","Docs":["Truncate returns the result of rounding d toward zero to a multiple of m.","If m \u003c= 0, Truncate returns d unchanged."],"Name":"Truncate","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"m","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"LocationString","Docs":["String returns a descriptive name for the time zone information,","corresponding to the name argument to LoadLocation or FixedZone."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Location","PkgName":"time","PkgPath":"time","QualifiedName":"time.Location","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Location-String","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"String","Signature":"func (*Location).String() string","ID":"FunctionString","Docs":["String returns a descriptive name for the time zone information,","corresponding to the name argument to LoadLocation or FixedZone."],"Name":"String","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MonthString","Docs":["String returns the English name of the month (\"January\", \"February\", ...)."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Month","PkgName":"time","PkgPath":"time","QualifiedName":"time.Month","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Month-String","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"String","Signature":"func (Month).String() string","ID":"FunctionString","Docs":["String returns the English name of the month (\"January\", \"February\", ...)."],"Name":"String","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ParseErrorError","Docs":["Error returns the string representation of a ParseError."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ParseError","PkgName":"time","PkgPath":"time","QualifiedName":"time.ParseError","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ParseError-Error","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Error","Signature":"func (*ParseError).Error() string","ID":"FunctionError","Docs":["Error returns the string representation of a ParseError."],"Name":"Error","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TickerStop","Docs":["Stop turns off a ticker. After Stop, no more ticks will be sent.","Stop does not close the channel, to prevent a concurrent goroutine","reading from the channel from seeing an erroneous \"tick\"."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Ticker","PkgName":"time","PkgPath":"time","QualifiedName":"time.Ticker","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Ticker-Stop","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Stop","Signature":"func (*Ticker).Stop()","ID":"FunctionStop","Docs":["Stop turns off a ticker. After Stop, no more ticks will be sent.","Stop does not close the channel, to prevent a concurrent goroutine","reading from the channel from seeing an erroneous \"tick\"."],"Name":"Stop","PkgPath":"time","PkgName":"time","Parameters":null,"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeAdd","Docs":["Add returns the time t+d."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Add","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Add","Signature":"func (Time).Add(d Duration) Time","ID":"FunctionAdd","Docs":["Add returns the time t+d."],"Name":"Add","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"d","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeAddDate","Docs":["AddDate returns the time corresponding to adding the","given number of years, months, and days to t.","For example, AddDate(-1, 2, 3) applied to January 1, 2011","returns March 4, 2010.","","AddDate normalizes its result in the same way that Date does,","so, for example, adding one month to October 31 yields","December 1, the normalized form for November 31."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-AddDate","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"AddDate","Signature":"func (Time).AddDate(years int, months int, days int) Time","ID":"FunctionAddDate","Docs":["AddDate returns the time corresponding to adding the","given number of years, months, and days to t.","For example, AddDate(-1, 2, 3) applied to January 1, 2011","returns March 4, 2010.","","AddDate normalizes its result in the same way that Date does,","so, for example, adding one month to October 31 yields","December 1, the normalized form for November 31."],"Name":"AddDate","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"years","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"months","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"days","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeAfter","Docs":["After reports whether the time instant t is after u."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-After","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"After","Signature":"func (Time).After(u Time) bool","ID":"FunctionAfter","Docs":["After reports whether the time instant t is after u."],"Name":"After","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"u","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeAppendFormat","Docs":["AppendFormat is like Format but appends the textual","representation to b and returns the extended buffer."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-AppendFormat","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"AppendFormat","Signature":"func (Time).AppendFormat(b []byte, layout string) []byte","ID":"FunctionAppendFormat","Docs":["AppendFormat is like Format but appends the textual","representation to b and returns the extended buffer."],"Name":"AppendFormat","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"b","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"layout","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeBefore","Docs":["Before reports whether the time instant t is before u."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Before","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Before","Signature":"func (Time).Before(u Time) bool","ID":"FunctionBefore","Docs":["Before reports whether the time instant t is before u."],"Name":"Before","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"u","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeClock","Docs":["Clock returns the hour, minute, and second within the day specified by t."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Clock","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Clock","Signature":"func (Time).Clock() (hour int, min int, sec int)","ID":"FunctionClock","Docs":["Clock returns the hour, minute, and second within the day specified by t."],"Name":"Clock","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"hour","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"min","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(2)","Element":"result","Index":2},"VarName":"sec","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeDate","Docs":["Date returns the year, month, and day in which t occurs."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Date","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Date","Signature":"func (Time).Date() (year int, month Month, day int)","ID":"FunctionDate","Docs":["Date returns the year, month, and day in which t occurs."],"Name":"Date","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"year","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"month","TypeName":"Month","PkgName":"time","PkgPath":"time","QualifiedName":"time.Month","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(2)","Element":"result","Index":2},"VarName":"day","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeDay","Docs":["Day returns the day of the month specified by t."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Day","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Day","Signature":"func (Time).Day() int","ID":"FunctionDay","Docs":["Day returns the day of the month specified by t."],"Name":"Day","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeEqual","Docs":["Equal reports whether t and u represent the same time instant.","Two times can be equal even if they are in different locations.","For example, 6:00 +0200 and 4:00 UTC are Equal.","See the documentation on the Time type for the pitfalls of using == with","Time values; most code should use Equal instead."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Equal","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Equal","Signature":"func (Time).Equal(u Time) bool","ID":"FunctionEqual","Docs":["Equal reports whether t and u represent the same time instant.","Two times can be equal even if they are in different locations.","For example, 6:00 +0200 and 4:00 UTC are Equal.","See the documentation on the Time type for the pitfalls of using == with","Time values; most code should use Equal instead."],"Name":"Equal","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"u","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeFormat","Docs":["Format returns a textual representation of the time value formatted","according to layout, which defines the format by showing how the reference","time, defined to be","\tMon Jan 2 15:04:05 -0700 MST 2006","would be displayed if it were the value; it serves as an example of the","desired output. The same display rules will then be applied to the time","value.","","A fractional second is represented by adding a period and zeros","to the end of the seconds section of layout string, as in \"15:04:05.000\"","to format a time stamp with millisecond precision.","","Predefined layouts ANSIC, UnixDate, RFC3339 and others describe standard","and convenient representations of the reference time. For more information","about the formats and the definition of the reference time, see the","documentation for ANSIC and the other constants defined by this package."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Format","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Format","Signature":"func (Time).Format(layout string) string","ID":"FunctionFormat","Docs":["Format returns a textual representation of the time value formatted","according to layout, which defines the format by showing how the reference","time, defined to be","\tMon Jan 2 15:04:05 -0700 MST 2006","would be displayed if it were the value; it serves as an example of the","desired output. The same display rules will then be applied to the time","value.","","A fractional second is represented by adding a period and zeros","to the end of the seconds section of layout string, as in \"15:04:05.000\"","to format a time stamp with millisecond precision.","","Predefined layouts ANSIC, UnixDate, RFC3339 and others describe standard","and convenient representations of the reference time. For more information","about the formats and the definition of the reference time, see the","documentation for ANSIC and the other constants defined by this package."],"Name":"Format","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"layout","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeGobDecode","Docs":["GobDecode implements the gob.GobDecoder interface."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-GobDecode","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"GobDecode","Signature":"func (*Time).GobDecode(data []byte) error","ID":"FunctionGobDecode","Docs":["GobDecode implements the gob.GobDecoder interface."],"Name":"GobDecode","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"data","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeGobEncode","Docs":["GobEncode implements the gob.GobEncoder interface."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-GobEncode","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"GobEncode","Signature":"func (Time).GobEncode() ([]byte, error)","ID":"FunctionGobEncode","Docs":["GobEncode implements the gob.GobEncoder interface."],"Name":"GobEncode","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeHour","Docs":["Hour returns the hour within the day specified by t, in the range [0, 23]."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Hour","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Hour","Signature":"func (Time).Hour() int","ID":"FunctionHour","Docs":["Hour returns the hour within the day specified by t, in the range [0, 23]."],"Name":"Hour","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeISOWeek","Docs":["ISOWeek returns the ISO 8601 year and week number in which t occurs.","Week ranges from 1 to 53. Jan 01 to Jan 03 of year n might belong to","week 52 or 53 of year n-1, and Dec 29 to Dec 31 might belong to week 1","of year n+1."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-ISOWeek","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ISOWeek","Signature":"func (Time).ISOWeek() (year int, week int)","ID":"FunctionISOWeek","Docs":["ISOWeek returns the ISO 8601 year and week number in which t occurs.","Week ranges from 1 to 53. Jan 01 to Jan 03 of year n might belong to","week 52 or 53 of year n-1, and Dec 29 to Dec 31 might belong to week 1","of year n+1."],"Name":"ISOWeek","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"year","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"week","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeIn","Docs":["In returns a copy of t representing the same time instant, but","with the copy's location information set to loc for display","purposes.","","In panics if loc is nil."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-In","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"In","Signature":"func (Time).In(loc *Location) Time","ID":"FunctionIn","Docs":["In returns a copy of t representing the same time instant, but","with the copy's location information set to loc for display","purposes.","","In panics if loc is nil."],"Name":"In","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"loc","TypeName":"Location","PkgName":"time","PkgPath":"time","QualifiedName":"time.Location","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeIsZero","Docs":["IsZero reports whether t represents the zero time instant,","January 1, year 1, 00:00:00 UTC."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-IsZero","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"IsZero","Signature":"func (Time).IsZero() bool","ID":"FunctionIsZero","Docs":["IsZero reports whether t represents the zero time instant,","January 1, year 1, 00:00:00 UTC."],"Name":"IsZero","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeLocal","Docs":["Local returns t with the location set to local time."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Local","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Local","Signature":"func (Time).Local() Time","ID":"FunctionLocal","Docs":["Local returns t with the location set to local time."],"Name":"Local","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeLocation","Docs":["Location returns the time zone information associated with t."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Location","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Location","Signature":"func (Time).Location() *Location","ID":"FunctionLocation","Docs":["Location returns the time zone information associated with t."],"Name":"Location","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Location","PkgName":"time","PkgPath":"time","QualifiedName":"time.Location","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeMarshalBinary","Docs":["MarshalBinary implements the encoding.BinaryMarshaler interface."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-MarshalBinary","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MarshalBinary","Signature":"func (Time).MarshalBinary() ([]byte, error)","ID":"FunctionMarshalBinary","Docs":["MarshalBinary implements the encoding.BinaryMarshaler interface."],"Name":"MarshalBinary","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeMarshalJSON","Docs":["MarshalJSON implements the json.Marshaler interface.","The time is a quoted string in RFC 3339 format, with sub-second precision added if present."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-MarshalJSON","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MarshalJSON","Signature":"func (Time).MarshalJSON() ([]byte, error)","ID":"FunctionMarshalJSON","Docs":["MarshalJSON implements the json.Marshaler interface.","The time is a quoted string in RFC 3339 format, with sub-second precision added if present."],"Name":"MarshalJSON","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeMarshalText","Docs":["MarshalText implements the encoding.TextMarshaler interface.","The time is formatted in RFC 3339 format, with sub-second precision added if present."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-MarshalText","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MarshalText","Signature":"func (Time).MarshalText() ([]byte, error)","ID":"FunctionMarshalText","Docs":["MarshalText implements the encoding.TextMarshaler interface.","The time is formatted in RFC 3339 format, with sub-second precision added if present."],"Name":"MarshalText","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeMinute","Docs":["Minute returns the minute offset within the hour specified by t, in the range [0, 59]."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Minute","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Minute","Signature":"func (Time).Minute() int","ID":"FunctionMinute","Docs":["Minute returns the minute offset within the hour specified by t, in the range [0, 59]."],"Name":"Minute","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeMonth","Docs":["Month returns the month of the year specified by t."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Month","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Month","Signature":"func (Time).Month() Month","ID":"FunctionMonth","Docs":["Month returns the month of the year specified by t."],"Name":"Month","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Month","PkgName":"time","PkgPath":"time","QualifiedName":"time.Month","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeNanosecond","Docs":["Nanosecond returns the nanosecond offset within the second specified by t,","in the range [0, 999999999]."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Nanosecond","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Nanosecond","Signature":"func (Time).Nanosecond() int","ID":"FunctionNanosecond","Docs":["Nanosecond returns the nanosecond offset within the second specified by t,","in the range [0, 999999999]."],"Name":"Nanosecond","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeRound","Docs":["Round returns the result of rounding t to the nearest multiple of d (since the zero time).","The rounding behavior for halfway values is to round up.","If d \u003c= 0, Round returns t stripped of any monotonic clock reading but otherwise unchanged.","","Round operates on the time as an absolute duration since the","zero time; it does not operate on the presentation form of the","time. Thus, Round(Hour) may return a time with a non-zero","minute, depending on the time's Location."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Round","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Round","Signature":"func (Time).Round(d Duration) Time","ID":"FunctionRound","Docs":["Round returns the result of rounding t to the nearest multiple of d (since the zero time).","The rounding behavior for halfway values is to round up.","If d \u003c= 0, Round returns t stripped of any monotonic clock reading but otherwise unchanged.","","Round operates on the time as an absolute duration since the","zero time; it does not operate on the presentation form of the","time. Thus, Round(Hour) may return a time with a non-zero","minute, depending on the time's Location."],"Name":"Round","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"d","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeSecond","Docs":["Second returns the second offset within the minute specified by t, in the range [0, 59]."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Second","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Second","Signature":"func (Time).Second() int","ID":"FunctionSecond","Docs":["Second returns the second offset within the minute specified by t, in the range [0, 59]."],"Name":"Second","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeString","Docs":["String returns the time formatted using the format string","\t\"2006-01-02 15:04:05.999999999 -0700 MST\"","","If the time has a monotonic clock reading, the returned string","includes a final field \"m=±\u003cvalue\u003e\", where value is the monotonic","clock reading formatted as a decimal number of seconds.","","The returned string is meant for debugging; for a stable serialized","representation, use t.MarshalText, t.MarshalBinary, or t.Format","with an explicit format string."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-String","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"String","Signature":"func (Time).String() string","ID":"FunctionString","Docs":["String returns the time formatted using the format string","\t\"2006-01-02 15:04:05.999999999 -0700 MST\"","","If the time has a monotonic clock reading, the returned string","includes a final field \"m=±\u003cvalue\u003e\", where value is the monotonic","clock reading formatted as a decimal number of seconds.","","The returned string is meant for debugging; for a stable serialized","representation, use t.MarshalText, t.MarshalBinary, or t.Format","with an explicit format string."],"Name":"String","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeSub","Docs":["Sub returns the duration t-u. If the result exceeds the maximum (or minimum)","value that can be stored in a Duration, the maximum (or minimum) duration","will be returned.","To compute t-d for a duration d, use t.Add(-d)."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Sub","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Sub","Signature":"func (Time).Sub(u Time) Duration","ID":"FunctionSub","Docs":["Sub returns the duration t-u. If the result exceeds the maximum (or minimum)","value that can be stored in a Duration, the maximum (or minimum) duration","will be returned.","To compute t-d for a duration d, use t.Add(-d)."],"Name":"Sub","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"u","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeTruncate","Docs":["Truncate returns the result of rounding t down to a multiple of d (since the zero time).","If d \u003c= 0, Truncate returns t stripped of any monotonic clock reading but otherwise unchanged.","","Truncate operates on the time as an absolute duration since the","zero time; it does not operate on the presentation form of the","time. Thus, Truncate(Hour) may return a time with a non-zero","minute, depending on the time's Location."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Truncate","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Truncate","Signature":"func (Time).Truncate(d Duration) Time","ID":"FunctionTruncate","Docs":["Truncate returns the result of rounding t down to a multiple of d (since the zero time).","If d \u003c= 0, Truncate returns t stripped of any monotonic clock reading but otherwise unchanged.","","Truncate operates on the time as an absolute duration since the","zero time; it does not operate on the presentation form of the","time. Thus, Truncate(Hour) may return a time with a non-zero","minute, depending on the time's Location."],"Name":"Truncate","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"d","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeUTC","Docs":["UTC returns t with the location set to UTC."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-UTC","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"UTC","Signature":"func (Time).UTC() Time","ID":"FunctionUTC","Docs":["UTC returns t with the location set to UTC."],"Name":"UTC","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeUnix","Docs":["Unix returns t as a Unix time, the number of seconds elapsed","since January 1, 1970 UTC. The result does not depend on the","location associated with t.","Unix-like operating systems often record time as a 32-bit","count of seconds, but since the method here returns a 64-bit","value it is valid for billions of years into the past or future."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Unix","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Unix","Signature":"func (Time).Unix() int64","ID":"FunctionUnix","Docs":["Unix returns t as a Unix time, the number of seconds elapsed","since January 1, 1970 UTC. The result does not depend on the","location associated with t.","Unix-like operating systems often record time as a 32-bit","count of seconds, but since the method here returns a 64-bit","value it is valid for billions of years into the past or future."],"Name":"Unix","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeUnixNano","Docs":["UnixNano returns t as a Unix time, the number of nanoseconds elapsed","since January 1, 1970 UTC. The result is undefined if the Unix time","in nanoseconds cannot be represented by an int64 (a date before the year","1678 or after 2262). Note that this means the result of calling UnixNano","on the zero Time is undefined. The result does not depend on the","location associated with t."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-UnixNano","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"UnixNano","Signature":"func (Time).UnixNano() int64","ID":"FunctionUnixNano","Docs":["UnixNano returns t as a Unix time, the number of nanoseconds elapsed","since January 1, 1970 UTC. The result is undefined if the Unix time","in nanoseconds cannot be represented by an int64 (a date before the year","1678 or after 2262). Note that this means the result of calling UnixNano","on the zero Time is undefined. The result does not depend on the","location associated with t."],"Name":"UnixNano","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeUnmarshalBinary","Docs":["UnmarshalBinary implements the encoding.BinaryUnmarshaler interface."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-UnmarshalBinary","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"UnmarshalBinary","Signature":"func (*Time).UnmarshalBinary(data []byte) error","ID":"FunctionUnmarshalBinary","Docs":["UnmarshalBinary implements the encoding.BinaryUnmarshaler interface."],"Name":"UnmarshalBinary","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"data","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeUnmarshalJSON","Docs":["UnmarshalJSON implements the json.Unmarshaler interface.","The time is expected to be a quoted string in RFC 3339 format."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-UnmarshalJSON","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"UnmarshalJSON","Signature":"func (*Time).UnmarshalJSON(data []byte) error","ID":"FunctionUnmarshalJSON","Docs":["UnmarshalJSON implements the json.Unmarshaler interface.","The time is expected to be a quoted string in RFC 3339 format."],"Name":"UnmarshalJSON","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"data","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeUnmarshalText","Docs":["UnmarshalText implements the encoding.TextUnmarshaler interface.","The time is expected to be in RFC 3339 format."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-UnmarshalText","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"UnmarshalText","Signature":"func (*Time).UnmarshalText(data []byte) error","ID":"FunctionUnmarshalText","Docs":["UnmarshalText implements the encoding.TextUnmarshaler interface.","The time is expected to be in RFC 3339 format."],"Name":"UnmarshalText","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"data","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeWeekday","Docs":["Weekday returns the day of the week specified by t."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Weekday","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Weekday","Signature":"func (Time).Weekday() Weekday","ID":"FunctionWeekday","Docs":["Weekday returns the day of the week specified by t."],"Name":"Weekday","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Weekday","PkgName":"time","PkgPath":"time","QualifiedName":"time.Weekday","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeYear","Docs":["Year returns the year in which t occurs."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Year","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Year","Signature":"func (Time).Year() int","ID":"FunctionYear","Docs":["Year returns the year in which t occurs."],"Name":"Year","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeYearDay","Docs":["YearDay returns the day of the year specified by t, in the range [1,365] for non-leap years,","and [1,366] in leap years."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-YearDay","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"YearDay","Signature":"func (Time).YearDay() int","ID":"FunctionYearDay","Docs":["YearDay returns the day of the year specified by t, in the range [1,365] for non-leap years,","and [1,366] in leap years."],"Name":"YearDay","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimeZone","Docs":["Zone computes the time zone in effect at time t, returning the abbreviated","name of the zone (such as \"CET\") and its offset in seconds east of UTC."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Time-Zone","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Zone","Signature":"func (Time).Zone() (name string, offset int)","ID":"FunctionZone","Docs":["Zone computes the time zone in effect at time t, returning the abbreviated","name of the zone (such as \"CET\") and its offset in seconds east of UTC."],"Name":"Zone","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"name","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"offset","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimerReset","Docs":["Reset changes the timer to expire after duration d.","It returns true if the timer had been active, false if the timer had","expired or been stopped.","","Reset should be invoked only on stopped or expired timers with drained channels.","If a program has already received a value from t.C, the timer is known","to have expired and the channel drained, so t.Reset can be used directly.","If a program has not yet received a value from t.C, however,","the timer must be stopped and—if Stop reports that the timer expired","before being stopped—the channel explicitly drained:","","\tif !t.Stop() {","\t\t\u003c-t.C","\t}","\tt.Reset(d)","","This should not be done concurrent to other receives from the Timer's","channel.","","Note that it is not possible to use Reset's return value correctly, as there","is a race condition between draining the channel and the new timer expiring.","Reset should always be invoked on stopped or expired channels, as described above.","The return value exists to preserve compatibility with existing programs."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Timer","PkgName":"time","PkgPath":"time","QualifiedName":"time.Timer","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Timer-Reset","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Reset","Signature":"func (*Timer).Reset(d Duration) bool","ID":"FunctionReset","Docs":["Reset changes the timer to expire after duration d.","It returns true if the timer had been active, false if the timer had","expired or been stopped.","","Reset should be invoked only on stopped or expired timers with drained channels.","If a program has already received a value from t.C, the timer is known","to have expired and the channel drained, so t.Reset can be used directly.","If a program has not yet received a value from t.C, however,","the timer must be stopped and—if Stop reports that the timer expired","before being stopped—the channel explicitly drained:","","\tif !t.Stop() {","\t\t\u003c-t.C","\t}","\tt.Reset(d)","","This should not be done concurrent to other receives from the Timer's","channel.","","Note that it is not possible to use Reset's return value correctly, as there","is a race condition between draining the channel and the new timer expiring.","Reset should always be invoked on stopped or expired channels, as described above.","The return value exists to preserve compatibility with existing programs."],"Name":"Reset","PkgPath":"time","PkgName":"time","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"d","TypeName":"Duration","PkgName":"time","PkgPath":"time","QualifiedName":"time.Duration","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TimerStop","Docs":["Stop prevents the Timer from firing.","It returns true if the call stops the timer, false if the timer has already","expired or been stopped.","Stop does not close the channel, to prevent a read from the channel succeeding","incorrectly.","","To ensure the channel is empty after a call to Stop, check the","return value and drain the channel.","For example, assuming the program has not received from t.C already:","","\tif !t.Stop() {","\t\t\u003c-t.C","\t}","","This cannot be done concurrent to other receives from the Timer's","channel or other calls to the Timer's Stop method.","","For a timer created with AfterFunc(d, f), if t.Stop returns false, then the timer","has already expired and the function f has been started in its own goroutine;","Stop does not wait for f to complete before returning.","If the caller needs to know whether f is completed, it must coordinate","with f explicitly."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Timer","PkgName":"time","PkgPath":"time","QualifiedName":"time.Timer","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Timer-Stop","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Stop","Signature":"func (*Timer).Stop() bool","ID":"FunctionStop","Docs":["Stop prevents the Timer from firing.","It returns true if the call stops the timer, false if the timer has already","expired or been stopped.","Stop does not close the channel, to prevent a read from the channel succeeding","incorrectly.","","To ensure the channel is empty after a call to Stop, check the","return value and drain the channel.","For example, assuming the program has not received from t.C already:","","\tif !t.Stop() {","\t\t\u003c-t.C","\t}","","This cannot be done concurrent to other receives from the Timer's","channel or other calls to the Timer's Stop method.","","For a timer created with AfterFunc(d, f), if t.Stop returns false, then the timer","has already expired and the function f has been started in its own goroutine;","Stop does not wait for f to complete before returning.","If the caller needs to know whether f is completed, it must coordinate","with f explicitly."],"Name":"Stop","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"WeekdayString","Docs":["String returns the English name of the day (\"Sunday\", \"Monday\", ...)."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Weekday","PkgName":"time","PkgPath":"time","QualifiedName":"time.Weekday","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Weekday-String","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"String","Signature":"func (Weekday).String() string","ID":"FunctionString","Docs":["String returns the English name of the day (\"Sunday\", \"Monday\", ...)."],"Name":"String","PkgPath":"time","PkgName":"time","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}}],"InterfaceMethods":[]}