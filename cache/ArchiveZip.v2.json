{
   "func (*File).DataOffset() (offset int64, err error)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*File).Open() (io.ReadCloser, error)": {
      "GeneratedClass": "\n    private class FileOpen extends TaintTracking::FunctionModel, Method {\n      // signature: func (*File).Open() (io.ReadCloser, error)\n      FileOpen() { this.(Method).hasQualifiedName(\"archive/zip\", \"File\", \"Open\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult(0)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false
            ],
            "Outp": [
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*FileHeader).FileInfo() os.FileInfo": {
      "GeneratedClass": "\n    private class FileHeaderFileInfo extends TaintTracking::FunctionModel, Method {\n      // signature: func (*FileHeader).FileInfo() os.FileInfo\n      FileHeaderFileInfo() { this.(Method).hasQualifiedName(\"archive/zip\", \"FileHeader\", \"FileInfo\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*FileHeader).ModTime() time.Time": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*FileHeader).Mode() (mode os.FileMode)": {
      "GeneratedClass": "\n    private class FileHeaderMode extends TaintTracking::FunctionModel, Method {\n      // signature: func (*FileHeader).Mode() (mode os.FileMode)\n      FileHeaderMode() { this.(Method).hasQualifiedName(\"archive/zip\", \"FileHeader\", \"Mode\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*FileHeader).SetModTime(t time.Time)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*FileHeader).SetMode(mode os.FileMode)": {
      "GeneratedClass": "\n    private class FileHeaderSetMode extends TaintTracking::FunctionModel, Method {\n      // signature: func (*FileHeader).SetMode(mode os.FileMode)\n      FileHeaderSetMode() { this.(Method).hasQualifiedName(\"archive/zip\", \"FileHeader\", \"SetMode\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true
            ],
            "Outp": [
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*ReadCloser).Close() error": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Reader).RegisterDecompressor(method uint16, dcomp Decompressor)": {
      "GeneratedClass": "\n    private class ReaderRegisterDecompressor extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Reader).RegisterDecompressor(method uint16, dcomp Decompressor)\n      ReaderRegisterDecompressor() { this.(Method).hasQualifiedName(\"archive/zip\", \"Reader\", \"RegisterDecompressor\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(1)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(1)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               true
            ],
            "Outp": [
               true,
               false,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Writer).Close() error": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Writer).Create(name string) (io.Writer, error)": {
      "GeneratedClass": "\n    private class WriterCreate extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Writer).Create(name string) (io.Writer, error)\n      WriterCreate() { this.(Method).hasQualifiedName(\"archive/zip\", \"Writer\", \"Create\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isResult(0)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isResult(0)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               true,
               false
            ],
            "Outp": [
               true,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Writer).CreateHeader(fh *FileHeader) (io.Writer, error)": {
      "GeneratedClass": "\n    private class WriterCreateHeader extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Writer).CreateHeader(fh *FileHeader) (io.Writer, error)\n      WriterCreateHeader() { this.(Method).hasQualifiedName(\"archive/zip\", \"Writer\", \"CreateHeader\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0) or inp.isResult(0)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0) or inp.isResult(0)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true,
               true,
               false
            ],
            "Outp": [
               true,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Writer).Flush() error": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Writer).RegisterCompressor(method uint16, comp Compressor)": {
      "GeneratedClass": "\n    private class WriterRegisterCompressor extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Writer).RegisterCompressor(method uint16, comp Compressor)\n      WriterRegisterCompressor() { this.(Method).hasQualifiedName(\"archive/zip\", \"Writer\", \"RegisterCompressor\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(1)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(1)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               true
            ],
            "Outp": [
               true,
               false,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Writer).SetComment(comment string) error": {
      "GeneratedClass": "\n    private class WriterSetComment extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Writer).SetComment(comment string) error\n      WriterSetComment() { this.(Method).hasQualifiedName(\"archive/zip\", \"Writer\", \"SetComment\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true,
               false
            ],
            "Outp": [
               true,
               false,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Writer).SetOffset(n int64)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func FileInfoHeader(fi os.FileInfo) (*FileHeader, error)": {
      "GeneratedClass": "\n    private class FileInfoHeader extends TaintTracking::FunctionModel {\n      // signature: func FileInfoHeader(fi os.FileInfo) (*FileHeader, error)\n      FileInfoHeader() { hasQualifiedName(\"archive/zip\", \"FileInfoHeader\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult(0)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false
            ],
            "Outp": [
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func NewReader(r io.ReaderAt, size int64) (*Reader, error)": {
      "GeneratedClass": "\n    private class NewReader extends TaintTracking::FunctionModel {\n      // signature: func NewReader(r io.ReaderAt, size int64) (*Reader, error)\n      NewReader() { hasQualifiedName(\"archive/zip\", \"NewReader\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult(0)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func NewWriter(w io.Writer) *Writer": {
      "GeneratedClass": "\n    private class NewWriter extends TaintTracking::FunctionModel {\n      // signature: func NewWriter(w io.Writer) *Writer\n      NewWriter() { hasQualifiedName(\"archive/zip\", \"NewWriter\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isResult()) and (outp.isParameter(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isResult()) and (outp.isParameter(0)))",
      "Blocks": [
         {
            "Inp": [
               false,
               true
            ],
            "Outp": [
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func OpenReader(name string) (*ReadCloser, error)": {
      "GeneratedClass": "\n    private class OpenReader extends TaintTracking::FunctionModel {\n      // signature: func OpenReader(name string) (*ReadCloser, error)\n      OpenReader() { hasQualifiedName(\"archive/zip\", \"OpenReader\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult(0)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false
            ],
            "Outp": [
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func RegisterCompressor(method uint16, comp Compressor)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func RegisterDecompressor(method uint16, dcomp Decompressor)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   }
}
