{
   "func (*Ring).Do(f func(interface{}))": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Ring).Len() int": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Ring).Link(s *Ring) *Ring": {
      "GeneratedClass": "\n    private class RingLink extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Ring).Link(s *Ring) *Ring\n      RingLink() { this.(Method).hasQualifiedName(\"container/ring\", \"Ring\", \"Link\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true,
               false
            ],
            "Outp": [
               false,
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Ring).Move(n int) *Ring": {
      "GeneratedClass": "\n    private class RingMove extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Ring).Move(n int) *Ring\n      RingMove() { this.(Method).hasQualifiedName(\"container/ring\", \"Ring\", \"Move\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Ring).Next() *Ring": {
      "GeneratedClass": "\n    private class RingNext extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Ring).Next() *Ring\n      RingNext() { this.(Method).hasQualifiedName(\"container/ring\", \"Ring\", \"Next\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Ring).Prev() *Ring": {
      "GeneratedClass": "\n    private class RingPrev extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Ring).Prev() *Ring\n      RingPrev() { this.(Method).hasQualifiedName(\"container/ring\", \"Ring\", \"Prev\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Ring).Unlink(n int) *Ring": {
      "GeneratedClass": "\n    private class RingUnlink extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Ring).Unlink(n int) *Ring\n      RingUnlink() { this.(Method).hasQualifiedName(\"container/ring\", \"Ring\", \"Unlink\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func New(n int) *Ring": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   }
}
