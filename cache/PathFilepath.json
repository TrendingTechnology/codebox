{"Name":"filepath","PkgPath":"path/filepath","PkgName":"filepath","ID":"path/filepath","Funcs":[{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"Abs","Signature":"func Abs(path string) (string, error)","ID":"FunctionAbs","Docs":["Abs returns an absolute representation of path.","If the path is not absolute it will be joined with the current","working directory to turn it into an absolute path. The absolute","path name for a given file is not guaranteed to be unique.","Abs calls Clean on the result."],"Name":"Abs","PkgPath":"path/filepath","PkgName":"filepath","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"path","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"into873","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"Base","Signature":"func Base(path string) string","ID":"FunctionBase","Docs":["Base returns the last element of path.","Trailing path separators are removed before extracting the last element.","If the path is empty, Base returns \".\".","If the path consists entirely of separators, Base returns a single separator."],"Name":"Base","PkgPath":"path/filepath","PkgName":"filepath","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"path","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into414","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"Clean","Signature":"func Clean(path string) string","ID":"FunctionClean","Docs":["Clean returns the shortest path name equivalent to path","by purely lexical processing. It applies the following rules","iteratively until no further processing can be done:","","\t1. Replace multiple Separator elements with a single one.","\t2. Eliminate each . path name element (the current directory).","\t3. Eliminate each inner .. path name element (the parent directory)","\t   along with the non-.. element that precedes it.","\t4. Eliminate .. elements that begin a rooted path:","\t   that is, replace \"/..\" by \"/\" at the beginning of a path,","\t   assuming Separator is '/'.","","The returned path ends in a slash only if it represents a root directory,","such as \"/\" on Unix or `C:\\` on Windows.","","Finally, any occurrences of slash are replaced by Separator.","","If the result of this process is an empty string, Clean","returns the string \".\".","","See also Rob Pike, ``Lexical File Names in Plan 9 or","Getting Dot-Dot Right,''","https://9p.io/sys/doc/lexnames.html"],"Name":"Clean","PkgPath":"path/filepath","PkgName":"filepath","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"path","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into762","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"Dir","Signature":"func Dir(path string) string","ID":"FunctionDir","Docs":["Dir returns all but the last element of path, typically the path's directory.","After dropping the final element, Dir calls Clean on the path and trailing","slashes are removed.","If the path is empty, Dir returns \".\".","If the path consists entirely of separators, Dir returns a single separator.","The returned path does not end in a separator unless it is the root directory."],"Name":"Dir","PkgPath":"path/filepath","PkgName":"filepath","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"path","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into742","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"EvalSymlinks","Signature":"func EvalSymlinks(path string) (string, error)","ID":"FunctionEvalSymlinks","Docs":["EvalSymlinks returns the path name after the evaluation of any symbolic","links.","If path is relative the result will be relative to the current directory,","unless one of the components is an absolute symbolic link.","EvalSymlinks calls Clean on the result."],"Name":"EvalSymlinks","PkgPath":"path/filepath","PkgName":"filepath","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"path","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"into816","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"Ext","Signature":"func Ext(path string) string","ID":"FunctionExt","Docs":["Ext returns the file name extension used by path.","The extension is the suffix beginning at the final dot","in the final element of path; it is empty if there is","no dot."],"Name":"Ext","PkgPath":"path/filepath","PkgName":"filepath","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"path","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into600","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"FromSlash","Signature":"func FromSlash(path string) string","ID":"FunctionFromSlash","Docs":["FromSlash returns the result of replacing each slash ('/') character","in path with a separator character. Multiple slashes are replaced","by multiple separators."],"Name":"FromSlash","PkgPath":"path/filepath","PkgName":"filepath","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"path","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into714","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Glob","Signature":"func Glob(pattern string) (matches []string, err error)","ID":"FunctionGlob","Docs":["Glob returns the names of all files matching pattern or nil","if there is no matching file. The syntax of patterns is the same","as in Match. The pattern may describe hierarchical names such as","/usr/*/bin/ed (assuming the Separator is '/').","","Glob ignores file system errors such as I/O errors reading directories.","The only possible returned error is ErrBadPattern, when pattern","is malformed."],"Name":"Glob","PkgPath":"path/filepath","PkgName":"filepath","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"pattern","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"matches","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"err","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"HasPrefix","Signature":"func HasPrefix(p string, prefix string) bool","ID":"FunctionHasPrefix","Docs":["HasPrefix exists for historical compatibility and should not be used.","","Deprecated: HasPrefix does not respect path boundaries and","does not ignore case when required."],"Name":"HasPrefix","PkgPath":"path/filepath","PkgName":"filepath","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"p","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"prefix","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"IsAbs","Signature":"func IsAbs(path string) bool","ID":"FunctionIsAbs","Docs":["IsAbs reports whether the path is absolute."],"Name":"IsAbs","PkgPath":"path/filepath","PkgName":"filepath","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"path","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(_)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"Join","Signature":"func Join(elem ...string) string","ID":"FunctionJoin","Docs":["Join joins any number of path elements into a single path,","separating them with an OS specific Separator. Empty elements","are ignored. The result is Cleaned. However, if the argument","list is empty or all its elements are empty, Join returns","an empty string.","On Windows, the result will only be a UNC path if the first","non-empty element is a UNC path."],"Name":"Join","PkgPath":"path/filepath","PkgName":"filepath","Parameters":[{"Identity":{"Placeholder":"isParameter(_)","Element":"parameter","Index":0},"VarName":"elem","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into772","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Match","Signature":"func Match(pattern string, name string) (matched bool, err error)","ID":"FunctionMatch","Docs":["Match reports whether name matches the shell file name pattern.","The pattern syntax is:","","\tpattern:","\t\t{ term }","\tterm:","\t\t'*'         matches any sequence of non-Separator characters","\t\t'?'         matches any single non-Separator character","\t\t'[' [ '^' ] { character-range } ']'","\t\t            character class (must be non-empty)","\t\tc           matches character c (c != '*', '?', '\\\\', '[')","\t\t'\\\\' c      matches character c","","\tcharacter-range:","\t\tc           matches character c (c != '\\\\', '-', ']')","\t\t'\\\\' c      matches character c","\t\tlo '-' hi   matches character c for lo \u003c= c \u003c= hi","","Match requires pattern to match all of name, not just a substring.","The only possible returned error is ErrBadPattern, when pattern","is malformed.","","On Windows, escaping is disabled. Instead, '\\\\' is treated as","path separator."],"Name":"Match","PkgPath":"path/filepath","PkgName":"filepath","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"pattern","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"name","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"matched","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"err","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"Rel","Signature":"func Rel(basepath string, targpath string) (string, error)","ID":"FunctionRel","Docs":["Rel returns a relative path that is lexically equivalent to targpath when","joined to basepath with an intervening separator. That is,","Join(basepath, Rel(basepath, targpath)) is equivalent to targpath itself.","On success, the returned path will always be relative to basepath,","even if basepath and targpath share no elements.","An error is returned if targpath can't be made relative to basepath or if","knowing the current working directory would be necessary to compute it.","Rel calls Clean on the result."],"Name":"Rel","PkgPath":"path/filepath","PkgName":"filepath","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"basepath","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"targpath","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"into189","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"Split","Signature":"func Split(path string) (dir string, file string)","ID":"FunctionSplit","Docs":["Split splits path immediately following the final Separator,","separating it into a directory and file name component.","If there is no Separator in path, Split returns an empty dir","and file set to path.","The returned values have the property that path = dir+file."],"Name":"Split","PkgPath":"path/filepath","PkgName":"filepath","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"path","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"dir","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"file","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"SplitList","Signature":"func SplitList(path string) []string","ID":"FunctionSplitList","Docs":["SplitList splits a list of paths joined by the OS-specific ListSeparator,","usually found in PATH or GOPATH environment variables.","Unlike strings.Split, SplitList returns an empty slice when passed an empty","string."],"Name":"SplitList","PkgPath":"path/filepath","PkgName":"filepath","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"path","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into441","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ToSlash","Signature":"func ToSlash(path string) string","ID":"FunctionToSlash","Docs":["ToSlash returns the result of replacing each separator character","in path with a slash ('/') character. Multiple separators are","replaced by multiple slashes."],"Name":"ToSlash","PkgPath":"path/filepath","PkgName":"filepath","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"path","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into305","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"VolumeName","Signature":"func VolumeName(path string) string","ID":"FunctionVolumeName","Docs":["VolumeName returns leading volume name.","Given \"C:\\foo\\bar\" it returns \"C:\" on Windows.","Given \"\\\\host\\share\\foo\" it returns \"\\\\host\\share\".","On other platforms it returns \"\"."],"Name":"VolumeName","PkgPath":"path/filepath","PkgName":"filepath","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"path","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Walk","Signature":"func Walk(root string, walkFn WalkFunc) error","ID":"FunctionWalk","Docs":["Walk walks the file tree rooted at root, calling walkFn for each file or","directory in the tree, including root. All errors that arise visiting files","and directories are filtered by walkFn. The files are walked in lexical","order, which makes the output deterministic but means that for very","large directories Walk can be inefficient.","Walk does not follow symbolic links."],"Name":"Walk","PkgPath":"path/filepath","PkgName":"filepath","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"root","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"walkFn","TypeName":"WalkFunc","PkgName":"filepath","PkgPath":"path/filepath","QualifiedName":"path/filepath.WalkFunc","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}],"TypeMethods":[],"InterfaceMethods":[]}