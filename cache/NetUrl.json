{"Name":"url","PkgPath":"net/url","PkgName":"url","ID":"net/url","Funcs":[{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"Parse","Signature":"func Parse(rawurl string) (*URL, error)","ID":"FunctionParse","Docs":["Parse parses rawurl into a URL structure.","","The rawurl may be relative (a path, without a host) or absolute","(starting with a scheme). Trying to parse a hostname and path","without a scheme is invalid but may not necessarily return an","error, due to parsing ambiguities."],"Name":"Parse","PkgPath":"net/url","PkgName":"url","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"rawurl","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"into925","TypeName":"URL","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.URL","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"ParseQuery","Signature":"func ParseQuery(query string) (Values, error)","ID":"FunctionParseQuery","Docs":["ParseQuery parses the URL-encoded query string and returns","a map listing the values specified for each key.","ParseQuery always returns a non-nil map containing all the","valid query parameters found; err describes the first decoding error","encountered, if any.","","Query is expected to be a list of key=value settings separated by","ampersands or semicolons. A setting without an equals sign is","interpreted as a key set to an empty value."],"Name":"ParseQuery","PkgPath":"net/url","PkgName":"url","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"query","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"into648","TypeName":"Values","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.Values","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"ParseRequestURI","Signature":"func ParseRequestURI(rawurl string) (*URL, error)","ID":"FunctionParseRequestURI","Docs":["ParseRequestURI parses rawurl into a URL structure. It assumes that","rawurl was received in an HTTP request, so the rawurl is interpreted","only as an absolute URI or an absolute path.","The string rawurl is assumed not to have a #fragment suffix.","(Web browsers strip #fragment before sending the URL to a web server.)"],"Name":"ParseRequestURI","PkgPath":"net/url","PkgName":"url","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"rawurl","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"into856","TypeName":"URL","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.URL","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"PathEscape","Signature":"func PathEscape(s string) string","ID":"FunctionPathEscape","Docs":["PathEscape escapes the string so it can be safely placed inside a URL path segment,","replacing special characters (including /) with %XX sequences as needed."],"Name":"PathEscape","PkgPath":"net/url","PkgName":"url","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"s","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into656","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"PathUnescape","Signature":"func PathUnescape(s string) (string, error)","ID":"FunctionPathUnescape","Docs":["PathUnescape does the inverse transformation of PathEscape,","converting each 3-byte encoded substring of the form \"%AB\" into the","hex-decoded byte 0xAB. It returns an error if any % is not followed","by two hexadecimal digits.","","PathUnescape is identical to QueryUnescape except that it does not","unescape '+' to ' ' (space)."],"Name":"PathUnescape","PkgPath":"net/url","PkgName":"url","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"s","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"into765","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"QueryEscape","Signature":"func QueryEscape(s string) string","ID":"FunctionQueryEscape","Docs":["QueryEscape escapes the string so it can be safely placed","inside a URL query."],"Name":"QueryEscape","PkgPath":"net/url","PkgName":"url","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"s","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into393","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"QueryUnescape","Signature":"func QueryUnescape(s string) (string, error)","ID":"FunctionQueryUnescape","Docs":["QueryUnescape does the inverse transformation of QueryEscape,","converting each 3-byte encoded substring of the form \"%AB\" into the","hex-decoded byte 0xAB.","It returns an error if any % is not followed by two hexadecimal","digits."],"Name":"QueryUnescape","PkgPath":"net/url","PkgName":"url","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"s","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"into944","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"User","Signature":"func User(username string) *Userinfo","ID":"FunctionUser","Docs":["User returns a Userinfo containing the provided username","and no password set."],"Name":"User","PkgPath":"net/url","PkgName":"url","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"username","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into132","TypeName":"Userinfo","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.Userinfo","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"UserPassword","Signature":"func UserPassword(username string, password string) *Userinfo","ID":"FunctionUserPassword","Docs":["UserPassword returns a Userinfo containing the provided username","and password.","","This functionality should only be used with legacy web sites.","RFC 2396 warns that interpreting Userinfo this way","``is NOT RECOMMENDED, because the passing of authentication","information in clear text (such as URI) has proven to be a","security risk in almost every case where it has been used.''"],"Name":"UserPassword","PkgPath":"net/url","PkgName":"url","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"username","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"password","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into594","TypeName":"Userinfo","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.Userinfo","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}],"TypeMethods":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ErrorError","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Error","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.Error","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Error-Error","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Error","Signature":"func (*Error).Error() string","ID":"FunctionError","Docs":[],"Name":"Error","PkgPath":"net/url","PkgName":"url","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ErrorTemporary","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Error","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.Error","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Error-Temporary","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Temporary","Signature":"func (*Error).Temporary() bool","ID":"FunctionTemporary","Docs":[],"Name":"Temporary","PkgPath":"net/url","PkgName":"url","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ErrorTimeout","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Error","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.Error","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Error-Timeout","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Timeout","Signature":"func (*Error).Timeout() bool","ID":"FunctionTimeout","Docs":[],"Name":"Timeout","PkgPath":"net/url","PkgName":"url","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ErrorUnwrap","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Error","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.Error","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Error-Unwrap","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Unwrap","Signature":"func (*Error).Unwrap() error","ID":"FunctionUnwrap","Docs":[],"Name":"Unwrap","PkgPath":"net/url","PkgName":"url","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"EscapeErrorError","Docs":[],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"EscapeError","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.EscapeError","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-EscapeError-Error","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Error","Signature":"func (EscapeError).Error() string","ID":"FunctionError","Docs":[],"Name":"Error","PkgPath":"net/url","PkgName":"url","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"InvalidHostErrorError","Docs":[],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"InvalidHostError","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.InvalidHostError","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-InvalidHostError-Error","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Error","Signature":"func (InvalidHostError).Error() string","ID":"FunctionError","Docs":[],"Name":"Error","PkgPath":"net/url","PkgName":"url","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"URLEscapedPath","Docs":["EscapedPath returns the escaped form of u.Path.","In general there are multiple possible escaped forms of any path.","EscapedPath returns u.RawPath when it is a valid escaping of u.Path.","Otherwise EscapedPath ignores u.RawPath and computes an escaped","form on its own.","The String and RequestURI methods use EscapedPath to construct","their results.","In general, code should call EscapedPath instead of","reading u.RawPath directly."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from586","TypeName":"URL","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.URL","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-URL-EscapedPath","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"EscapedPath","Signature":"func (*URL).EscapedPath() string","ID":"FunctionEscapedPath","Docs":["EscapedPath returns the escaped form of u.Path.","In general there are multiple possible escaped forms of any path.","EscapedPath returns u.RawPath when it is a valid escaping of u.Path.","Otherwise EscapedPath ignores u.RawPath and computes an escaped","form on its own.","The String and RequestURI methods use EscapedPath to construct","their results.","In general, code should call EscapedPath instead of","reading u.RawPath directly."],"Name":"EscapedPath","PkgPath":"net/url","PkgName":"url","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into508","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"URLHostname","Docs":["Hostname returns u.Host, stripping any valid port number if present.","","If the result is enclosed in square brackets, as literal IPv6 addresses are,","the square brackets are removed from the result."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from325","TypeName":"URL","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.URL","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-URL-Hostname","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Hostname","Signature":"func (*URL).Hostname() string","ID":"FunctionHostname","Docs":["Hostname returns u.Host, stripping any valid port number if present.","","If the result is enclosed in square brackets, as literal IPv6 addresses are,","the square brackets are removed from the result."],"Name":"Hostname","PkgPath":"net/url","PkgName":"url","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into531","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"URLIsAbs","Docs":["IsAbs reports whether the URL is absolute.","Absolute means that it has a non-empty scheme."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"URL","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.URL","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-URL-IsAbs","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"IsAbs","Signature":"func (*URL).IsAbs() bool","ID":"FunctionIsAbs","Docs":["IsAbs reports whether the URL is absolute.","Absolute means that it has a non-empty scheme."],"Name":"IsAbs","PkgPath":"net/url","PkgName":"url","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"URLMarshalBinary","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from954","TypeName":"URL","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.URL","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-URL-MarshalBinary","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MarshalBinary","Signature":"func (*URL).MarshalBinary() (text []byte, err error)","ID":"FunctionMarshalBinary","Docs":[],"Name":"MarshalBinary","PkgPath":"net/url","PkgName":"url","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"text","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"err","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"URLParse","Docs":["Parse parses a URL in the context of the receiver. The provided URL","may be relative or absolute. Parse returns nil, err on parse","failure, otherwise its return value is the same as ResolveReference."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from186","TypeName":"URL","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.URL","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-URL-Parse","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Parse","Signature":"func (*URL).Parse(ref string) (*URL, error)","ID":"FunctionParse","Docs":["Parse parses a URL in the context of the receiver. The provided URL","may be relative or absolute. Parse returns nil, err on parse","failure, otherwise its return value is the same as ResolveReference."],"Name":"Parse","PkgPath":"net/url","PkgName":"url","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ref","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"into661","TypeName":"URL","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.URL","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"URLPort","Docs":["Port returns the port part of u.Host, without the leading colon.","","If u.Host doesn't contain a valid numeric port, Port returns an empty string."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from606","TypeName":"URL","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.URL","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-URL-Port","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Port","Signature":"func (*URL).Port() string","ID":"FunctionPort","Docs":["Port returns the port part of u.Host, without the leading colon.","","If u.Host doesn't contain a valid numeric port, Port returns an empty string."],"Name":"Port","PkgPath":"net/url","PkgName":"url","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into288","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"URLQuery","Docs":["Query parses RawQuery and returns the corresponding values.","It silently discards malformed value pairs.","To check errors use ParseQuery."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from292","TypeName":"URL","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.URL","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-URL-Query","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Query","Signature":"func (*URL).Query() Values","ID":"FunctionQuery","Docs":["Query parses RawQuery and returns the corresponding values.","It silently discards malformed value pairs.","To check errors use ParseQuery."],"Name":"Query","PkgPath":"net/url","PkgName":"url","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into884","TypeName":"Values","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.Values","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"URLRequestURI","Docs":["RequestURI returns the encoded path?query or opaque?query","string that would be used in an HTTP request for u."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from808","TypeName":"URL","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.URL","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-URL-RequestURI","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RequestURI","Signature":"func (*URL).RequestURI() string","ID":"FunctionRequestURI","Docs":["RequestURI returns the encoded path?query or opaque?query","string that would be used in an HTTP request for u."],"Name":"RequestURI","PkgPath":"net/url","PkgName":"url","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into543","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"URLResolveReference","Docs":["ResolveReference resolves a URI reference to an absolute URI from","an absolute base URI u, per RFC 3986 Section 5.2. The URI reference","may be relative or absolute. ResolveReference always returns a new","URL instance, even if the returned URL is identical to either the","base or reference. If ref is an absolute URL, then ResolveReference","ignores base and returns a copy of ref."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from607","TypeName":"URL","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.URL","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-URL-ResolveReference","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ResolveReference","Signature":"func (*URL).ResolveReference(ref *URL) *URL","ID":"FunctionResolveReference","Docs":["ResolveReference resolves a URI reference to an absolute URI from","an absolute base URI u, per RFC 3986 Section 5.2. The URI reference","may be relative or absolute. ResolveReference always returns a new","URL instance, even if the returned URL is identical to either the","base or reference. If ref is an absolute URL, then ResolveReference","ignores base and returns a copy of ref."],"Name":"ResolveReference","PkgPath":"net/url","PkgName":"url","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"ref","TypeName":"URL","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.URL","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into214","TypeName":"URL","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.URL","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"URLString","Docs":["String reassembles the URL into a valid URL string.","The general form of the result is one of:","","\tscheme:opaque?query#fragment","\tscheme://userinfo@host/path?query#fragment","","If u.Opaque is non-empty, String uses the first form;","otherwise it uses the second form.","Any non-ASCII characters in host are escaped.","To obtain the path, String uses u.EscapedPath().","","In the second form, the following rules apply:","\t- if u.Scheme is empty, scheme: is omitted.","\t- if u.User is nil, userinfo@ is omitted.","\t- if u.Host is empty, host/ is omitted.","\t- if u.Scheme and u.Host are empty and u.User is nil,","\t   the entire scheme://userinfo@host/ is omitted.","\t- if u.Host is non-empty and u.Path begins with a /,","\t   the form host/path does not add its own /.","\t- if u.RawQuery is empty, ?query is omitted.","\t- if u.Fragment is empty, #fragment is omitted."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from336","TypeName":"URL","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.URL","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-URL-String","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"String","Signature":"func (*URL).String() string","ID":"FunctionString","Docs":["String reassembles the URL into a valid URL string.","The general form of the result is one of:","","\tscheme:opaque?query#fragment","\tscheme://userinfo@host/path?query#fragment","","If u.Opaque is non-empty, String uses the first form;","otherwise it uses the second form.","Any non-ASCII characters in host are escaped.","To obtain the path, String uses u.EscapedPath().","","In the second form, the following rules apply:","\t- if u.Scheme is empty, scheme: is omitted.","\t- if u.User is nil, userinfo@ is omitted.","\t- if u.Host is empty, host/ is omitted.","\t- if u.Scheme and u.Host are empty and u.User is nil,","\t   the entire scheme://userinfo@host/ is omitted.","\t- if u.Host is non-empty and u.Path begins with a /,","\t   the form host/path does not add its own /.","\t- if u.RawQuery is empty, ?query is omitted.","\t- if u.Fragment is empty, #fragment is omitted."],"Name":"String","PkgPath":"net/url","PkgName":"url","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into509","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"URLUnmarshalBinary","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"into620","TypeName":"URL","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.URL","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-URL-UnmarshalBinary","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"UnmarshalBinary","Signature":"func (*URL).UnmarshalBinary(text []byte) error","ID":"FunctionUnmarshalBinary","Docs":[],"Name":"UnmarshalBinary","PkgPath":"net/url","PkgName":"url","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"text","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"UserinfoPassword","Docs":["Password returns the password in case it is set, and whether it is set."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from795","TypeName":"Userinfo","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.Userinfo","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Userinfo-Password","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Password","Signature":"func (*Userinfo).Password() (string, bool)","ID":"FunctionPassword","Docs":["Password returns the password in case it is set, and whether it is set."],"Name":"Password","PkgPath":"net/url","PkgName":"url","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"into335","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"UserinfoString","Docs":["String returns the encoded userinfo information in the standard form","of \"username[:password]\"."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from415","TypeName":"Userinfo","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.Userinfo","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Userinfo-String","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"String","Signature":"func (*Userinfo).String() string","ID":"FunctionString","Docs":["String returns the encoded userinfo information in the standard form","of \"username[:password]\"."],"Name":"String","PkgPath":"net/url","PkgName":"url","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into401","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"UserinfoUsername","Docs":["Username returns the username."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from764","TypeName":"Userinfo","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.Userinfo","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Userinfo-Username","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Username","Signature":"func (*Userinfo).Username() string","ID":"FunctionUsername","Docs":["Username returns the username."],"Name":"Username","PkgPath":"net/url","PkgName":"url","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into792","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"ValuesAdd","Docs":["Add adds the value to key. It appends to any existing","values associated with key."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"into452","TypeName":"Values","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.Values","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Values-Add","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Add","Signature":"func (Values).Add(key string, value string)","ID":"FunctionAdd","Docs":["Add adds the value to key. It appends to any existing","values associated with key."],"Name":"Add","PkgPath":"net/url","PkgName":"url","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"key","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"value","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValuesDel","Docs":["Del deletes the values associated with key."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Values","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.Values","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Values-Del","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Del","Signature":"func (Values).Del(key string)","ID":"FunctionDel","Docs":["Del deletes the values associated with key."],"Name":"Del","PkgPath":"net/url","PkgName":"url","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"key","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValuesEncode","Docs":["Encode encodes the values into ``URL encoded'' form","(\"bar=baz\u0026foo=quux\") sorted by key."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from831","TypeName":"Values","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.Values","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Values-Encode","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Encode","Signature":"func (Values).Encode() string","ID":"FunctionEncode","Docs":["Encode encodes the values into ``URL encoded'' form","(\"bar=baz\u0026foo=quux\") sorted by key."],"Name":"Encode","PkgPath":"net/url","PkgName":"url","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into575","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValuesGet","Docs":["Get gets the first value associated with the given key.","If there are no values associated with the key, Get returns","the empty string. To access multiple values, use the map","directly."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from789","TypeName":"Values","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.Values","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Values-Get","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Get","Signature":"func (Values).Get(key string) string","ID":"FunctionGet","Docs":["Get gets the first value associated with the given key.","If there are no values associated with the key, Get returns","the empty string. To access multiple values, use the map","directly."],"Name":"Get","PkgPath":"net/url","PkgName":"url","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"key","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into620","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"ValuesSet","Docs":["Set sets the key to value. It replaces any existing","values."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"into434","TypeName":"Values","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.Values","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Values-Set","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Set","Signature":"func (Values).Set(key string, value string)","ID":"FunctionSet","Docs":["Set sets the key to value. It replaces any existing","values."],"Name":"Set","PkgPath":"net/url","PkgName":"url","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"key","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"value","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}}],"InterfaceMethods":[]}