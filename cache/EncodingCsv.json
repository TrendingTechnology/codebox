{"Name":"csv","PkgPath":"encoding/csv","PkgName":"csv","ID":"encoding/csv","Funcs":[{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"NewReader","Signature":"func NewReader(r io.Reader) *Reader","ID":"FunctionNewReader","Docs":["NewReader returns a new Reader that reads from r."],"Name":"NewReader","PkgPath":"encoding/csv","PkgName":"csv","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"r","TypeName":"Reader","PkgName":"io","PkgPath":"io","QualifiedName":"io.Reader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into364","TypeName":"Reader","PkgName":"csv","PkgPath":"encoding/csv","QualifiedName":"encoding/csv.Reader","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isResult()","Element":"result","Index":0},"Outp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0}}},"ClassName":"NewWriter","Signature":"func NewWriter(w io.Writer) *Writer","ID":"FunctionNewWriter","Docs":["NewWriter returns a new Writer that writes to w."],"Name":"NewWriter","PkgPath":"encoding/csv","PkgName":"csv","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"w","TypeName":"Writer","PkgName":"io","PkgPath":"io","QualifiedName":"io.Writer","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"from563","TypeName":"Writer","PkgName":"csv","PkgPath":"encoding/csv","QualifiedName":"encoding/csv.Writer","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}],"TypeMethods":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ParseErrorError","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ParseError","PkgName":"csv","PkgPath":"encoding/csv","QualifiedName":"encoding/csv.ParseError","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ParseError-Error","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Error","Signature":"func (*ParseError).Error() string","ID":"FunctionError","Docs":[],"Name":"Error","PkgPath":"encoding/csv","PkgName":"csv","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ParseErrorUnwrap","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ParseError","PkgName":"csv","PkgPath":"encoding/csv","QualifiedName":"encoding/csv.ParseError","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ParseError-Unwrap","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Unwrap","Signature":"func (*ParseError).Unwrap() error","ID":"FunctionUnwrap","Docs":[],"Name":"Unwrap","PkgPath":"encoding/csv","PkgName":"csv","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"ReaderRead","Docs":["Read reads one record (a slice of fields) from r.","If the record has an unexpected number of fields,","Read returns the record along with the error ErrFieldCount.","Except for that case, Read always returns either a non-nil","record or a non-nil error, but not both.","If there is no data left to be read, Read returns nil, io.EOF.","If ReuseRecord is true, the returned slice may be shared","between multiple calls to Read."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from282","TypeName":"Reader","PkgName":"csv","PkgPath":"encoding/csv","QualifiedName":"encoding/csv.Reader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Reader-Read","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Read","Signature":"func (*Reader).Read() (record []string, err error)","ID":"FunctionRead","Docs":["Read reads one record (a slice of fields) from r.","If the record has an unexpected number of fields,","Read returns the record along with the error ErrFieldCount.","Except for that case, Read always returns either a non-nil","record or a non-nil error, but not both.","If there is no data left to be read, Read returns nil, io.EOF.","If ReuseRecord is true, the returned slice may be shared","between multiple calls to Read."],"Name":"Read","PkgPath":"encoding/csv","PkgName":"csv","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"record","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"err","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"ReaderReadAll","Docs":["ReadAll reads all the remaining records from r.","Each record is a slice of fields.","A successful call returns err == nil, not err == io.EOF. Because ReadAll is","defined to read until EOF, it does not treat end of file as an error to be","reported."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from164","TypeName":"Reader","PkgName":"csv","PkgPath":"encoding/csv","QualifiedName":"encoding/csv.Reader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Reader-ReadAll","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ReadAll","Signature":"func (*Reader).ReadAll() (records [][]string, err error)","ID":"FunctionReadAll","Docs":["ReadAll reads all the remaining records from r.","Each record is a slice of fields.","A successful call returns err == nil, not err == io.EOF. Because ReadAll is","defined to read until EOF, it does not treat end of file as an error to be","reported."],"Name":"ReadAll","PkgPath":"encoding/csv","PkgName":"csv","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"records","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"err","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"WriterError","Docs":["Error reports any error that has occurred during a previous Write or Flush."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Writer","PkgName":"csv","PkgPath":"encoding/csv","QualifiedName":"encoding/csv.Writer","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Writer-Error","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Error","Signature":"func (*Writer).Error() error","ID":"FunctionError","Docs":["Error reports any error that has occurred during a previous Write or Flush."],"Name":"Error","PkgPath":"encoding/csv","PkgName":"csv","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"WriterFlush","Docs":["Flush writes any buffered data to the underlying io.Writer.","To check if an error occurred during the Flush, call Error."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Writer","PkgName":"csv","PkgPath":"encoding/csv","QualifiedName":"encoding/csv.Writer","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Writer-Flush","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Flush","Signature":"func (*Writer).Flush()","ID":"FunctionFlush","Docs":["Flush writes any buffered data to the underlying io.Writer.","To check if an error occurred during the Flush, call Error."],"Name":"Flush","PkgPath":"encoding/csv","PkgName":"csv","Parameters":null,"Results":null}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"WriterWrite","Docs":["Write writes a single CSV record to w along with any necessary quoting.","A record is a slice of strings with each string being one field.","Writes are buffered, so Flush must eventually be called to ensure","that the record is written to the underlying io.Writer."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"into801","TypeName":"Writer","PkgName":"csv","PkgPath":"encoding/csv","QualifiedName":"encoding/csv.Writer","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Writer-Write","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Write","Signature":"func (*Writer).Write(record []string) error","ID":"FunctionWrite","Docs":["Write writes a single CSV record to w along with any necessary quoting.","A record is a slice of strings with each string being one field.","Writes are buffered, so Flush must eventually be called to ensure","that the record is written to the underlying io.Writer."],"Name":"Write","PkgPath":"encoding/csv","PkgName":"csv","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"record","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"WriterWriteAll","Docs":["WriteAll writes multiple CSV records to w using Write and then calls Flush,","returning any error from the Flush."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"into725","TypeName":"Writer","PkgName":"csv","PkgPath":"encoding/csv","QualifiedName":"encoding/csv.Writer","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Writer-WriteAll","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"WriteAll","Signature":"func (*Writer).WriteAll(records [][]string) error","ID":"FunctionWriteAll","Docs":["WriteAll writes multiple CSV records to w using Write and then calls Flush,","returning any error from the Flush."],"Name":"WriteAll","PkgPath":"encoding/csv","PkgName":"csv","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"records","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}}],"InterfaceMethods":[]}