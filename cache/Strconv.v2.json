{
   "func (*NumError).Error() string": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*NumError).Unwrap() error": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func AppendBool(dst []byte, b bool) []byte": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func AppendFloat(dst []byte, f float64, fmt byte, prec int, bitSize int) []byte": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func AppendInt(dst []byte, i int64, base int) []byte": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func AppendQuote(dst []byte, s string) []byte": {
      "GeneratedClass": "\n    private class AppendQuote extends TaintTracking::FunctionModel {\n      // signature: func AppendQuote(dst []byte, s string) []byte\n      AppendQuote() { hasQualifiedName(\"strconv\", \"AppendQuote\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(_)) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(_)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               true,
               false
            ],
            "Outp": [
               false,
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func AppendQuoteRune(dst []byte, r rune) []byte": {
      "GeneratedClass": "\n    private class AppendQuoteRune extends TaintTracking::FunctionModel {\n      // signature: func AppendQuoteRune(dst []byte, r rune) []byte\n      AppendQuoteRune() { hasQualifiedName(\"strconv\", \"AppendQuoteRune\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(_)) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(_)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               true,
               false
            ],
            "Outp": [
               false,
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func AppendQuoteRuneToASCII(dst []byte, r rune) []byte": {
      "GeneratedClass": "\n    private class AppendQuoteRuneToASCII extends TaintTracking::FunctionModel {\n      // signature: func AppendQuoteRuneToASCII(dst []byte, r rune) []byte\n      AppendQuoteRuneToASCII() { hasQualifiedName(\"strconv\", \"AppendQuoteRuneToASCII\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(_)) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(_)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               true,
               false
            ],
            "Outp": [
               false,
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func AppendQuoteRuneToGraphic(dst []byte, r rune) []byte": {
      "GeneratedClass": "\n    private class AppendQuoteRuneToGraphic extends TaintTracking::FunctionModel {\n      // signature: func AppendQuoteRuneToGraphic(dst []byte, r rune) []byte\n      AppendQuoteRuneToGraphic() { hasQualifiedName(\"strconv\", \"AppendQuoteRuneToGraphic\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(_)) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(_)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               true,
               false
            ],
            "Outp": [
               false,
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func AppendQuoteToASCII(dst []byte, s string) []byte": {
      "GeneratedClass": "\n    private class AppendQuoteToASCII extends TaintTracking::FunctionModel {\n      // signature: func AppendQuoteToASCII(dst []byte, s string) []byte\n      AppendQuoteToASCII() { hasQualifiedName(\"strconv\", \"AppendQuoteToASCII\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(_)) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(_)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               true,
               false
            ],
            "Outp": [
               false,
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func AppendQuoteToGraphic(dst []byte, s string) []byte": {
      "GeneratedClass": "\n    private class AppendQuoteToGraphic extends TaintTracking::FunctionModel {\n      // signature: func AppendQuoteToGraphic(dst []byte, s string) []byte\n      AppendQuoteToGraphic() { hasQualifiedName(\"strconv\", \"AppendQuoteToGraphic\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(_)) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(_)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               true,
               false
            ],
            "Outp": [
               false,
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func AppendUint(dst []byte, i uint64, base int) []byte": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Atoi(s string) (int, error)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func CanBackquote(s string) bool": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func FormatBool(b bool) string": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func FormatFloat(f float64, fmt byte, prec int, bitSize int) string": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func FormatInt(i int64, base int) string": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func FormatUint(i uint64, base int) string": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func IsGraphic(r rune) bool": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func IsPrint(r rune) bool": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Itoa(i int) string": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func ParseBool(str string) (bool, error)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func ParseFloat(s string, bitSize int) (float64, error)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func ParseInt(s string, base int, bitSize int) (i int64, err error)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func ParseUint(s string, base int, bitSize int) (uint64, error)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Quote(s string) string": {
      "GeneratedClass": "\n    private class Quote extends TaintTracking::FunctionModel {\n      // signature: func Quote(s string) string\n      Quote() { hasQualifiedName(\"strconv\", \"Quote\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func QuoteRune(r rune) string": {
      "GeneratedClass": "\n    private class QuoteRune extends TaintTracking::FunctionModel {\n      // signature: func QuoteRune(r rune) string\n      QuoteRune() { hasQualifiedName(\"strconv\", \"QuoteRune\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func QuoteRuneToASCII(r rune) string": {
      "GeneratedClass": "\n    private class QuoteRuneToASCII extends TaintTracking::FunctionModel {\n      // signature: func QuoteRuneToASCII(r rune) string\n      QuoteRuneToASCII() { hasQualifiedName(\"strconv\", \"QuoteRuneToASCII\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func QuoteRuneToGraphic(r rune) string": {
      "GeneratedClass": "\n    private class QuoteRuneToGraphic extends TaintTracking::FunctionModel {\n      // signature: func QuoteRuneToGraphic(r rune) string\n      QuoteRuneToGraphic() { hasQualifiedName(\"strconv\", \"QuoteRuneToGraphic\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func QuoteToASCII(s string) string": {
      "GeneratedClass": "\n    private class QuoteToASCII extends TaintTracking::FunctionModel {\n      // signature: func QuoteToASCII(s string) string\n      QuoteToASCII() { hasQualifiedName(\"strconv\", \"QuoteToASCII\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func QuoteToGraphic(s string) string": {
      "GeneratedClass": "\n    private class QuoteToGraphic extends TaintTracking::FunctionModel {\n      // signature: func QuoteToGraphic(s string) string\n      QuoteToGraphic() { hasQualifiedName(\"strconv\", \"QuoteToGraphic\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func Unquote(s string) (string, error)": {
      "GeneratedClass": "\n    private class Unquote extends TaintTracking::FunctionModel {\n      // signature: func Unquote(s string) (string, error)\n      Unquote() { hasQualifiedName(\"strconv\", \"Unquote\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult(0)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false
            ],
            "Outp": [
               false,
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func UnquoteChar(s string, quote byte) (value rune, multibyte bool, tail string, err error)": {
      "GeneratedClass": "\n    private class UnquoteChar extends TaintTracking::FunctionModel {\n      // signature: func UnquoteChar(s string, quote byte) (value rune, multibyte bool, tail string, err error)\n      UnquoteChar() { hasQualifiedName(\"strconv\", \"UnquoteChar\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult(0)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               true,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": true
   }
}
