{"Name":"reflect","PkgPath":"reflect","PkgName":"reflect","ID":"reflect","Funcs":[{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(any(int i | i \u003e= 1))","Element":"parameter","Index":1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"Append","Signature":"func Append(s Value, x ...Value) Value","ID":"FunctionAppend","Docs":["Append appends the values x to a slice s and returns the resulting slice.","As in Go, each x's value must be assignable to the slice's element type."],"Name":"Append","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"s","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 1))","Element":"parameter","Index":1},"VarName":"x","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"AppendSlice","Signature":"func AppendSlice(s Value, t Value) Value","ID":"FunctionAppendSlice","Docs":["AppendSlice appends a slice t to a slice s and returns the resulting slice.","The slices s and t must have the same element type."],"Name":"AppendSlice","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"s","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"t","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ArrayOf","Signature":"func ArrayOf(count int, elem Type) Type","ID":"FunctionArrayOf","Docs":["ArrayOf returns the array type with the given count and element type.","For example, if t represents int, ArrayOf(5, t) represents [5]int.","","If the resulting type would be larger than the available address space,","ArrayOf panics."],"Name":"ArrayOf","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"count","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"elem","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ChanOf","Signature":"func ChanOf(dir ChanDir, t Type) Type","ID":"FunctionChanOf","Docs":["ChanOf returns the channel type with the given direction and element type.","For example, if t represents int, ChanOf(RecvDir, t) represents \u003c-chan int.","","The gc runtime imposes a limit of 64 kB on channel element types.","If t's size is equal to or exceeds this limit, ChanOf panics."],"Name":"ChanOf","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"dir","TypeName":"ChanDir","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.ChanDir","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"t","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0}}},"ClassName":"Copy","Signature":"func Copy(dst Value, src Value) int","ID":"FunctionCopy","Docs":["Copy copies the contents of src into dst until either","dst has been filled or src has been exhausted.","It returns the number of elements copied.","Dst and src each must have kind Slice or Array, and","dst and src must have the same element type.","","As a special case, src can have kind String if the element type of dst is kind Uint8."],"Name":"Copy","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"dst","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"src","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DeepEqual","Signature":"func DeepEqual(x interface{}, y interface{}) bool","ID":"FunctionDeepEqual","Docs":["DeepEqual reports whether x and y are ``deeply equal,'' defined as follows.","Two values of identical type are deeply equal if one of the following cases applies.","Values of distinct types are never deeply equal.","","Array values are deeply equal when their corresponding elements are deeply equal.","","Struct values are deeply equal if their corresponding fields,","both exported and unexported, are deeply equal.","","Func values are deeply equal if both are nil; otherwise they are not deeply equal.","","Interface values are deeply equal if they hold deeply equal concrete values.","","Map values are deeply equal when all of the following are true:","they are both nil or both non-nil, they have the same length,","and either they are the same map object or their corresponding keys","(matched using Go equality) map to deeply equal values.","","Pointer values are deeply equal if they are equal using Go's == operator","or if they point to deeply equal values.","","Slice values are deeply equal when all of the following are true:","they are both nil or both non-nil, they have the same length,","and either they point to the same initial entry of the same underlying array","(that is, \u0026x[0] == \u0026y[0]) or their corresponding elements (up to length) are deeply equal.","Note that a non-nil empty slice and a nil slice (for example, []byte{} and []byte(nil))","are not deeply equal.","","Other values - numbers, bools, strings, and channels - are deeply equal","if they are equal using Go's == operator.","","In general DeepEqual is a recursive relaxation of Go's == operator.","However, this idea is impossible to implement without some inconsistency.","Specifically, it is possible for a value to be unequal to itself,","either because it is of func type (uncomparable in general)","or because it is a floating-point NaN value (not equal to itself in floating-point comparison),","or because it is an array, struct, or interface containing","such a value.","On the other hand, pointer values are always equal to themselves,","even if they point at or contain such problematic values,","because they compare equal using Go's == operator, and that","is a sufficient condition to be deeply equal, regardless of content.","DeepEqual has been defined so that the same short-cut applies","to slices and maps: if x and y are the same slice or the same map,","they are deeply equal regardless of content.","","As DeepEqual traverses the data values it may find a cycle. The","second and subsequent times that DeepEqual compares two pointer","values that have been compared before, it treats the values as","equal rather than examining the values to which they point.","This ensures that DeepEqual terminates."],"Name":"DeepEqual","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"y","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"FuncOf","Signature":"func FuncOf(in []Type, out []Type, variadic bool) Type","ID":"FunctionFuncOf","Docs":["FuncOf returns the function type with the given argument and result types.","For example if k represents int and e represents string,","FuncOf([]Type{k}, []Type{e}, false) represents func(int) string.","","The variadic argument controls whether the function is variadic. FuncOf","panics if the in[len(in)-1] does not represent a slice and variadic is","true."],"Name":"FuncOf","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"in","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"out","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"variadic","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"Indirect","Signature":"func Indirect(v Value) Value","ID":"FunctionIndirect","Docs":["Indirect returns the value that v points to.","If v is a nil pointer, Indirect returns a zero Value.","If v is not a pointer, Indirect returns v."],"Name":"Indirect","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"v","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MakeChan","Signature":"func MakeChan(typ Type, buffer int) Value","ID":"FunctionMakeChan","Docs":["MakeChan creates a new channel with the specified type and buffer size."],"Name":"MakeChan","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"typ","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"buffer","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MakeFunc","Signature":"func MakeFunc(typ Type, fn func(args []Value) (results []Value)) Value","ID":"FunctionMakeFunc","Docs":["MakeFunc returns a new function of the given Type","that wraps the function fn. When called, that new function","does the following:","","\t- converts its arguments to a slice of Values.","\t- runs results := fn(args).","\t- returns the results as a slice of Values, one per formal result.","","The implementation fn can assume that the argument Value slice","has the number and type of arguments given by typ.","If typ describes a variadic function, the final Value is itself","a slice representing the variadic arguments, as in the","body of a variadic function. The result Value slice returned by fn","must have the number and type of results given by typ.","","The Value.Call method allows the caller to invoke a typed function","in terms of Values; in contrast, MakeFunc allows the caller to implement","a typed function in terms of Values.","","The Examples section of the documentation includes an illustration","of how to use MakeFunc to build a swap function for different types."],"Name":"MakeFunc","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"typ","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"fn","TypeName":"func(args []reflect.Value) (results []reflect.Value)","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MakeMap","Signature":"func MakeMap(typ Type) Value","ID":"FunctionMakeMap","Docs":["MakeMap creates a new map with the specified type."],"Name":"MakeMap","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"typ","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MakeMapWithSize","Signature":"func MakeMapWithSize(typ Type, n int) Value","ID":"FunctionMakeMapWithSize","Docs":["MakeMapWithSize creates a new map with the specified type","and initial space for approximately n elements."],"Name":"MakeMapWithSize","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"typ","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"n","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MakeSlice","Signature":"func MakeSlice(typ Type, len int, cap int) Value","ID":"FunctionMakeSlice","Docs":["MakeSlice creates a new zero-initialized slice value","for the specified slice type, length, and capacity."],"Name":"MakeSlice","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"typ","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"len","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"cap","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MapOf","Signature":"func MapOf(key Type, elem Type) Type","ID":"FunctionMapOf","Docs":["MapOf returns the map type with the given key and element types.","For example, if k represents int and e represents string,","MapOf(k, e) represents map[int]string.","","If the key type is not a valid map key type (that is, if it does","not implement Go's == operator), MapOf panics."],"Name":"MapOf","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"key","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"elem","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"New","Signature":"func New(typ Type) Value","ID":"FunctionNew","Docs":["New returns a Value representing a pointer to a new zero value","for the specified type. That is, the returned Value's Type is PtrTo(typ)."],"Name":"New","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"typ","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewAt","Signature":"func NewAt(typ Type, p unsafe.Pointer) Value","ID":"FunctionNewAt","Docs":["NewAt returns a Value representing a pointer to a value of the","specified type, using p as that pointer."],"Name":"NewAt","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"typ","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"p","TypeName":"Pointer","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"PtrTo","Signature":"func PtrTo(t Type) Type","ID":"FunctionPtrTo","Docs":["PtrTo returns the pointer type with element t.","For example, if t represents type Foo, PtrTo(t) represents *Foo."],"Name":"PtrTo","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"t","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Select","Signature":"func Select(cases []SelectCase) (chosen int, recv Value, recvOK bool)","ID":"FunctionSelect","Docs":["Select executes a select operation described by the list of cases.","Like the Go select statement, it blocks until at least one of the cases","can proceed, makes a uniform pseudo-random choice,","and then executes that case. It returns the index of the chosen case","and, if that case was a receive operation, the value received and a","boolean indicating whether the value corresponds to a send on the channel","(as opposed to a zero value received because the channel is closed)."],"Name":"Select","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"cases","TypeName":"SelectCase","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.SelectCase","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"chosen","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"recv","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(2)","Element":"result","Index":2},"VarName":"recvOK","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SliceOf","Signature":"func SliceOf(t Type) Type","ID":"FunctionSliceOf","Docs":["SliceOf returns the slice type with element type t.","For example, if t represents int, SliceOf(t) represents []int."],"Name":"SliceOf","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"t","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"StructOf","Signature":"func StructOf(fields []StructField) Type","ID":"FunctionStructOf","Docs":["StructOf returns the struct type containing fields.","The Offset and Index fields are ignored and computed as they would be","by the compiler.","","StructOf currently does not generate wrapper methods for embedded","fields and panics if passed unexported StructFields.","These limitations may be lifted in a future version."],"Name":"StructOf","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"fields","TypeName":"StructField","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.StructField","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Swapper","Signature":"func Swapper(slice interface{}) func(i int, j int)","ID":"FunctionSwapper","Docs":["Swapper returns a function that swaps the elements in the provided","slice.","","Swapper panics if the provided interface is not a slice."],"Name":"Swapper","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"slice","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"func(i int, j int)","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeOf","Signature":"func TypeOf(i interface{}) Type","ID":"FunctionTypeOf","Docs":["TypeOf returns the reflection Type that represents the dynamic type of i.","If i is a nil interface value, TypeOf returns nil."],"Name":"TypeOf","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"i","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueOf","Signature":"func ValueOf(i interface{}) Value","ID":"FunctionValueOf","Docs":["ValueOf returns a new Value initialized to the concrete value","stored in the interface i. ValueOf(nil) returns the zero Value."],"Name":"ValueOf","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"i","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into426","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Zero","Signature":"func Zero(typ Type) Value","ID":"FunctionZero","Docs":["Zero returns a Value representing the zero value for the specified type.","The result is different from the zero value of the Value struct,","which represents no value at all.","For example, Zero(TypeOf(42)) returns a Value with Kind Int and value 0.","The returned value is neither addressable nor settable."],"Name":"Zero","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"typ","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}],"TypeMethods":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ChanDirString","Docs":[],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ChanDir","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.ChanDir","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ChanDir-String","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"String","Signature":"func (ChanDir).String() string","ID":"FunctionString","Docs":[],"Name":"String","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"KindString","Docs":["String returns the name of k."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Kind","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Kind","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Kind-String","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"String","Signature":"func (Kind).String() string","ID":"FunctionString","Docs":["String returns the name of k."],"Name":"String","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"MapIterKey","Docs":["Key returns the key of the iterator's current map entry."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from994","TypeName":"MapIter","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.MapIter","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-MapIter-Key","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Key","Signature":"func (*MapIter).Key() Value","ID":"FunctionKey","Docs":["Key returns the key of the iterator's current map entry."],"Name":"Key","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into559","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MapIterNext","Docs":["Next advances the map iterator and reports whether there is another","entry. It returns false when the iterator is exhausted; subsequent","calls to Key, Value, or Next will panic."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"MapIter","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.MapIter","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-MapIter-Next","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Next","Signature":"func (*MapIter).Next() bool","ID":"FunctionNext","Docs":["Next advances the map iterator and reports whether there is another","entry. It returns false when the iterator is exhausted; subsequent","calls to Key, Value, or Next will panic."],"Name":"Next","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"MapIterValue","Docs":["Value returns the value of the iterator's current map entry."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from127","TypeName":"MapIter","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.MapIter","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-MapIter-Value","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Value","Signature":"func (*MapIter).Value() Value","ID":"FunctionValue","Docs":["Value returns the value of the iterator's current map entry."],"Name":"Value","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into979","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"StructTagGet","Docs":["Get returns the value associated with key in the tag string.","If there is no such key in the tag, Get returns the empty string.","If the tag does not have the conventional format, the value","returned by Get is unspecified. To determine whether a tag is","explicitly set to the empty string, use Lookup."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from818","TypeName":"StructTag","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.StructTag","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-StructTag-Get","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Get","Signature":"func (StructTag).Get(key string) string","ID":"FunctionGet","Docs":["Get returns the value associated with key in the tag string.","If there is no such key in the tag, Get returns the empty string.","If the tag does not have the conventional format, the value","returned by Get is unspecified. To determine whether a tag is","explicitly set to the empty string, use Lookup."],"Name":"Get","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"key","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into896","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"StructTagLookup","Docs":["Lookup returns the value associated with key in the tag string.","If the key is present in the tag the value (which may be empty)","is returned. Otherwise the returned value will be the empty string.","The ok return value reports whether the value was explicitly set in","the tag string. If the tag does not have the conventional format,","the value returned by Lookup is unspecified."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from704","TypeName":"StructTag","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.StructTag","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-StructTag-Lookup","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Lookup","Signature":"func (StructTag).Lookup(key string) (value string, ok bool)","ID":"FunctionLookup","Docs":["Lookup returns the value associated with key in the tag string.","If the key is present in the tag the value (which may be empty)","is returned. Otherwise the returned value will be the empty string.","The ok return value reports whether the value was explicitly set in","the tag string. If the tag does not have the conventional format,","the value returned by Lookup is unspecified."],"Name":"Lookup","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"key","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"value","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"ok","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueAddr","Docs":["Addr returns a pointer value representing the address of v.","It panics if CanAddr() returns false.","Addr is typically used to obtain a pointer to a struct field","or slice element in order to call a method that requires a","pointer receiver."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from603","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Addr","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Addr","Signature":"func (Value).Addr() Value","ID":"FunctionAddr","Docs":["Addr returns a pointer value representing the address of v.","It panics if CanAddr() returns false.","Addr is typically used to obtain a pointer to a struct field","or slice element in order to call a method that requires a","pointer receiver."],"Name":"Addr","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into747","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueBool","Docs":["Bool returns v's underlying value.","It panics if v's kind is not Bool."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from661","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Bool","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Bool","Signature":"func (Value).Bool() bool","ID":"FunctionBool","Docs":["Bool returns v's underlying value.","It panics if v's kind is not Bool."],"Name":"Bool","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into522","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueBytes","Docs":["Bytes returns v's underlying value.","It panics if v's underlying value is not a slice of bytes."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Bytes","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Bytes","Signature":"func (Value).Bytes() []byte","ID":"FunctionBytes","Docs":["Bytes returns v's underlying value.","It panics if v's underlying value is not a slice of bytes."],"Name":"Bytes","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueCall","Docs":["Call calls the function v with the input arguments in.","For example, if len(in) == 3, v.Call(in) represents the Go call v(in[0], in[1], in[2]).","Call panics if v's Kind is not Func.","It returns the output results as Values.","As in Go, each input argument must be assignable to the","type of the function's corresponding input parameter.","If v is a variadic function, Call creates the variadic slice parameter","itself, copying in the corresponding values."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Call","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Call","Signature":"func (Value).Call(in []Value) []Value","ID":"FunctionCall","Docs":["Call calls the function v with the input arguments in.","For example, if len(in) == 3, v.Call(in) represents the Go call v(in[0], in[1], in[2]).","Call panics if v's Kind is not Func.","It returns the output results as Values.","As in Go, each input argument must be assignable to the","type of the function's corresponding input parameter.","If v is a variadic function, Call creates the variadic slice parameter","itself, copying in the corresponding values."],"Name":"Call","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"in","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueCallSlice","Docs":["CallSlice calls the variadic function v with the input arguments in,","assigning the slice in[len(in)-1] to v's final variadic argument.","For example, if len(in) == 3, v.CallSlice(in) represents the Go call v(in[0], in[1], in[2]...).","CallSlice panics if v's Kind is not Func or if v is not variadic.","It returns the output results as Values.","As in Go, each input argument must be assignable to the","type of the function's corresponding input parameter."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-CallSlice","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"CallSlice","Signature":"func (Value).CallSlice(in []Value) []Value","ID":"FunctionCallSlice","Docs":["CallSlice calls the variadic function v with the input arguments in,","assigning the slice in[len(in)-1] to v's final variadic argument.","For example, if len(in) == 3, v.CallSlice(in) represents the Go call v(in[0], in[1], in[2]...).","CallSlice panics if v's Kind is not Func or if v is not variadic.","It returns the output results as Values.","As in Go, each input argument must be assignable to the","type of the function's corresponding input parameter."],"Name":"CallSlice","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"in","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueCanAddr","Docs":["CanAddr reports whether the value's address can be obtained with Addr.","Such values are called addressable. A value is addressable if it is","an element of a slice, an element of an addressable array,","a field of an addressable struct, or the result of dereferencing a pointer.","If CanAddr returns false, calling Addr will panic."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-CanAddr","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"CanAddr","Signature":"func (Value).CanAddr() bool","ID":"FunctionCanAddr","Docs":["CanAddr reports whether the value's address can be obtained with Addr.","Such values are called addressable. A value is addressable if it is","an element of a slice, an element of an addressable array,","a field of an addressable struct, or the result of dereferencing a pointer.","If CanAddr returns false, calling Addr will panic."],"Name":"CanAddr","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueCanInterface","Docs":["CanInterface reports whether Interface can be used without panicking."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-CanInterface","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"CanInterface","Signature":"func (Value).CanInterface() bool","ID":"FunctionCanInterface","Docs":["CanInterface reports whether Interface can be used without panicking."],"Name":"CanInterface","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueCanSet","Docs":["CanSet reports whether the value of v can be changed.","A Value can be changed only if it is addressable and was not","obtained by the use of unexported struct fields.","If CanSet returns false, calling Set or any type-specific","setter (e.g., SetBool, SetInt) will panic."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-CanSet","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"CanSet","Signature":"func (Value).CanSet() bool","ID":"FunctionCanSet","Docs":["CanSet reports whether the value of v can be changed.","A Value can be changed only if it is addressable and was not","obtained by the use of unexported struct fields.","If CanSet returns false, calling Set or any type-specific","setter (e.g., SetBool, SetInt) will panic."],"Name":"CanSet","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueCap","Docs":["Cap returns v's capacity.","It panics if v's Kind is not Array, Chan, or Slice."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Cap","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Cap","Signature":"func (Value).Cap() int","ID":"FunctionCap","Docs":["Cap returns v's capacity.","It panics if v's Kind is not Array, Chan, or Slice."],"Name":"Cap","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueClose","Docs":["Close closes the channel v.","It panics if v's Kind is not Chan."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Close","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Close","Signature":"func (Value).Close()","ID":"FunctionClose","Docs":["Close closes the channel v.","It panics if v's Kind is not Chan."],"Name":"Close","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":null}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueComplex","Docs":["Complex returns v's underlying value, as a complex128.","It panics if v's Kind is not Complex64 or Complex128"],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Complex","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Complex","Signature":"func (Value).Complex() complex128","ID":"FunctionComplex","Docs":["Complex returns v's underlying value, as a complex128.","It panics if v's Kind is not Complex64 or Complex128"],"Name":"Complex","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"complex128","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueConvert","Docs":["Convert returns the value v converted to type t.","If the usual Go conversion rules do not allow conversion","of the value v to type t, Convert panics."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from321","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Convert","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Convert","Signature":"func (Value).Convert(t Type) Value","ID":"FunctionConvert","Docs":["Convert returns the value v converted to type t.","If the usual Go conversion rules do not allow conversion","of the value v to type t, Convert panics."],"Name":"Convert","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"t","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into822","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueElem","Docs":["Elem returns the value that the interface v contains","or that the pointer v points to.","It panics if v's Kind is not Interface or Ptr.","It returns the zero Value if v is nil."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Elem","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Elem","Signature":"func (Value).Elem() Value","ID":"FunctionElem","Docs":["Elem returns the value that the interface v contains","or that the pointer v points to.","It panics if v's Kind is not Interface or Ptr.","It returns the zero Value if v is nil."],"Name":"Elem","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueField","Docs":["Field returns the i'th field of the struct v.","It panics if v's Kind is not Struct or i is out of range."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Field","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Field","Signature":"func (Value).Field(i int) Value","ID":"FunctionField","Docs":["Field returns the i'th field of the struct v.","It panics if v's Kind is not Struct or i is out of range."],"Name":"Field","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"i","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueFieldByIndex","Docs":["FieldByIndex returns the nested field corresponding to index.","It panics if v's Kind is not struct."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-FieldByIndex","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"FieldByIndex","Signature":"func (Value).FieldByIndex(index []int) Value","ID":"FunctionFieldByIndex","Docs":["FieldByIndex returns the nested field corresponding to index.","It panics if v's Kind is not struct."],"Name":"FieldByIndex","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"index","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueFieldByName","Docs":["FieldByName returns the struct field with the given name.","It returns the zero Value if no field was found.","It panics if v's Kind is not struct."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-FieldByName","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"FieldByName","Signature":"func (Value).FieldByName(name string) Value","ID":"FunctionFieldByName","Docs":["FieldByName returns the struct field with the given name.","It returns the zero Value if no field was found.","It panics if v's Kind is not struct."],"Name":"FieldByName","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"name","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueFieldByNameFunc","Docs":["FieldByNameFunc returns the struct field with a name","that satisfies the match function.","It panics if v's Kind is not struct.","It returns the zero Value if no field was found."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-FieldByNameFunc","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"FieldByNameFunc","Signature":"func (Value).FieldByNameFunc(match func(string) bool) Value","ID":"FunctionFieldByNameFunc","Docs":["FieldByNameFunc returns the struct field with a name","that satisfies the match function.","It panics if v's Kind is not struct.","It returns the zero Value if no field was found."],"Name":"FieldByNameFunc","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"match","TypeName":"func(string) bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueFloat","Docs":["Float returns v's underlying value, as a float64.","It panics if v's Kind is not Float32 or Float64"],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from717","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Float","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Float","Signature":"func (Value).Float() float64","ID":"FunctionFloat","Docs":["Float returns v's underlying value, as a float64.","It panics if v's Kind is not Float32 or Float64"],"Name":"Float","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into488","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueIndex","Docs":["Index returns v's i'th element.","It panics if v's Kind is not Array, Slice, or String or i is out of range."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Index","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Index","Signature":"func (Value).Index(i int) Value","ID":"FunctionIndex","Docs":["Index returns v's i'th element.","It panics if v's Kind is not Array, Slice, or String or i is out of range."],"Name":"Index","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"i","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueInt","Docs":["Int returns v's underlying value, as an int64.","It panics if v's Kind is not Int, Int8, Int16, Int32, or Int64."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Int","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Int","Signature":"func (Value).Int() int64","ID":"FunctionInt","Docs":["Int returns v's underlying value, as an int64.","It panics if v's Kind is not Int, Int8, Int16, Int32, or Int64."],"Name":"Int","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueInterface","Docs":["Interface returns v's current value as an interface{}.","It is equivalent to:","\tvar i interface{} = (v's underlying value)","It panics if the Value was obtained by accessing","unexported struct fields."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Interface","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Interface","Signature":"func (Value).Interface() (i interface{})","ID":"FunctionInterface","Docs":["Interface returns v's current value as an interface{}.","It is equivalent to:","\tvar i interface{} = (v's underlying value)","It panics if the Value was obtained by accessing","unexported struct fields."],"Name":"Interface","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"i","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueInterfaceData","Docs":["InterfaceData returns the interface v's value as a uintptr pair.","It panics if v's Kind is not Interface."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-InterfaceData","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"InterfaceData","Signature":"func (Value).InterfaceData() [2]uintptr","ID":"FunctionInterfaceData","Docs":["InterfaceData returns the interface v's value as a uintptr pair.","It panics if v's Kind is not Interface."],"Name":"InterfaceData","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"uintptr","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueIsNil","Docs":["IsNil reports whether its argument v is nil. The argument must be","a chan, func, interface, map, pointer, or slice value; if it is","not, IsNil panics. Note that IsNil is not always equivalent to a","regular comparison with nil in Go. For example, if v was created","by calling ValueOf with an uninitialized interface variable i,","i==nil will be true but v.IsNil will panic as v will be the zero","Value."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-IsNil","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"IsNil","Signature":"func (Value).IsNil() bool","ID":"FunctionIsNil","Docs":["IsNil reports whether its argument v is nil. The argument must be","a chan, func, interface, map, pointer, or slice value; if it is","not, IsNil panics. Note that IsNil is not always equivalent to a","regular comparison with nil in Go. For example, if v was created","by calling ValueOf with an uninitialized interface variable i,","i==nil will be true but v.IsNil will panic as v will be the zero","Value."],"Name":"IsNil","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueIsValid","Docs":["IsValid reports whether v represents a value.","It returns false if v is the zero Value.","If IsValid returns false, all other methods except String panic.","Most functions and methods never return an invalid Value.","If one does, its documentation states the conditions explicitly."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-IsValid","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"IsValid","Signature":"func (Value).IsValid() bool","ID":"FunctionIsValid","Docs":["IsValid reports whether v represents a value.","It returns false if v is the zero Value.","If IsValid returns false, all other methods except String panic.","Most functions and methods never return an invalid Value.","If one does, its documentation states the conditions explicitly."],"Name":"IsValid","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueIsZero","Docs":["IsZero reports whether v is the zero value for its type.","It panics if the argument is invalid."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-IsZero","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"IsZero","Signature":"func (Value).IsZero() bool","ID":"FunctionIsZero","Docs":["IsZero reports whether v is the zero value for its type.","It panics if the argument is invalid."],"Name":"IsZero","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueKind","Docs":["Kind returns v's Kind.","If v is the zero Value (IsValid returns false), Kind returns Invalid."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Kind","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Kind","Signature":"func (Value).Kind() Kind","ID":"FunctionKind","Docs":["Kind returns v's Kind.","If v is the zero Value (IsValid returns false), Kind returns Invalid."],"Name":"Kind","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Kind","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Kind","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueLen","Docs":["Len returns v's length.","It panics if v's Kind is not Array, Chan, Map, Slice, or String."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Len","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Len","Signature":"func (Value).Len() int","ID":"FunctionLen","Docs":["Len returns v's length.","It panics if v's Kind is not Array, Chan, Map, Slice, or String."],"Name":"Len","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueMapIndex","Docs":["MapIndex returns the value associated with key in the map v.","It panics if v's Kind is not Map.","It returns the zero Value if key is not found in the map or if v represents a nil map.","As in Go, the key's value must be assignable to the map's key type."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-MapIndex","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MapIndex","Signature":"func (Value).MapIndex(key Value) Value","ID":"FunctionMapIndex","Docs":["MapIndex returns the value associated with key in the map v.","It panics if v's Kind is not Map.","It returns the zero Value if key is not found in the map or if v represents a nil map.","As in Go, the key's value must be assignable to the map's key type."],"Name":"MapIndex","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"key","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueMapKeys","Docs":["MapKeys returns a slice containing all the keys present in the map,","in unspecified order.","It panics if v's Kind is not Map.","It returns an empty slice if v represents a nil map."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-MapKeys","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MapKeys","Signature":"func (Value).MapKeys() []Value","ID":"FunctionMapKeys","Docs":["MapKeys returns a slice containing all the keys present in the map,","in unspecified order.","It panics if v's Kind is not Map.","It returns an empty slice if v represents a nil map."],"Name":"MapKeys","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueMapRange","Docs":["MapRange returns a range iterator for a map.","It panics if v's Kind is not Map.","","Call Next to advance the iterator, and Key/Value to access each entry.","Next returns false when the iterator is exhausted.","MapRange follows the same iteration semantics as a range statement.","","Example:","","\titer := reflect.ValueOf(m).MapRange()","\tfor iter.Next() {","\t\tk := iter.Key()","\t\tv := iter.Value()","\t\t...","\t}"],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-MapRange","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MapRange","Signature":"func (Value).MapRange() *MapIter","ID":"FunctionMapRange","Docs":["MapRange returns a range iterator for a map.","It panics if v's Kind is not Map.","","Call Next to advance the iterator, and Key/Value to access each entry.","Next returns false when the iterator is exhausted.","MapRange follows the same iteration semantics as a range statement.","","Example:","","\titer := reflect.ValueOf(m).MapRange()","\tfor iter.Next() {","\t\tk := iter.Key()","\t\tv := iter.Value()","\t\t...","\t}"],"Name":"MapRange","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"MapIter","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.MapIter","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueMethod","Docs":["Method returns a function value corresponding to v's i'th method.","The arguments to a Call on the returned function should not include","a receiver; the returned function will always use v as the receiver.","Method panics if i is out of range or if v is a nil interface value."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Method","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Method","Signature":"func (Value).Method(i int) Value","ID":"FunctionMethod","Docs":["Method returns a function value corresponding to v's i'th method.","The arguments to a Call on the returned function should not include","a receiver; the returned function will always use v as the receiver.","Method panics if i is out of range or if v is a nil interface value."],"Name":"Method","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"i","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueMethodByName","Docs":["MethodByName returns a function value corresponding to the method","of v with the given name.","The arguments to a Call on the returned function should not include","a receiver; the returned function will always use v as the receiver.","It returns the zero Value if no method was found."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-MethodByName","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MethodByName","Signature":"func (Value).MethodByName(name string) Value","ID":"FunctionMethodByName","Docs":["MethodByName returns a function value corresponding to the method","of v with the given name.","The arguments to a Call on the returned function should not include","a receiver; the returned function will always use v as the receiver.","It returns the zero Value if no method was found."],"Name":"MethodByName","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"name","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueNumField","Docs":["NumField returns the number of fields in the struct v.","It panics if v's Kind is not Struct."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-NumField","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NumField","Signature":"func (Value).NumField() int","ID":"FunctionNumField","Docs":["NumField returns the number of fields in the struct v.","It panics if v's Kind is not Struct."],"Name":"NumField","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueNumMethod","Docs":["NumMethod returns the number of exported methods in the value's method set."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-NumMethod","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NumMethod","Signature":"func (Value).NumMethod() int","ID":"FunctionNumMethod","Docs":["NumMethod returns the number of exported methods in the value's method set."],"Name":"NumMethod","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueOverflowComplex","Docs":["OverflowComplex reports whether the complex128 x cannot be represented by v's type.","It panics if v's Kind is not Complex64 or Complex128."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-OverflowComplex","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"OverflowComplex","Signature":"func (Value).OverflowComplex(x complex128) bool","ID":"FunctionOverflowComplex","Docs":["OverflowComplex reports whether the complex128 x cannot be represented by v's type.","It panics if v's Kind is not Complex64 or Complex128."],"Name":"OverflowComplex","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"complex128","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueOverflowFloat","Docs":["OverflowFloat reports whether the float64 x cannot be represented by v's type.","It panics if v's Kind is not Float32 or Float64."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-OverflowFloat","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"OverflowFloat","Signature":"func (Value).OverflowFloat(x float64) bool","ID":"FunctionOverflowFloat","Docs":["OverflowFloat reports whether the float64 x cannot be represented by v's type.","It panics if v's Kind is not Float32 or Float64."],"Name":"OverflowFloat","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueOverflowInt","Docs":["OverflowInt reports whether the int64 x cannot be represented by v's type.","It panics if v's Kind is not Int, Int8, Int16, Int32, or Int64."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-OverflowInt","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"OverflowInt","Signature":"func (Value).OverflowInt(x int64) bool","ID":"FunctionOverflowInt","Docs":["OverflowInt reports whether the int64 x cannot be represented by v's type.","It panics if v's Kind is not Int, Int8, Int16, Int32, or Int64."],"Name":"OverflowInt","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueOverflowUint","Docs":["OverflowUint reports whether the uint64 x cannot be represented by v's type.","It panics if v's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-OverflowUint","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"OverflowUint","Signature":"func (Value).OverflowUint(x uint64) bool","ID":"FunctionOverflowUint","Docs":["OverflowUint reports whether the uint64 x cannot be represented by v's type.","It panics if v's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64."],"Name":"OverflowUint","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"uint64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValuePointer","Docs":["Pointer returns v's value as a uintptr.","It returns uintptr instead of unsafe.Pointer so that","code using reflect cannot obtain unsafe.Pointers","without importing the unsafe package explicitly.","It panics if v's Kind is not Chan, Func, Map, Ptr, Slice, or UnsafePointer.","","If v's Kind is Func, the returned pointer is an underlying","code pointer, but not necessarily enough to identify a","single function uniquely. The only guarantee is that the","result is zero if and only if v is a nil func Value.","","If v's Kind is Slice, the returned pointer is to the first","element of the slice. If the slice is nil the returned value","is 0.  If the slice is empty but non-nil the return value is non-zero."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from282","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Pointer","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Pointer","Signature":"func (Value).Pointer() uintptr","ID":"FunctionPointer","Docs":["Pointer returns v's value as a uintptr.","It returns uintptr instead of unsafe.Pointer so that","code using reflect cannot obtain unsafe.Pointers","without importing the unsafe package explicitly.","It panics if v's Kind is not Chan, Func, Map, Ptr, Slice, or UnsafePointer.","","If v's Kind is Func, the returned pointer is an underlying","code pointer, but not necessarily enough to identify a","single function uniquely. The only guarantee is that the","result is zero if and only if v is a nil func Value.","","If v's Kind is Slice, the returned pointer is to the first","element of the slice. If the slice is nil the returned value","is 0.  If the slice is empty but non-nil the return value is non-zero."],"Name":"Pointer","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into155","TypeName":"uintptr","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"ValueRecv","Docs":["Recv receives and returns a value from the channel v.","It panics if v's Kind is not Chan.","The receive blocks until a value is ready.","The boolean value ok is true if the value x corresponds to a send","on the channel, false if it is a zero value received because the channel is closed."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Recv","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Recv","Signature":"func (Value).Recv() (x Value, ok bool)","ID":"FunctionRecv","Docs":["Recv receives and returns a value from the channel v.","It panics if v's Kind is not Chan.","The receive blocks until a value is ready.","The boolean value ok is true if the value x corresponds to a send","on the channel, false if it is a zero value received because the channel is closed."],"Name":"Recv","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"x","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"ok","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"ValueSend","Docs":["Send sends x on the channel v.","It panics if v's kind is not Chan or if x's type is not the same type as v's element type.","As in Go, x's value must be assignable to the channel's element type."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Send","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Send","Signature":"func (Value).Send(x Value)","ID":"FunctionSend","Docs":["Send sends x on the channel v.","It panics if v's kind is not Chan or if x's type is not the same type as v's element type.","As in Go, x's value must be assignable to the channel's element type."],"Name":"Send","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"ValueSet","Docs":["Set assigns x to the value v.","It panics if CanSet returns false.","As in Go, x's value must be assignable to v's type."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Set","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Set","Signature":"func (Value).Set(x Value)","ID":"FunctionSet","Docs":["Set assigns x to the value v.","It panics if CanSet returns false.","As in Go, x's value must be assignable to v's type."],"Name":"Set","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"ValueSetBool","Docs":["SetBool sets v's underlying value.","It panics if v's Kind is not Bool or if CanSet() is false."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-SetBool","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetBool","Signature":"func (Value).SetBool(x bool)","ID":"FunctionSetBool","Docs":["SetBool sets v's underlying value.","It panics if v's Kind is not Bool or if CanSet() is false."],"Name":"SetBool","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"ValueSetBytes","Docs":["SetBytes sets v's underlying value.","It panics if v's underlying value is not a slice of bytes."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-SetBytes","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetBytes","Signature":"func (Value).SetBytes(x []byte)","ID":"FunctionSetBytes","Docs":["SetBytes sets v's underlying value.","It panics if v's underlying value is not a slice of bytes."],"Name":"SetBytes","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueSetCap","Docs":["SetCap sets v's capacity to n.","It panics if v's Kind is not Slice or if n is smaller than the length or","greater than the capacity of the slice."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-SetCap","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetCap","Signature":"func (Value).SetCap(n int)","ID":"FunctionSetCap","Docs":["SetCap sets v's capacity to n.","It panics if v's Kind is not Slice or if n is smaller than the length or","greater than the capacity of the slice."],"Name":"SetCap","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"n","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"ValueSetComplex","Docs":["SetComplex sets v's underlying value to x.","It panics if v's Kind is not Complex64 or Complex128, or if CanSet() is false."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-SetComplex","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetComplex","Signature":"func (Value).SetComplex(x complex128)","ID":"FunctionSetComplex","Docs":["SetComplex sets v's underlying value to x.","It panics if v's Kind is not Complex64 or Complex128, or if CanSet() is false."],"Name":"SetComplex","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"complex128","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"ValueSetFloat","Docs":["SetFloat sets v's underlying value to x.","It panics if v's Kind is not Float32 or Float64, or if CanSet() is false."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-SetFloat","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetFloat","Signature":"func (Value).SetFloat(x float64)","ID":"FunctionSetFloat","Docs":["SetFloat sets v's underlying value to x.","It panics if v's Kind is not Float32 or Float64, or if CanSet() is false."],"Name":"SetFloat","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"ValueSetInt","Docs":["SetInt sets v's underlying value to x.","It panics if v's Kind is not Int, Int8, Int16, Int32, or Int64, or if CanSet() is false."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-SetInt","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetInt","Signature":"func (Value).SetInt(x int64)","ID":"FunctionSetInt","Docs":["SetInt sets v's underlying value to x.","It panics if v's Kind is not Int, Int8, Int16, Int32, or Int64, or if CanSet() is false."],"Name":"SetInt","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueSetLen","Docs":["SetLen sets v's length to n.","It panics if v's Kind is not Slice or if n is negative or","greater than the capacity of the slice."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-SetLen","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetLen","Signature":"func (Value).SetLen(n int)","ID":"FunctionSetLen","Docs":["SetLen sets v's length to n.","It panics if v's Kind is not Slice or if n is negative or","greater than the capacity of the slice."],"Name":"SetLen","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"n","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"ValueSetMapIndex","Docs":["SetMapIndex sets the element associated with key in the map v to elem.","It panics if v's Kind is not Map.","If elem is the zero Value, SetMapIndex deletes the key from the map.","Otherwise if v holds a nil map, SetMapIndex will panic.","As in Go, key's elem must be assignable to the map's key type,","and elem's value must be assignable to the map's elem type."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-SetMapIndex","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetMapIndex","Signature":"func (Value).SetMapIndex(key Value, elem Value)","ID":"FunctionSetMapIndex","Docs":["SetMapIndex sets the element associated with key in the map v to elem.","It panics if v's Kind is not Map.","If elem is the zero Value, SetMapIndex deletes the key from the map.","Otherwise if v holds a nil map, SetMapIndex will panic.","As in Go, key's elem must be assignable to the map's key type,","and elem's value must be assignable to the map's elem type."],"Name":"SetMapIndex","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"key","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"elem","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"ValueSetPointer","Docs":["SetPointer sets the unsafe.Pointer value v to x.","It panics if v's Kind is not UnsafePointer."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"into659","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-SetPointer","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetPointer","Signature":"func (Value).SetPointer(x unsafe.Pointer)","ID":"FunctionSetPointer","Docs":["SetPointer sets the unsafe.Pointer value v to x.","It panics if v's Kind is not UnsafePointer."],"Name":"SetPointer","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"Pointer","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"ValueSetString","Docs":["SetString sets v's underlying value to x.","It panics if v's Kind is not String or if CanSet() is false."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-SetString","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetString","Signature":"func (Value).SetString(x string)","ID":"FunctionSetString","Docs":["SetString sets v's underlying value to x.","It panics if v's Kind is not String or if CanSet() is false."],"Name":"SetString","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"ValueSetUint","Docs":["SetUint sets v's underlying value to x.","It panics if v's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64, or if CanSet() is false."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-SetUint","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetUint","Signature":"func (Value).SetUint(x uint64)","ID":"FunctionSetUint","Docs":["SetUint sets v's underlying value to x.","It panics if v's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64, or if CanSet() is false."],"Name":"SetUint","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"uint64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueSlice","Docs":["Slice returns v[i:j].","It panics if v's Kind is not Array, Slice or String, or if v is an unaddressable array,","or if the indexes are out of bounds."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Slice","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Slice","Signature":"func (Value).Slice(i int, j int) Value","ID":"FunctionSlice","Docs":["Slice returns v[i:j].","It panics if v's Kind is not Array, Slice or String, or if v is an unaddressable array,","or if the indexes are out of bounds."],"Name":"Slice","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"i","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"j","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueSlice3","Docs":["Slice3 is the 3-index form of the slice operation: it returns v[i:j:k].","It panics if v's Kind is not Array or Slice, or if v is an unaddressable array,","or if the indexes are out of bounds."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Slice3","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Slice3","Signature":"func (Value).Slice3(i int, j int, k int) Value","ID":"FunctionSlice3","Docs":["Slice3 is the 3-index form of the slice operation: it returns v[i:j:k].","It panics if v's Kind is not Array or Slice, or if v is an unaddressable array,","or if the indexes are out of bounds."],"Name":"Slice3","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"i","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"j","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"k","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueString","Docs":["String returns the string v's underlying value, as a string.","String is a special case because of Go's String method convention.","Unlike the other getters, it does not panic if v's Kind is not String.","Instead, it returns a string of the form \"\u003cT value\u003e\" where T is v's type.","The fmt package treats Values specially. It does not call their String","method implicitly but instead prints the concrete values they hold."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-String","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"String","Signature":"func (Value).String() string","ID":"FunctionString","Docs":["String returns the string v's underlying value, as a string.","String is a special case because of Go's String method convention.","Unlike the other getters, it does not panic if v's Kind is not String.","Instead, it returns a string of the form \"\u003cT value\u003e\" where T is v's type.","The fmt package treats Values specially. It does not call their String","method implicitly but instead prints the concrete values they hold."],"Name":"String","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"ValueTryRecv","Docs":["TryRecv attempts to receive a value from the channel v but will not block.","It panics if v's Kind is not Chan.","If the receive delivers a value, x is the transferred value and ok is true.","If the receive cannot finish without blocking, x is the zero Value and ok is false.","If the channel is closed, x is the zero value for the channel's element type and ok is false."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-TryRecv","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TryRecv","Signature":"func (Value).TryRecv() (x Value, ok bool)","ID":"FunctionTryRecv","Docs":["TryRecv attempts to receive a value from the channel v but will not block.","It panics if v's Kind is not Chan.","If the receive delivers a value, x is the transferred value and ok is true.","If the receive cannot finish without blocking, x is the zero Value and ok is false.","If the channel is closed, x is the zero value for the channel's element type and ok is false."],"Name":"TryRecv","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"x","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"ok","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"ValueTrySend","Docs":["TrySend attempts to send x on the channel v but will not block.","It panics if v's Kind is not Chan.","It reports whether the value was sent.","As in Go, x's value must be assignable to the channel's element type."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-TrySend","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TrySend","Signature":"func (Value).TrySend(x Value) bool","ID":"FunctionTrySend","Docs":["TrySend attempts to send x on the channel v but will not block.","It panics if v's Kind is not Chan.","It reports whether the value was sent.","As in Go, x's value must be assignable to the channel's element type."],"Name":"TrySend","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"x","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueType","Docs":["Type returns v's type."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Type","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Type","Signature":"func (Value).Type() Type","ID":"FunctionType","Docs":["Type returns v's type."],"Name":"Type","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueUint","Docs":["Uint returns v's underlying value, as a uint64.","It panics if v's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-Uint","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Uint","Signature":"func (Value).Uint() uint64","ID":"FunctionUint","Docs":["Uint returns v's underlying value, as a uint64.","It panics if v's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64."],"Name":"Uint","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"uint64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"ValueUnsafeAddr","Docs":["UnsafeAddr returns a pointer to v's data.","It is for advanced clients that also import the \"unsafe\" package.","It panics if v is not addressable."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from842","TypeName":"Value","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Value","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Value-UnsafeAddr","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"UnsafeAddr","Signature":"func (Value).UnsafeAddr() uintptr","ID":"FunctionUnsafeAddr","Docs":["UnsafeAddr returns a pointer to v's data.","It is for advanced clients that also import the \"unsafe\" package.","It panics if v is not addressable."],"Name":"UnsafeAddr","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into833","TypeName":"uintptr","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ValueErrorError","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ValueError","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.ValueError","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ValueError-Error","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Error","Signature":"func (*ValueError).Error() string","ID":"FunctionError","Docs":[],"Name":"Error","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}}],"InterfaceMethods":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeAlign","Docs":["Align returns the alignment in bytes of a value of","this type when allocated in memory."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Align","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-Align","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Align","Signature":"func (Type).Align() int","ID":"FunctionAlign","Docs":["Align returns the alignment in bytes of a value of","this type when allocated in memory."],"Name":"Align","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeAssignableTo","Docs":["AssignableTo reports whether a value of the type is assignable to type u."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.AssignableTo","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-AssignableTo","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"AssignableTo","Signature":"func (Type).AssignableTo(u Type) bool","ID":"FunctionAssignableTo","Docs":["AssignableTo reports whether a value of the type is assignable to type u."],"Name":"AssignableTo","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"u","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeBits","Docs":["Bits returns the size of the type in bits.","It panics if the type's Kind is not one of the","sized or unsized Int, Uint, Float, or Complex kinds."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Bits","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-Bits","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Bits","Signature":"func (Type).Bits() int","ID":"FunctionBits","Docs":["Bits returns the size of the type in bits.","It panics if the type's Kind is not one of the","sized or unsized Int, Uint, Float, or Complex kinds."],"Name":"Bits","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeChanDir","Docs":["ChanDir returns a channel type's direction.","It panics if the type's Kind is not Chan."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.ChanDir","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-ChanDir","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ChanDir","Signature":"func (Type).ChanDir() ChanDir","ID":"FunctionChanDir","Docs":["ChanDir returns a channel type's direction.","It panics if the type's Kind is not Chan."],"Name":"ChanDir","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"ChanDir","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.ChanDir","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeComparable","Docs":["Comparable reports whether values of this type are comparable."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Comparable","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-Comparable","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Comparable","Signature":"func (Type).Comparable() bool","ID":"FunctionComparable","Docs":["Comparable reports whether values of this type are comparable."],"Name":"Comparable","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeConvertibleTo","Docs":["ConvertibleTo reports whether a value of the type is convertible to type u."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.ConvertibleTo","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-ConvertibleTo","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ConvertibleTo","Signature":"func (Type).ConvertibleTo(u Type) bool","ID":"FunctionConvertibleTo","Docs":["ConvertibleTo reports whether a value of the type is convertible to type u."],"Name":"ConvertibleTo","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"u","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeElem","Docs":["Elem returns a type's element type.","It panics if the type's Kind is not Array, Chan, Map, Ptr, or Slice."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Elem","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-Elem","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Elem","Signature":"func (Type).Elem() Type","ID":"FunctionElem","Docs":["Elem returns a type's element type.","It panics if the type's Kind is not Array, Chan, Map, Ptr, or Slice."],"Name":"Elem","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeField","Docs":["Field returns a struct type's i'th field.","It panics if the type's Kind is not Struct.","It panics if i is not in the range [0, NumField())."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Field","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-Field","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Field","Signature":"func (Type).Field(i int) StructField","ID":"FunctionField","Docs":["Field returns a struct type's i'th field.","It panics if the type's Kind is not Struct.","It panics if i is not in the range [0, NumField())."],"Name":"Field","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"i","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"StructField","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.StructField","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeFieldAlign","Docs":["FieldAlign returns the alignment in bytes of a value of","this type when used as a field in a struct."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.FieldAlign","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-FieldAlign","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"FieldAlign","Signature":"func (Type).FieldAlign() int","ID":"FunctionFieldAlign","Docs":["FieldAlign returns the alignment in bytes of a value of","this type when used as a field in a struct."],"Name":"FieldAlign","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeFieldByIndex","Docs":["FieldByIndex returns the nested field corresponding","to the index sequence. It is equivalent to calling Field","successively for each index i.","It panics if the type's Kind is not Struct."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.FieldByIndex","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-FieldByIndex","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"FieldByIndex","Signature":"func (Type).FieldByIndex(index []int) StructField","ID":"FunctionFieldByIndex","Docs":["FieldByIndex returns the nested field corresponding","to the index sequence. It is equivalent to calling Field","successively for each index i.","It panics if the type's Kind is not Struct."],"Name":"FieldByIndex","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"index","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"StructField","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.StructField","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeFieldByName","Docs":["FieldByName returns the struct field with the given name","and a boolean indicating if the field was found."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.FieldByName","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-FieldByName","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"FieldByName","Signature":"func (Type).FieldByName(name string) (StructField, bool)","ID":"FunctionFieldByName","Docs":["FieldByName returns the struct field with the given name","and a boolean indicating if the field was found."],"Name":"FieldByName","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"name","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"StructField","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.StructField","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeFieldByNameFunc","Docs":["FieldByNameFunc returns the struct field with a name","that satisfies the match function and a boolean indicating if","the field was found.","","FieldByNameFunc considers the fields in the struct itself","and then the fields in any embedded structs, in breadth first order,","stopping at the shallowest nesting depth containing one or more","fields satisfying the match function. If multiple fields at that depth","satisfy the match function, they cancel each other","and FieldByNameFunc returns no match.","This behavior mirrors Go's handling of name lookup in","structs containing embedded fields."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.FieldByNameFunc","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-FieldByNameFunc","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"FieldByNameFunc","Signature":"func (Type).FieldByNameFunc(match func(string) bool) (StructField, bool)","ID":"FunctionFieldByNameFunc","Docs":["FieldByNameFunc returns the struct field with a name","that satisfies the match function and a boolean indicating if","the field was found.","","FieldByNameFunc considers the fields in the struct itself","and then the fields in any embedded structs, in breadth first order,","stopping at the shallowest nesting depth containing one or more","fields satisfying the match function. If multiple fields at that depth","satisfy the match function, they cancel each other","and FieldByNameFunc returns no match.","This behavior mirrors Go's handling of name lookup in","structs containing embedded fields."],"Name":"FieldByNameFunc","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"match","TypeName":"func(string) bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"StructField","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.StructField","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeImplements","Docs":["Implements reports whether the type implements the interface type u."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Implements","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-Implements","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Implements","Signature":"func (Type).Implements(u Type) bool","ID":"FunctionImplements","Docs":["Implements reports whether the type implements the interface type u."],"Name":"Implements","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"u","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeIn","Docs":["In returns the type of a function type's i'th input parameter.","It panics if the type's Kind is not Func.","It panics if i is not in the range [0, NumIn())."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.In","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-In","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"In","Signature":"func (Type).In(i int) Type","ID":"FunctionIn","Docs":["In returns the type of a function type's i'th input parameter.","It panics if the type's Kind is not Func.","It panics if i is not in the range [0, NumIn())."],"Name":"In","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"i","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeIsVariadic","Docs":["IsVariadic reports whether a function type's final input parameter","is a \"...\" parameter. If so, t.In(t.NumIn() - 1) returns the parameter's","implicit actual type []T.","","For concreteness, if t represents func(x int, y ... float64), then","","\tt.NumIn() == 2","\tt.In(0) is the reflect.Type for \"int\"","\tt.In(1) is the reflect.Type for \"[]float64\"","\tt.IsVariadic() == true","","IsVariadic panics if the type's Kind is not Func."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.IsVariadic","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-IsVariadic","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"IsVariadic","Signature":"func (Type).IsVariadic() bool","ID":"FunctionIsVariadic","Docs":["IsVariadic reports whether a function type's final input parameter","is a \"...\" parameter. If so, t.In(t.NumIn() - 1) returns the parameter's","implicit actual type []T.","","For concreteness, if t represents func(x int, y ... float64), then","","\tt.NumIn() == 2","\tt.In(0) is the reflect.Type for \"int\"","\tt.In(1) is the reflect.Type for \"[]float64\"","\tt.IsVariadic() == true","","IsVariadic panics if the type's Kind is not Func."],"Name":"IsVariadic","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeKey","Docs":["Key returns a map type's key type.","It panics if the type's Kind is not Map."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Key","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-Key","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Key","Signature":"func (Type).Key() Type","ID":"FunctionKey","Docs":["Key returns a map type's key type.","It panics if the type's Kind is not Map."],"Name":"Key","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeKind","Docs":["Kind returns the specific kind of this type."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Kind","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-Kind","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Kind","Signature":"func (Type).Kind() Kind","ID":"FunctionKind","Docs":["Kind returns the specific kind of this type."],"Name":"Kind","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Kind","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Kind","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeLen","Docs":["Len returns an array type's length.","It panics if the type's Kind is not Array."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Len","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-Len","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Len","Signature":"func (Type).Len() int","ID":"FunctionLen","Docs":["Len returns an array type's length.","It panics if the type's Kind is not Array."],"Name":"Len","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeMethod","Docs":["Method returns the i'th method in the type's method set.","It panics if i is not in the range [0, NumMethod()).","","For a non-interface type T or *T, the returned Method's Type and Func","fields describe a function whose first argument is the receiver.","","For an interface type, the returned Method's Type field gives the","method signature, without a receiver, and the Func field is nil.","","Only exported methods are accessible and they are sorted in","lexicographic order."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Method","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-Method","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Method","Signature":"func (Type).Method(int) Method","ID":"FunctionMethod","Docs":["Method returns the i'th method in the type's method set.","It panics if i is not in the range [0, NumMethod()).","","For a non-interface type T or *T, the returned Method's Type and Func","fields describe a function whose first argument is the receiver.","","For an interface type, the returned Method's Type field gives the","method signature, without a receiver, and the Func field is nil.","","Only exported methods are accessible and they are sorted in","lexicographic order."],"Name":"Method","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Method","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Method","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeMethodByName","Docs":["MethodByName returns the method with that name in the type's","method set and a boolean indicating if the method was found.","","For a non-interface type T or *T, the returned Method's Type and Func","fields describe a function whose first argument is the receiver.","","For an interface type, the returned Method's Type field gives the","method signature, without a receiver, and the Func field is nil."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.MethodByName","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-MethodByName","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MethodByName","Signature":"func (Type).MethodByName(string) (Method, bool)","ID":"FunctionMethodByName","Docs":["MethodByName returns the method with that name in the type's","method set and a boolean indicating if the method was found.","","For a non-interface type T or *T, the returned Method's Type and Func","fields describe a function whose first argument is the receiver.","","For an interface type, the returned Method's Type field gives the","method signature, without a receiver, and the Func field is nil."],"Name":"MethodByName","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Method","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Method","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeName","Docs":["Name returns the type's name within its package for a defined type.","For other (non-defined) types it returns the empty string."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Name","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-Name","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Name","Signature":"func (Type).Name() string","ID":"FunctionName","Docs":["Name returns the type's name within its package for a defined type.","For other (non-defined) types it returns the empty string."],"Name":"Name","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeNumField","Docs":["NumField returns a struct type's field count.","It panics if the type's Kind is not Struct."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.NumField","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-NumField","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NumField","Signature":"func (Type).NumField() int","ID":"FunctionNumField","Docs":["NumField returns a struct type's field count.","It panics if the type's Kind is not Struct."],"Name":"NumField","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeNumIn","Docs":["NumIn returns a function type's input parameter count.","It panics if the type's Kind is not Func."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.NumIn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-NumIn","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NumIn","Signature":"func (Type).NumIn() int","ID":"FunctionNumIn","Docs":["NumIn returns a function type's input parameter count.","It panics if the type's Kind is not Func."],"Name":"NumIn","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeNumMethod","Docs":["NumMethod returns the number of exported methods in the type's method set."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.NumMethod","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-NumMethod","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NumMethod","Signature":"func (Type).NumMethod() int","ID":"FunctionNumMethod","Docs":["NumMethod returns the number of exported methods in the type's method set."],"Name":"NumMethod","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeNumOut","Docs":["NumOut returns a function type's output parameter count.","It panics if the type's Kind is not Func."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.NumOut","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-NumOut","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NumOut","Signature":"func (Type).NumOut() int","ID":"FunctionNumOut","Docs":["NumOut returns a function type's output parameter count.","It panics if the type's Kind is not Func."],"Name":"NumOut","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeOut","Docs":["Out returns the type of a function type's i'th output parameter.","It panics if the type's Kind is not Func.","It panics if i is not in the range [0, NumOut())."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Out","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-Out","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Out","Signature":"func (Type).Out(i int) Type","ID":"FunctionOut","Docs":["Out returns the type of a function type's i'th output parameter.","It panics if the type's Kind is not Func.","It panics if i is not in the range [0, NumOut())."],"Name":"Out","PkgPath":"reflect","PkgName":"reflect","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"i","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Type","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypePkgPath","Docs":["PkgPath returns a defined type's package path, that is, the import path","that uniquely identifies the package, such as \"encoding/base64\".","If the type was predeclared (string, error) or not defined (*T, struct{},","[]int, or A where A is an alias for a non-defined type), the package path","will be the empty string."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.PkgPath","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-PkgPath","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"PkgPath","Signature":"func (Type).PkgPath() string","ID":"FunctionPkgPath","Docs":["PkgPath returns a defined type's package path, that is, the import path","that uniquely identifies the package, such as \"encoding/base64\".","If the type was predeclared (string, error) or not defined (*T, struct{},","[]int, or A where A is an alias for a non-defined type), the package path","will be the empty string."],"Name":"PkgPath","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeSize","Docs":["Size returns the number of bytes needed to store","a value of the given type; it is analogous to unsafe.Sizeof."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.Size","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-Size","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Size","Signature":"func (Type).Size() uintptr","ID":"FunctionSize","Docs":["Size returns the number of bytes needed to store","a value of the given type; it is analogous to unsafe.Sizeof."],"Name":"Size","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"uintptr","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TypeString","Docs":["String returns a string representation of the type.","The string representation may use shortened package names","(e.g., base64 instead of \"encoding/base64\") and is not","guaranteed to be unique among types. To test for type identity,","compare the Types directly."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Type","PkgName":"reflect","PkgPath":"reflect","QualifiedName":"reflect.String","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Type-String","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"String","Signature":"func (Type).String() string","ID":"FunctionString","Docs":["String returns a string representation of the type.","The string representation may use shortened package names","(e.g., base64 instead of \"encoding/base64\") and is not","guaranteed to be unique among types. To test for type identity,","compare the Types directly."],"Name":"String","PkgPath":"reflect","PkgName":"reflect","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}}]}