{"Name":"cipher","PkgPath":"crypto/cipher","PkgName":"cipher","ID":"crypto/cipher","Funcs":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewCBCDecrypter","Signature":"func NewCBCDecrypter(b Block, iv []byte) BlockMode","ID":"FunctionNewCBCDecrypter","Docs":["NewCBCDecrypter returns a BlockMode which decrypts in cipher block chaining","mode, using the given Block. The length of iv must be the same as the","Block's block size and must match the iv used to encrypt the data."],"Name":"NewCBCDecrypter","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"b","TypeName":"Block","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.Block","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"iv","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"BlockMode","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.BlockMode","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewCBCEncrypter","Signature":"func NewCBCEncrypter(b Block, iv []byte) BlockMode","ID":"FunctionNewCBCEncrypter","Docs":["NewCBCEncrypter returns a BlockMode which encrypts in cipher block chaining","mode, using the given Block. The length of iv must be the same as the","Block's block size."],"Name":"NewCBCEncrypter","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"b","TypeName":"Block","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.Block","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"iv","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"BlockMode","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.BlockMode","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewCFBDecrypter","Signature":"func NewCFBDecrypter(block Block, iv []byte) Stream","ID":"FunctionNewCFBDecrypter","Docs":["NewCFBDecrypter returns a Stream which decrypts with cipher feedback mode,","using the given Block. The iv must be the same length as the Block's block","size."],"Name":"NewCFBDecrypter","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"block","TypeName":"Block","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.Block","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"iv","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Stream","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.Stream","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewCFBEncrypter","Signature":"func NewCFBEncrypter(block Block, iv []byte) Stream","ID":"FunctionNewCFBEncrypter","Docs":["NewCFBEncrypter returns a Stream which encrypts with cipher feedback mode,","using the given Block. The iv must be the same length as the Block's block","size."],"Name":"NewCFBEncrypter","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"block","TypeName":"Block","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.Block","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"iv","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Stream","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.Stream","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewCTR","Signature":"func NewCTR(block Block, iv []byte) Stream","ID":"FunctionNewCTR","Docs":["NewCTR returns a Stream which encrypts/decrypts using the given Block in","counter mode. The length of iv must be the same as the Block's block size."],"Name":"NewCTR","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"block","TypeName":"Block","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.Block","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"iv","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Stream","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.Stream","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewGCM","Signature":"func NewGCM(cipher Block) (AEAD, error)","ID":"FunctionNewGCM","Docs":["NewGCM returns the given 128-bit, block cipher wrapped in Galois Counter Mode","with the standard nonce length.","","In general, the GHASH operation performed by this implementation of GCM is not constant-time.","An exception is when the underlying Block was created by aes.NewCipher","on systems with hardware support for AES. See the crypto/aes package documentation for details."],"Name":"NewGCM","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"cipher","TypeName":"Block","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.Block","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"AEAD","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.AEAD","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewGCMWithNonceSize","Signature":"func NewGCMWithNonceSize(cipher Block, size int) (AEAD, error)","ID":"FunctionNewGCMWithNonceSize","Docs":["NewGCMWithNonceSize returns the given 128-bit, block cipher wrapped in Galois","Counter Mode, which accepts nonces of the given length. The length must not","be zero.","","Only use this function if you require compatibility with an existing","cryptosystem that uses non-standard nonce lengths. All other users should use","NewGCM, which is faster and more resistant to misuse."],"Name":"NewGCMWithNonceSize","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"cipher","TypeName":"Block","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.Block","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"size","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"AEAD","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.AEAD","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewGCMWithTagSize","Signature":"func NewGCMWithTagSize(cipher Block, tagSize int) (AEAD, error)","ID":"FunctionNewGCMWithTagSize","Docs":["NewGCMWithTagSize returns the given 128-bit, block cipher wrapped in Galois","Counter Mode, which generates tags with the given length.","","Tag sizes between 12 and 16 bytes are allowed.","","Only use this function if you require compatibility with an existing","cryptosystem that uses non-standard tag lengths. All other users should use","NewGCM, which is more resistant to misuse."],"Name":"NewGCMWithTagSize","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"cipher","TypeName":"Block","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.Block","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"tagSize","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"AEAD","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.AEAD","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewOFB","Signature":"func NewOFB(b Block, iv []byte) Stream","ID":"FunctionNewOFB","Docs":["NewOFB returns a Stream that encrypts or decrypts using the block cipher b","in output feedback mode. The initialization vector iv's length must be equal","to b's block size."],"Name":"NewOFB","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"b","TypeName":"Block","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.Block","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"iv","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Stream","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.Stream","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}],"TypeMethods":[{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0}}},"ClassName":"StreamReaderRead","Docs":[],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"StreamReader","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.StreamReader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-StreamReader-Read","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Read","Signature":"func (StreamReader).Read(dst []byte) (n int, err error)","ID":"FunctionRead","Docs":[],"Name":"Read","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"dst","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"n","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"err","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"StreamWriterClose","Docs":["Close closes the underlying Writer and returns its Close return value, if the Writer","is also an io.Closer. Otherwise it returns nil."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"StreamWriter","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.StreamWriter","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-StreamWriter-Close","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Close","Signature":"func (StreamWriter).Close() error","ID":"FunctionClose","Docs":["Close closes the underlying Writer and returns its Close return value, if the Writer","is also an io.Closer. Otherwise it returns nil."],"Name":"Close","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"StreamWriterWrite","Docs":[],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"StreamWriter","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.StreamWriter","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-StreamWriter-Write","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Write","Signature":"func (StreamWriter).Write(src []byte) (n int, err error)","ID":"FunctionWrite","Docs":[],"Name":"Write","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"src","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"n","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"err","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}}],"InterfaceMethods":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BlockModeBlockSize","Docs":["BlockSize returns the mode's block size."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"BlockMode","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.BlockSize","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-BlockMode-BlockSize","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BlockSize","Signature":"func (BlockMode).BlockSize() int","ID":"FunctionBlockSize","Docs":["BlockSize returns the mode's block size."],"Name":"BlockSize","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BlockBlockSize","Docs":["BlockSize returns the cipher's block size."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Block","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.BlockSize","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Block-BlockSize","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BlockSize","Signature":"func (Block).BlockSize() int","ID":"FunctionBlockSize","Docs":["BlockSize returns the cipher's block size."],"Name":"BlockSize","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0}}},"ClassName":"BlockModeCryptBlocks","Docs":["CryptBlocks encrypts or decrypts a number of blocks. The length of","src must be a multiple of the block size. Dst and src must overlap","entirely or not at all.","","If len(dst) \u003c len(src), CryptBlocks should panic. It is acceptable","to pass a dst bigger than src, and in that case, CryptBlocks will","only update dst[:len(src)] and will not touch the rest of dst.","","Multiple calls to CryptBlocks behave as if the concatenation of","the src buffers was passed in a single run. That is, BlockMode","maintains state and does not reset at each CryptBlocks call."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"BlockMode","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.CryptBlocks","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-BlockMode-CryptBlocks","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"CryptBlocks","Signature":"func (BlockMode).CryptBlocks(dst []byte, src []byte)","ID":"FunctionCryptBlocks","Docs":["CryptBlocks encrypts or decrypts a number of blocks. The length of","src must be a multiple of the block size. Dst and src must overlap","entirely or not at all.","","If len(dst) \u003c len(src), CryptBlocks should panic. It is acceptable","to pass a dst bigger than src, and in that case, CryptBlocks will","only update dst[:len(src)] and will not touch the rest of dst.","","Multiple calls to CryptBlocks behave as if the concatenation of","the src buffers was passed in a single run. That is, BlockMode","maintains state and does not reset at each CryptBlocks call."],"Name":"CryptBlocks","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"dst","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"src","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":null}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0}}},"ClassName":"BlockDecrypt","Docs":["Decrypt decrypts the first block in src into dst.","Dst and src must overlap entirely or not at all."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Block","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.Decrypt","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Block-Decrypt","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Decrypt","Signature":"func (Block).Decrypt(dst []byte, src []byte)","ID":"FunctionDecrypt","Docs":["Decrypt decrypts the first block in src into dst.","Dst and src must overlap entirely or not at all."],"Name":"Decrypt","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"dst","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"src","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":null}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0}}},"ClassName":"BlockEncrypt","Docs":["Encrypt encrypts the first block in src into dst.","Dst and src must overlap entirely or not at all."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Block","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.Encrypt","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Block-Encrypt","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Encrypt","Signature":"func (Block).Encrypt(dst []byte, src []byte)","ID":"FunctionEncrypt","Docs":["Encrypt encrypts the first block in src into dst.","Dst and src must overlap entirely or not at all."],"Name":"Encrypt","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"dst","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"src","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"AEADNonceSize","Docs":["NonceSize returns the size of the nonce that must be passed to Seal","and Open."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"AEAD","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.NonceSize","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-AEAD-NonceSize","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NonceSize","Signature":"func (AEAD).NonceSize() int","ID":"FunctionNonceSize","Docs":["NonceSize returns the size of the nonce that must be passed to Seal","and Open."],"Name":"NonceSize","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"AEADOpen","Docs":["Open decrypts and authenticates ciphertext, authenticates the","additional data and, if successful, appends the resulting plaintext","to dst, returning the updated slice. The nonce must be NonceSize()","bytes long and both it and the additional data must match the","value passed to Seal.","","To reuse ciphertext's storage for the decrypted output, use ciphertext[:0]","as dst. Otherwise, the remaining capacity of dst must not overlap plaintext.","","Even if the function fails, the contents of dst, up to its capacity,","may be overwritten."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"AEAD","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.Open","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-AEAD-Open","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Open","Signature":"func (AEAD).Open(dst []byte, nonce []byte, ciphertext []byte, additionalData []byte) ([]byte, error)","ID":"FunctionOpen","Docs":["Open decrypts and authenticates ciphertext, authenticates the","additional data and, if successful, appends the resulting plaintext","to dst, returning the updated slice. The nonce must be NonceSize()","bytes long and both it and the additional data must match the","value passed to Seal.","","To reuse ciphertext's storage for the decrypted output, use ciphertext[:0]","as dst. Otherwise, the remaining capacity of dst must not overlap plaintext.","","Even if the function fails, the contents of dst, up to its capacity,","may be overwritten."],"Name":"Open","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"dst","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"nonce","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"ciphertext","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(3)","Element":"parameter","Index":3},"VarName":"additionalData","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"AEADOverhead","Docs":["Overhead returns the maximum difference between the lengths of a","plaintext and its ciphertext."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"AEAD","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.Overhead","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-AEAD-Overhead","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Overhead","Signature":"func (AEAD).Overhead() int","ID":"FunctionOverhead","Docs":["Overhead returns the maximum difference between the lengths of a","plaintext and its ciphertext."],"Name":"Overhead","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"AEADSeal","Docs":["Seal encrypts and authenticates plaintext, authenticates the","additional data and appends the result to dst, returning the updated","slice. The nonce must be NonceSize() bytes long and unique for all","time, for a given key.","","To reuse plaintext's storage for the encrypted output, use plaintext[:0]","as dst. Otherwise, the remaining capacity of dst must not overlap plaintext."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"AEAD","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.Seal","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-AEAD-Seal","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Seal","Signature":"func (AEAD).Seal(dst []byte, nonce []byte, plaintext []byte, additionalData []byte) []byte","ID":"FunctionSeal","Docs":["Seal encrypts and authenticates plaintext, authenticates the","additional data and appends the result to dst, returning the updated","slice. The nonce must be NonceSize() bytes long and unique for all","time, for a given key.","","To reuse plaintext's storage for the encrypted output, use plaintext[:0]","as dst. Otherwise, the remaining capacity of dst must not overlap plaintext."],"Name":"Seal","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"dst","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"nonce","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"plaintext","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(3)","Element":"parameter","Index":3},"VarName":"additionalData","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0}}},"ClassName":"StreamXORKeyStream","Docs":["XORKeyStream XORs each byte in the given slice with a byte from the","cipher's key stream. Dst and src must overlap entirely or not at all.","","If len(dst) \u003c len(src), XORKeyStream should panic. It is acceptable","to pass a dst bigger than src, and in that case, XORKeyStream will","only update dst[:len(src)] and will not touch the rest of dst.","","Multiple calls to XORKeyStream behave as if the concatenation of","the src buffers was passed in a single run. That is, Stream","maintains state and does not reset at each XORKeyStream call."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Stream","PkgName":"cipher","PkgPath":"crypto/cipher","QualifiedName":"crypto/cipher.XORKeyStream","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-Stream-XORKeyStream","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"XORKeyStream","Signature":"func (Stream).XORKeyStream(dst []byte, src []byte)","ID":"FunctionXORKeyStream","Docs":["XORKeyStream XORs each byte in the given slice with a byte from the","cipher's key stream. Dst and src must overlap entirely or not at all.","","If len(dst) \u003c len(src), XORKeyStream should panic. It is acceptable","to pass a dst bigger than src, and in that case, XORKeyStream will","only update dst[:len(src)] and will not touch the rest of dst.","","Multiple calls to XORKeyStream behave as if the concatenation of","the src buffers was passed in a single run. That is, Stream","maintains state and does not reset at each XORKeyStream call."],"Name":"XORKeyStream","PkgPath":"crypto/cipher","PkgName":"cipher","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"dst","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"src","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":null}}]}