{"Name":"httptest","PkgPath":"net/http/httptest","PkgName":"httptest","ID":"net/http/httptest","Funcs":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewRecorder","Signature":"func NewRecorder() *ResponseRecorder","ID":"FunctionNewRecorder","Docs":["NewRecorder returns an initialized ResponseRecorder."],"Name":"NewRecorder","PkgPath":"net/http/httptest","PkgName":"httptest","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"ResponseRecorder","PkgName":"httptest","PkgPath":"net/http/httptest","QualifiedName":"net/http/httptest.ResponseRecorder","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewRequest","Signature":"func NewRequest(method string, target string, body io.Reader) *net/http.Request","ID":"FunctionNewRequest","Docs":["NewRequest returns a new incoming server Request, suitable","for passing to an http.Handler for testing.","","The target is the RFC 7230 \"request-target\": it may be either a","path or an absolute URL. If target is an absolute URL, the host name","from the URL is used. Otherwise, \"example.com\" is used.","","The TLS field is set to a non-nil dummy value if target has scheme","\"https\".","","The Request.Proto is always HTTP/1.1.","","An empty method means \"GET\".","","The provided body may be nil. If the body is of type *bytes.Reader,","*strings.Reader, or *bytes.Buffer, the Request.ContentLength is","set.","","NewRequest panics on error for ease of use in testing, where a","panic is acceptable.","","To generate a client HTTP request instead of a server request, see","the NewRequest function in the net/http package."],"Name":"NewRequest","PkgPath":"net/http/httptest","PkgName":"httptest","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"method","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"target","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"body","TypeName":"Reader","PkgName":"io","PkgPath":"io","QualifiedName":"io.Reader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Request","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Request","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewServer","Signature":"func NewServer(handler net/http.Handler) *Server","ID":"FunctionNewServer","Docs":["NewServer starts and returns a new Server.","The caller should call Close when finished, to shut it down."],"Name":"NewServer","PkgPath":"net/http/httptest","PkgName":"httptest","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"handler","TypeName":"Handler","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Handler","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Server","PkgName":"httptest","PkgPath":"net/http/httptest","QualifiedName":"net/http/httptest.Server","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewTLSServer","Signature":"func NewTLSServer(handler net/http.Handler) *Server","ID":"FunctionNewTLSServer","Docs":["NewTLSServer starts and returns a new Server using TLS.","The caller should call Close when finished, to shut it down."],"Name":"NewTLSServer","PkgPath":"net/http/httptest","PkgName":"httptest","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"handler","TypeName":"Handler","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Handler","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Server","PkgName":"httptest","PkgPath":"net/http/httptest","QualifiedName":"net/http/httptest.Server","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewUnstartedServer","Signature":"func NewUnstartedServer(handler net/http.Handler) *Server","ID":"FunctionNewUnstartedServer","Docs":["NewUnstartedServer returns a new Server but doesn't start it.","","After changing its configuration, the caller should call Start or","StartTLS.","","The caller should call Close when finished, to shut it down."],"Name":"NewUnstartedServer","PkgPath":"net/http/httptest","PkgName":"httptest","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"handler","TypeName":"Handler","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Handler","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Server","PkgName":"httptest","PkgPath":"net/http/httptest","QualifiedName":"net/http/httptest.Server","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}],"TypeMethods":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ResponseRecorderFlush","Docs":["Flush implements http.Flusher. To test whether Flush was","called, see rw.Flushed."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ResponseRecorder","PkgName":"httptest","PkgPath":"net/http/httptest","QualifiedName":"net/http/httptest.ResponseRecorder","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ResponseRecorder-Flush","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Flush","Signature":"func (*ResponseRecorder).Flush()","ID":"FunctionFlush","Docs":["Flush implements http.Flusher. To test whether Flush was","called, see rw.Flushed."],"Name":"Flush","PkgPath":"net/http/httptest","PkgName":"httptest","Parameters":null,"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ResponseRecorderHeader","Docs":["Header implements http.ResponseWriter. It returns the response","headers to mutate within a handler. To test the headers that were","written after a handler completes, use the Result method and see","the returned Response value's Header."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ResponseRecorder","PkgName":"httptest","PkgPath":"net/http/httptest","QualifiedName":"net/http/httptest.ResponseRecorder","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ResponseRecorder-Header","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Header","Signature":"func (*ResponseRecorder).Header() net/http.Header","ID":"FunctionHeader","Docs":["Header implements http.ResponseWriter. It returns the response","headers to mutate within a handler. To test the headers that were","written after a handler completes, use the Result method and see","the returned Response value's Header."],"Name":"Header","PkgPath":"net/http/httptest","PkgName":"httptest","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Header","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Header","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ResponseRecorderResult","Docs":["Result returns the response generated by the handler.","","The returned Response will have at least its StatusCode,","Header, Body, and optionally Trailer populated.","More fields may be populated in the future, so callers should","not DeepEqual the result in tests.","","The Response.Header is a snapshot of the headers at the time of the","first write call, or at the time of this call, if the handler never","did a write.","","The Response.Body is guaranteed to be non-nil and Body.Read call is","guaranteed to not return any error other than io.EOF.","","Result must only be called after the handler has finished running."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ResponseRecorder","PkgName":"httptest","PkgPath":"net/http/httptest","QualifiedName":"net/http/httptest.ResponseRecorder","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ResponseRecorder-Result","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Result","Signature":"func (*ResponseRecorder).Result() *net/http.Response","ID":"FunctionResult","Docs":["Result returns the response generated by the handler.","","The returned Response will have at least its StatusCode,","Header, Body, and optionally Trailer populated.","More fields may be populated in the future, so callers should","not DeepEqual the result in tests.","","The Response.Header is a snapshot of the headers at the time of the","first write call, or at the time of this call, if the handler never","did a write.","","The Response.Body is guaranteed to be non-nil and Body.Read call is","guaranteed to not return any error other than io.EOF.","","Result must only be called after the handler has finished running."],"Name":"Result","PkgPath":"net/http/httptest","PkgName":"httptest","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Response","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Response","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ResponseRecorderWrite","Docs":["Write implements http.ResponseWriter. The data in buf is written to","rw.Body, if not nil."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ResponseRecorder","PkgName":"httptest","PkgPath":"net/http/httptest","QualifiedName":"net/http/httptest.ResponseRecorder","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ResponseRecorder-Write","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Write","Signature":"func (*ResponseRecorder).Write(buf []byte) (int, error)","ID":"FunctionWrite","Docs":["Write implements http.ResponseWriter. The data in buf is written to","rw.Body, if not nil."],"Name":"Write","PkgPath":"net/http/httptest","PkgName":"httptest","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"buf","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ResponseRecorderWriteHeader","Docs":["WriteHeader implements http.ResponseWriter."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ResponseRecorder","PkgName":"httptest","PkgPath":"net/http/httptest","QualifiedName":"net/http/httptest.ResponseRecorder","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ResponseRecorder-WriteHeader","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"WriteHeader","Signature":"func (*ResponseRecorder).WriteHeader(code int)","ID":"FunctionWriteHeader","Docs":["WriteHeader implements http.ResponseWriter."],"Name":"WriteHeader","PkgPath":"net/http/httptest","PkgName":"httptest","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"code","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ResponseRecorderWriteString","Docs":["WriteString implements io.StringWriter. The data in str is written","to rw.Body, if not nil."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ResponseRecorder","PkgName":"httptest","PkgPath":"net/http/httptest","QualifiedName":"net/http/httptest.ResponseRecorder","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ResponseRecorder-WriteString","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"WriteString","Signature":"func (*ResponseRecorder).WriteString(str string) (int, error)","ID":"FunctionWriteString","Docs":["WriteString implements io.StringWriter. The data in str is written","to rw.Body, if not nil."],"Name":"WriteString","PkgPath":"net/http/httptest","PkgName":"httptest","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"str","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerCertificate","Docs":["Certificate returns the certificate used by the server, or nil if","the server doesn't use TLS."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Server","PkgName":"httptest","PkgPath":"net/http/httptest","QualifiedName":"net/http/httptest.Server","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Server-Certificate","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Certificate","Signature":"func (*Server).Certificate() *crypto/x509.Certificate","ID":"FunctionCertificate","Docs":["Certificate returns the certificate used by the server, or nil if","the server doesn't use TLS."],"Name":"Certificate","PkgPath":"net/http/httptest","PkgName":"httptest","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Certificate","PkgName":"x509","PkgPath":"crypto/x509","QualifiedName":"crypto/x509.Certificate","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerClient","Docs":["Client returns an HTTP client configured for making requests to the server.","It is configured to trust the server's TLS test certificate and will","close its idle connections on Server.Close."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Server","PkgName":"httptest","PkgPath":"net/http/httptest","QualifiedName":"net/http/httptest.Server","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Server-Client","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Client","Signature":"func (*Server).Client() *net/http.Client","ID":"FunctionClient","Docs":["Client returns an HTTP client configured for making requests to the server.","It is configured to trust the server's TLS test certificate and will","close its idle connections on Server.Close."],"Name":"Client","PkgPath":"net/http/httptest","PkgName":"httptest","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Client","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Client","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerClose","Docs":["Close shuts down the server and blocks until all outstanding","requests on this server have completed."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Server","PkgName":"httptest","PkgPath":"net/http/httptest","QualifiedName":"net/http/httptest.Server","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Server-Close","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Close","Signature":"func (*Server).Close()","ID":"FunctionClose","Docs":["Close shuts down the server and blocks until all outstanding","requests on this server have completed."],"Name":"Close","PkgPath":"net/http/httptest","PkgName":"httptest","Parameters":null,"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerCloseClientConnections","Docs":["CloseClientConnections closes any open HTTP connections to the test Server."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Server","PkgName":"httptest","PkgPath":"net/http/httptest","QualifiedName":"net/http/httptest.Server","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Server-CloseClientConnections","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"CloseClientConnections","Signature":"func (*Server).CloseClientConnections()","ID":"FunctionCloseClientConnections","Docs":["CloseClientConnections closes any open HTTP connections to the test Server."],"Name":"CloseClientConnections","PkgPath":"net/http/httptest","PkgName":"httptest","Parameters":null,"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerStart","Docs":["Start starts a server from NewUnstartedServer."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Server","PkgName":"httptest","PkgPath":"net/http/httptest","QualifiedName":"net/http/httptest.Server","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Server-Start","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Start","Signature":"func (*Server).Start()","ID":"FunctionStart","Docs":["Start starts a server from NewUnstartedServer."],"Name":"Start","PkgPath":"net/http/httptest","PkgName":"httptest","Parameters":null,"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerStartTLS","Docs":["StartTLS starts TLS on a server from NewUnstartedServer."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Server","PkgName":"httptest","PkgPath":"net/http/httptest","QualifiedName":"net/http/httptest.Server","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Server-StartTLS","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"StartTLS","Signature":"func (*Server).StartTLS()","ID":"FunctionStartTLS","Docs":["StartTLS starts TLS on a server from NewUnstartedServer."],"Name":"StartTLS","PkgPath":"net/http/httptest","PkgName":"httptest","Parameters":null,"Results":null}}],"InterfaceMethods":[]}