{"Name":"ed25519","PkgPath":"crypto/ed25519","PkgName":"ed25519","ID":"crypto/ed25519","Funcs":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"GenerateKey","Signature":"func GenerateKey(rand io.Reader) (PublicKey, PrivateKey, error)","ID":"FunctionGenerateKey","Docs":["GenerateKey generates a public/private key pair using entropy from rand.","If rand is nil, crypto/rand.Reader will be used."],"Name":"GenerateKey","PkgPath":"crypto/ed25519","PkgName":"ed25519","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"rand","TypeName":"Reader","PkgName":"io","PkgPath":"io","QualifiedName":"io.Reader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"PublicKey","PkgName":"ed25519","PkgPath":"crypto/ed25519","QualifiedName":"crypto/ed25519.PublicKey","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"PrivateKey","PkgName":"ed25519","PkgPath":"crypto/ed25519","QualifiedName":"crypto/ed25519.PrivateKey","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(2)","Element":"result","Index":2},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewKeyFromSeed","Signature":"func NewKeyFromSeed(seed []byte) PrivateKey","ID":"FunctionNewKeyFromSeed","Docs":["NewKeyFromSeed calculates a private key from a seed. It will panic if","len(seed) is not SeedSize. This function is provided for interoperability","with RFC 8032. RFC 8032's private keys correspond to seeds in this","package."],"Name":"NewKeyFromSeed","PkgPath":"crypto/ed25519","PkgName":"ed25519","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"seed","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"PrivateKey","PkgName":"ed25519","PkgPath":"crypto/ed25519","QualifiedName":"crypto/ed25519.PrivateKey","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"Sign","Signature":"func Sign(privateKey PrivateKey, message []byte) []byte","ID":"FunctionSign","Docs":["Sign signs the message with privateKey and returns a signature. It will","panic if len(privateKey) is not PrivateKeySize."],"Name":"Sign","PkgPath":"crypto/ed25519","PkgName":"ed25519","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"privateKey","TypeName":"PrivateKey","PkgName":"ed25519","PkgPath":"crypto/ed25519","QualifiedName":"crypto/ed25519.PrivateKey","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"message","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into222","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Verify","Signature":"func Verify(publicKey PublicKey, message []byte, sig []byte) bool","ID":"FunctionVerify","Docs":["Verify reports whether sig is a valid signature of message by publicKey. It","will panic if len(publicKey) is not PublicKeySize."],"Name":"Verify","PkgPath":"crypto/ed25519","PkgName":"ed25519","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"publicKey","TypeName":"PublicKey","PkgName":"ed25519","PkgPath":"crypto/ed25519","QualifiedName":"crypto/ed25519.PublicKey","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"message","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"sig","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}],"TypeMethods":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"PrivateKeyPublic","Docs":["Public returns the PublicKey corresponding to priv."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"PrivateKey","PkgName":"ed25519","PkgPath":"crypto/ed25519","QualifiedName":"crypto/ed25519.PrivateKey","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-PrivateKey-Public","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Public","Signature":"func (PrivateKey).Public() crypto.PublicKey","ID":"FunctionPublic","Docs":["Public returns the PublicKey corresponding to priv."],"Name":"Public","PkgPath":"crypto/ed25519","PkgName":"ed25519","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"PublicKey","PkgName":"crypto","PkgPath":"crypto","QualifiedName":"crypto.PublicKey","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"PrivateKeySeed","Docs":["Seed returns the private key seed corresponding to priv. It is provided for","interoperability with RFC 8032. RFC 8032's private keys correspond to seeds","in this package."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"PrivateKey","PkgName":"ed25519","PkgPath":"crypto/ed25519","QualifiedName":"crypto/ed25519.PrivateKey","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-PrivateKey-Seed","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Seed","Signature":"func (PrivateKey).Seed() []byte","ID":"FunctionSeed","Docs":["Seed returns the private key seed corresponding to priv. It is provided for","interoperability with RFC 8032. RFC 8032's private keys correspond to seeds","in this package."],"Name":"Seed","PkgPath":"crypto/ed25519","PkgName":"ed25519","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"PrivateKeySign","Docs":["Sign signs the given message with priv.","Ed25519 performs two passes over messages to be signed and therefore cannot","handle pre-hashed messages. Thus opts.HashFunc() must return zero to","indicate the message hasn't been hashed. This can be achieved by passing","crypto.Hash(0) as the value for opts."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"PrivateKey","PkgName":"ed25519","PkgPath":"crypto/ed25519","QualifiedName":"crypto/ed25519.PrivateKey","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-PrivateKey-Sign","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Sign","Signature":"func (PrivateKey).Sign(rand io.Reader, message []byte, opts crypto.SignerOpts) (signature []byte, err error)","ID":"FunctionSign","Docs":["Sign signs the given message with priv.","Ed25519 performs two passes over messages to be signed and therefore cannot","handle pre-hashed messages. Thus opts.HashFunc() must return zero to","indicate the message hasn't been hashed. This can be achieved by passing","crypto.Hash(0) as the value for opts."],"Name":"Sign","PkgPath":"crypto/ed25519","PkgName":"ed25519","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"rand","TypeName":"Reader","PkgName":"io","PkgPath":"io","QualifiedName":"io.Reader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"message","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"opts","TypeName":"SignerOpts","PkgName":"crypto","PkgPath":"crypto","QualifiedName":"crypto.SignerOpts","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"signature","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"err","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}}],"InterfaceMethods":[]}