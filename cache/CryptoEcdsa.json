{"Name":"ecdsa","PkgPath":"crypto/ecdsa","PkgName":"ecdsa","ID":"crypto/ecdsa","Funcs":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"GenerateKey","Signature":"func GenerateKey(c crypto/elliptic.Curve, rand io.Reader) (*PrivateKey, error)","ID":"FunctionGenerateKey","Docs":["GenerateKey generates a public and private key pair."],"Name":"GenerateKey","PkgPath":"crypto/ecdsa","PkgName":"ecdsa","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"c","TypeName":"Curve","PkgName":"elliptic","PkgPath":"crypto/elliptic","QualifiedName":"crypto/elliptic.Curve","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"rand","TypeName":"Reader","PkgName":"io","PkgPath":"io","QualifiedName":"io.Reader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"PrivateKey","PkgName":"ecdsa","PkgPath":"crypto/ecdsa","QualifiedName":"crypto/ecdsa.PrivateKey","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Sign","Signature":"func Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r *math/big.Int, s *math/big.Int, err error)","ID":"FunctionSign","Docs":["Sign signs a hash (which should be the result of hashing a larger message)","using the private key, priv. If the hash is longer than the bit-length of the","private key's curve order, the hash will be truncated to that length.  It","returns the signature as a pair of integers. The security of the private key","depends on the entropy of rand."],"Name":"Sign","PkgPath":"crypto/ecdsa","PkgName":"ecdsa","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"rand","TypeName":"Reader","PkgName":"io","PkgPath":"io","QualifiedName":"io.Reader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"priv","TypeName":"PrivateKey","PkgName":"ecdsa","PkgPath":"crypto/ecdsa","QualifiedName":"crypto/ecdsa.PrivateKey","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"hash","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"r","TypeName":"Int","PkgName":"big","PkgPath":"math/big","QualifiedName":"math/big.Int","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"s","TypeName":"Int","PkgName":"big","PkgPath":"math/big","QualifiedName":"math/big.Int","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(2)","Element":"result","Index":2},"VarName":"err","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Verify","Signature":"func Verify(pub *PublicKey, hash []byte, r *math/big.Int, s *math/big.Int) bool","ID":"FunctionVerify","Docs":["Verify verifies the signature in r, s of hash using the public key, pub. Its","return value records whether the signature is valid."],"Name":"Verify","PkgPath":"crypto/ecdsa","PkgName":"ecdsa","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"pub","TypeName":"PublicKey","PkgName":"ecdsa","PkgPath":"crypto/ecdsa","QualifiedName":"crypto/ecdsa.PublicKey","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"hash","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"r","TypeName":"Int","PkgName":"big","PkgPath":"math/big","QualifiedName":"math/big.Int","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(3)","Element":"parameter","Index":3},"VarName":"s","TypeName":"Int","PkgName":"big","PkgPath":"math/big","QualifiedName":"math/big.Int","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}],"TypeMethods":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"PrivateKeyPublic","Docs":["Public returns the public key corresponding to priv."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"PrivateKey","PkgName":"ecdsa","PkgPath":"crypto/ecdsa","QualifiedName":"crypto/ecdsa.PrivateKey","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-PrivateKey-Public","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Public","Signature":"func (*PrivateKey).Public() crypto.PublicKey","ID":"FunctionPublic","Docs":["Public returns the public key corresponding to priv."],"Name":"Public","PkgPath":"crypto/ecdsa","PkgName":"ecdsa","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"PublicKey","PkgName":"crypto","PkgPath":"crypto","QualifiedName":"crypto.PublicKey","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"PrivateKeySign","Docs":["Sign signs digest with priv, reading randomness from rand. The opts argument","is not currently used but, in keeping with the crypto.Signer interface,","should be the hash function used to digest the message.","","This method implements crypto.Signer, which is an interface to support keys","where the private part is kept in, for example, a hardware module. Common","uses should use the Sign function in this package directly."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"PrivateKey","PkgName":"ecdsa","PkgPath":"crypto/ecdsa","QualifiedName":"crypto/ecdsa.PrivateKey","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-PrivateKey-Sign","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Sign","Signature":"func (*PrivateKey).Sign(rand io.Reader, digest []byte, opts crypto.SignerOpts) ([]byte, error)","ID":"FunctionSign","Docs":["Sign signs digest with priv, reading randomness from rand. The opts argument","is not currently used but, in keeping with the crypto.Signer interface,","should be the hash function used to digest the message.","","This method implements crypto.Signer, which is an interface to support keys","where the private part is kept in, for example, a hardware module. Common","uses should use the Sign function in this package directly."],"Name":"Sign","PkgPath":"crypto/ecdsa","PkgName":"ecdsa","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"rand","TypeName":"Reader","PkgName":"io","PkgPath":"io","QualifiedName":"io.Reader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"digest","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"opts","TypeName":"SignerOpts","PkgName":"crypto","PkgPath":"crypto","QualifiedName":"crypto.SignerOpts","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"into486","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}}],"InterfaceMethods":[]}