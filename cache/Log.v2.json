{
   "func (*Logger).Fatal(v ...interface{})": {
      "GeneratedClass": "\n    private class LoggerFatal extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Logger).Fatal(v ...interface{})\n      LoggerFatal() { this.(Method).hasQualifiedName(\"log\", \"Logger\", \"Fatal\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(_)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(_)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true
            ],
            "Outp": [
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Logger).Fatalf(format string, v ...interface{})": {
      "GeneratedClass": "\n    private class LoggerFatalf extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Logger).Fatalf(format string, v ...interface{})\n      LoggerFatalf() { this.(Method).hasQualifiedName(\"log\", \"Logger\", \"Fatalf\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(_)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(_)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true,
               true
            ],
            "Outp": [
               true,
               false,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Logger).Fatalln(v ...interface{})": {
      "GeneratedClass": "\n    private class LoggerFatalln extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Logger).Fatalln(v ...interface{})\n      LoggerFatalln() { this.(Method).hasQualifiedName(\"log\", \"Logger\", \"Fatalln\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(_)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(_)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true
            ],
            "Outp": [
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Logger).Flags() int": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Logger).Output(calldepth int, s string) error": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Logger).Panic(v ...interface{})": {
      "GeneratedClass": "\n    private class LoggerPanic extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Logger).Panic(v ...interface{})\n      LoggerPanic() { this.(Method).hasQualifiedName(\"log\", \"Logger\", \"Panic\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(_)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(_)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true
            ],
            "Outp": [
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Logger).Panicf(format string, v ...interface{})": {
      "GeneratedClass": "\n    private class LoggerPanicf extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Logger).Panicf(format string, v ...interface{})\n      LoggerPanicf() { this.(Method).hasQualifiedName(\"log\", \"Logger\", \"Panicf\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(_)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(_)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true,
               true
            ],
            "Outp": [
               true,
               false,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Logger).Panicln(v ...interface{})": {
      "GeneratedClass": "\n    private class LoggerPanicln extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Logger).Panicln(v ...interface{})\n      LoggerPanicln() { this.(Method).hasQualifiedName(\"log\", \"Logger\", \"Panicln\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(_)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(_)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true
            ],
            "Outp": [
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Logger).Prefix() string": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Logger).Print(v ...interface{})": {
      "GeneratedClass": "\n    private class LoggerPrint extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Logger).Print(v ...interface{})\n      LoggerPrint() { this.(Method).hasQualifiedName(\"log\", \"Logger\", \"Print\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(_)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(_)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true
            ],
            "Outp": [
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Logger).Printf(format string, v ...interface{})": {
      "GeneratedClass": "\n    private class LoggerPrintf extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Logger).Printf(format string, v ...interface{})\n      LoggerPrintf() { this.(Method).hasQualifiedName(\"log\", \"Logger\", \"Printf\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(_)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(_)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true,
               true
            ],
            "Outp": [
               true,
               false,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Logger).Println(v ...interface{})": {
      "GeneratedClass": "\n    private class LoggerPrintln extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Logger).Println(v ...interface{})\n      LoggerPrintln() { this.(Method).hasQualifiedName(\"log\", \"Logger\", \"Println\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(_)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(_)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true
            ],
            "Outp": [
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Logger).SetFlags(flag int)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Logger).SetOutput(w io.Writer)": {
      "GeneratedClass": "\n    private class LoggerSetOutput extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Logger).SetOutput(w io.Writer)\n      LoggerSetOutput() { this.(Method).hasQualifiedName(\"log\", \"Logger\", \"SetOutput\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isParameter(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isParameter(0)))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Logger).SetPrefix(prefix string)": {
      "GeneratedClass": "\n    private class LoggerSetPrefix extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Logger).SetPrefix(prefix string)\n      LoggerSetPrefix() { this.(Method).hasQualifiedName(\"log\", \"Logger\", \"SetPrefix\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true
            ],
            "Outp": [
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Logger).Writer() io.Writer": {
      "GeneratedClass": "\n    private class LoggerWriter extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Logger).Writer() io.Writer\n      LoggerWriter() { this.(Method).hasQualifiedName(\"log\", \"Logger\", \"Writer\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isResult()) and (outp.isReceiver()))\n        or\n        ((inp.isReceiver()) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isResult()) and (outp.isReceiver()))\n        or\n        ((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true
            ],
            "Outp": [
               true,
               false
            ]
         },
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func Fatal(v ...interface{})": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false
            ],
            "Outp": [
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Fatalf(format string, v ...interface{})": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Fatalln(v ...interface{})": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false
            ],
            "Outp": [
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Flags() int": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false
            ],
            "Outp": [
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func New(out io.Writer, prefix string, flag int) *Logger": {
      "GeneratedClass": "\n    private class New extends TaintTracking::FunctionModel {\n      // signature: func New(out io.Writer, prefix string, flag int) *Logger\n      New() { hasQualifiedName(\"log\", \"New\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isResult()) and (outp.isParameter(0)))\n      }\n    }",
      "GeneratedConditions": "((inp.isResult()) and (outp.isParameter(0)))",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false,
               true
            ],
            "Outp": [
               true,
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func Output(calldepth int, s string) error": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Panic(v ...interface{})": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false
            ],
            "Outp": [
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Panicf(format string, v ...interface{})": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Panicln(v ...interface{})": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false
            ],
            "Outp": [
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Prefix() string": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false
            ],
            "Outp": [
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Print(v ...interface{})": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false
            ],
            "Outp": [
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Printf(format string, v ...interface{})": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Println(v ...interface{})": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false
            ],
            "Outp": [
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func SetFlags(flag int)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false
            ],
            "Outp": [
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func SetOutput(w io.Writer)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false
            ],
            "Outp": [
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func SetPrefix(prefix string)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false
            ],
            "Outp": [
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Writer() io.Writer": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false
            ],
            "Outp": [
               false
            ]
         }
      ],
      "IsEnabled": false
   }
}
