{
   "func (*Float).Add(delta float64)": {
      "GeneratedClass": "",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true
            ],
            "Outp": [
               true,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Float).Set(value float64)": {
      "GeneratedClass": "",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true
            ],
            "Outp": [
               true,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Float).String() string": {
      "GeneratedClass": "\n    private class FloatString extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Float).String() string\n      FloatString() { this.(Method).hasQualifiedName(\"expvar\", \"Float\", \"String\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Float).Value() float64": {
      "GeneratedClass": "",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Int).Add(delta int64)": {
      "GeneratedClass": "",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true
            ],
            "Outp": [
               true,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Int).Set(value int64)": {
      "GeneratedClass": "",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true
            ],
            "Outp": [
               true,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Int).String() string": {
      "GeneratedClass": "\n    private class IntString extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Int).String() string\n      IntString() { this.(Method).hasQualifiedName(\"expvar\", \"Int\", \"String\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Int).Value() int64": {
      "GeneratedClass": "",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Map).Add(key string, delta int64)": {
      "GeneratedClass": "",
      "GeneratedConditions": "((inp.isParameter(1)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               true
            ],
            "Outp": [
               true,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Map).AddFloat(key string, delta float64)": {
      "GeneratedClass": "",
      "GeneratedConditions": "((inp.isParameter(1)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               false,
               true
            ],
            "Outp": [
               true,
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Map).Delete(key string)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Map).Do(f func(KeyValue))": {
      "GeneratedClass": "\n    private class MapDo extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Map).Do(f func(KeyValue))\n      MapDo() { this.(Method).hasQualifiedName(\"expvar\", \"Map\", \"Do\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true
            ],
            "Outp": [
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Map).Get(key string) Var": {
      "GeneratedClass": "\n    private class MapGet extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Map).Get(key string) Var\n      MapGet() { this.(Method).hasQualifiedName(\"expvar\", \"Map\", \"Get\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false,
               false
            ],
            "Outp": [
               false,
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Map).Init() *Map": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func (*Map).Set(key string, av Var)": {
      "GeneratedClass": "\n    private class MapSet extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Map).Set(key string, av Var)\n      MapSet() { this.(Method).hasQualifiedName(\"expvar\", \"Map\", \"Set\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(_)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(_)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true,
               true
            ],
            "Outp": [
               true,
               false,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*Map).String() string": {
      "GeneratedClass": "\n    private class MapString extends TaintTracking::FunctionModel, Method {\n      // signature: func (*Map).String() string\n      MapString() { this.(Method).hasQualifiedName(\"expvar\", \"Map\", \"String\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*String).Set(value string)": {
      "GeneratedClass": "\n    private class StringSet extends TaintTracking::FunctionModel, Method {\n      // signature: func (*String).Set(value string)\n      StringSet() { this.(Method).hasQualifiedName(\"expvar\", \"String\", \"Set\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isReceiver()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isReceiver()))",
      "Blocks": [
         {
            "Inp": [
               false,
               true
            ],
            "Outp": [
               true,
               false
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*String).String() string": {
      "GeneratedClass": "\n    private class StringString extends TaintTracking::FunctionModel, Method {\n      // signature: func (*String).String() string\n      StringString() { this.(Method).hasQualifiedName(\"expvar\", \"String\", \"String\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (*String).Value() string": {
      "GeneratedClass": "\n    private class StringValue extends TaintTracking::FunctionModel, Method {\n      // signature: func (*String).Value() string\n      StringValue() { this.(Method).hasQualifiedName(\"expvar\", \"String\", \"Value\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (Func).String() string": {
      "GeneratedClass": "\n    private class FuncString extends TaintTracking::FunctionModel, Method {\n      // signature: func (Func).String() string\n      FuncString() { this.(Method).hasQualifiedName(\"expvar\", \"Func\", \"String\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (Func).Value() interface{}": {
      "GeneratedClass": "\n    private class FuncValue extends TaintTracking::FunctionModel, Method {\n      // signature: func (Func).Value() interface{}\n      FuncValue() { this.(Method).hasQualifiedName(\"expvar\", \"Func\", \"Value\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func (Var).String() string": {
      "GeneratedClass": "\n    private class VarString extends TaintTracking::FunctionModel, Method {\n      // signature: func (Var).String() string\n      VarString() {\n        this.implements(\"expvar\", \"Var\", \"String\")\n      }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isReceiver()) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isReceiver()) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func Do(f func(KeyValue))": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false
            ],
            "Outp": [
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Get(name string) Var": {
      "GeneratedClass": "\n    private class Get extends TaintTracking::FunctionModel {\n      // signature: func Get(name string) Var\n      Get() { hasQualifiedName(\"expvar\", \"Get\") }\n\n      override predicate hasTaintFlow(FunctionInput inp, FunctionOutput outp) {\n        ((inp.isParameter(0)) and (outp.isResult()))\n      }\n    }",
      "GeneratedConditions": "((inp.isParameter(0)) and (outp.isResult()))",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": true
   },
   "func Handler() net/http.Handler": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false
            ],
            "Outp": [
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func NewFloat(name string) *Float": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               true,
               false
            ],
            "Outp": [
               false,
               true
            ]
         }
      ],
      "IsEnabled": false
   },
   "func NewInt(name string) *Int": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func NewMap(name string) *Map": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func NewString(name string) *String": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   },
   "func Publish(name string, v Var)": {
      "GeneratedClass": "",
      "GeneratedConditions": "",
      "Blocks": [
         {
            "Inp": [
               false,
               false
            ],
            "Outp": [
               false,
               false
            ]
         }
      ],
      "IsEnabled": false
   }
}
