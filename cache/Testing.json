{"Name":"testing","PkgPath":"testing","PkgName":"testing","ID":"testing","Funcs":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"AllocsPerRun","Signature":"func AllocsPerRun(runs int, f func()) (avg float64)","ID":"FunctionAllocsPerRun","Docs":["AllocsPerRun returns the average number of allocations during calls to f.","Although the return value has type float64, it will always be an integral value.","","To compute the number of allocations, the function will first be run once as","a warm-up. The average number of allocations over the specified number of","runs will then be measured and returned.","","AllocsPerRun sets GOMAXPROCS to 1 during its measurement and will restore","it before returning."],"Name":"AllocsPerRun","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"runs","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"f","TypeName":"func()","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"avg","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Benchmark","Signature":"func Benchmark(f func(b *B)) BenchmarkResult","ID":"FunctionBenchmark","Docs":["Benchmark benchmarks a single function. It is useful for creating","custom benchmarks that do not use the \"go test\" command.","","If f depends on testing flags, then Init must be used to register","those flags before calling Benchmark and before calling flag.Parse.","","If f calls Run, the result will be an estimate of running all its","subbenchmarks that don't call Run in sequence in a single benchmark."],"Name":"Benchmark","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"f","TypeName":"func(b *testing.B)","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"BenchmarkResult","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.BenchmarkResult","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"CoverMode","Signature":"func CoverMode() string","ID":"FunctionCoverMode","Docs":["CoverMode reports what the test coverage mode is set to. The","values are \"set\", \"count\", or \"atomic\". The return value will be","empty if test coverage is not enabled."],"Name":"CoverMode","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Coverage","Signature":"func Coverage() float64","ID":"FunctionCoverage","Docs":["Coverage reports the current code coverage as a fraction in the range [0, 1].","If coverage is not enabled, Coverage returns 0.","","When running a large set of sequential test cases, checking Coverage after each one","can be useful for identifying which test cases exercise new code paths.","It is not a replacement for the reports generated by 'go test -cover' and","'go tool cover'."],"Name":"Coverage","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Init","Signature":"func Init()","ID":"FunctionInit","Docs":["Init registers testing flags. These flags are automatically registered by","the \"go test\" command before running test functions, so Init is only needed","when calling functions such as Benchmark without using \"go test\".","","Init has no effect if it was already called."],"Name":"Init","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":null},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Main","Signature":"func Main(matchString func(pat string, str string) (bool, error), tests []InternalTest, benchmarks []InternalBenchmark, examples []InternalExample)","ID":"FunctionMain","Docs":["Main is an internal function, part of the implementation of the \"go test\" command.","It was exported because it is cross-package and predates \"internal\" packages.","It is no longer used by \"go test\" but preserved, as much as possible, for other","systems that simulate \"go test\" using Main, but Main sometimes cannot be updated as","new functionality is added to the testing package.","Systems simulating \"go test\" should be updated to use MainStart."],"Name":"Main","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"matchString","TypeName":"func(pat string, str string) (bool, error)","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"tests","TypeName":"InternalTest","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.InternalTest","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"benchmarks","TypeName":"InternalBenchmark","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.InternalBenchmark","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(3)","Element":"parameter","Index":3},"VarName":"examples","TypeName":"InternalExample","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.InternalExample","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":null},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MainStart","Signature":"func MainStart(deps testDeps, tests []InternalTest, benchmarks []InternalBenchmark, examples []InternalExample) *M","ID":"FunctionMainStart","Docs":["MainStart is meant for use by tests generated by 'go test'.","It is not meant to be called directly and is not subject to the Go 1 compatibility document.","It may change signature from release to release."],"Name":"MainStart","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"deps","TypeName":"testDeps","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.testDeps","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"tests","TypeName":"InternalTest","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.InternalTest","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(2)","Element":"parameter","Index":2},"VarName":"benchmarks","TypeName":"InternalBenchmark","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.InternalBenchmark","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isParameter(3)","Element":"parameter","Index":3},"VarName":"examples","TypeName":"InternalExample","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.InternalExample","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"M","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.M","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RegisterCover","Signature":"func RegisterCover(c Cover)","ID":"FunctionRegisterCover","Docs":["RegisterCover records the coverage data accumulators for the tests.","NOTE: This function is internal to the testing infrastructure and may change.","It is not covered (yet) by the Go 1 compatibility guidelines."],"Name":"RegisterCover","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"c","TypeName":"Cover","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.Cover","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}],"Results":null},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RunBenchmarks","Signature":"func RunBenchmarks(matchString func(pat string, str string) (bool, error), benchmarks []InternalBenchmark)","ID":"FunctionRunBenchmarks","Docs":["RunBenchmarks is an internal function but exported because it is cross-package;","it is part of the implementation of the \"go test\" command."],"Name":"RunBenchmarks","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"matchString","TypeName":"func(pat string, str string) (bool, error)","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"benchmarks","TypeName":"InternalBenchmark","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.InternalBenchmark","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":null},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RunExamples","Signature":"func RunExamples(matchString func(pat string, str string) (bool, error), examples []InternalExample) (ok bool)","ID":"FunctionRunExamples","Docs":["RunExamples is an internal function but exported because it is cross-package;","it is part of the implementation of the \"go test\" command."],"Name":"RunExamples","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"matchString","TypeName":"func(pat string, str string) (bool, error)","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"examples","TypeName":"InternalExample","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.InternalExample","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"ok","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RunTests","Signature":"func RunTests(matchString func(pat string, str string) (bool, error), tests []InternalTest) (ok bool)","ID":"FunctionRunTests","Docs":["RunTests is an internal function but exported because it is cross-package;","it is part of the implementation of the \"go test\" command."],"Name":"RunTests","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"matchString","TypeName":"func(pat string, str string) (bool, error)","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"tests","TypeName":"InternalTest","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.InternalTest","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"ok","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Short","Signature":"func Short() bool","ID":"FunctionShort","Docs":["Short reports whether the -test.short flag is set."],"Name":"Short","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Verbose","Signature":"func Verbose() bool","ID":"FunctionVerbose","Docs":["Verbose reports whether the -test.v flag is set."],"Name":"Verbose","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}],"TypeMethods":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BReportAllocs","Docs":["ReportAllocs enables malloc statistics for this benchmark.","It is equivalent to setting -test.benchmem, but it only affects the","benchmark function that calls ReportAllocs."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"B","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.B","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-B-ReportAllocs","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ReportAllocs","Signature":"func (*B).ReportAllocs()","ID":"FunctionReportAllocs","Docs":["ReportAllocs enables malloc statistics for this benchmark.","It is equivalent to setting -test.benchmem, but it only affects the","benchmark function that calls ReportAllocs."],"Name":"ReportAllocs","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BReportMetric","Docs":["ReportMetric adds \"n unit\" to the reported benchmark results.","If the metric is per-iteration, the caller should divide by b.N,","and by convention units should end in \"/op\".","ReportMetric overrides any previously reported value for the same unit.","ReportMetric panics if unit is the empty string or if unit contains","any whitespace.","If unit is a unit normally reported by the benchmark framework itself","(such as \"allocs/op\"), ReportMetric will override that metric.","Setting \"ns/op\" to 0 will suppress that built-in metric."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"B","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.B","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-B-ReportMetric","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ReportMetric","Signature":"func (*B).ReportMetric(n float64, unit string)","ID":"FunctionReportMetric","Docs":["ReportMetric adds \"n unit\" to the reported benchmark results.","If the metric is per-iteration, the caller should divide by b.N,","and by convention units should end in \"/op\".","ReportMetric overrides any previously reported value for the same unit.","ReportMetric panics if unit is the empty string or if unit contains","any whitespace.","If unit is a unit normally reported by the benchmark framework itself","(such as \"allocs/op\"), ReportMetric will override that metric.","Setting \"ns/op\" to 0 will suppress that built-in metric."],"Name":"ReportMetric","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"n","TypeName":"float64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"unit","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BResetTimer","Docs":["ResetTimer zeroes the elapsed benchmark time and memory allocation counters","and deletes user-reported metrics.","It does not affect whether the timer is running."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"B","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.B","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-B-ResetTimer","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ResetTimer","Signature":"func (*B).ResetTimer()","ID":"FunctionResetTimer","Docs":["ResetTimer zeroes the elapsed benchmark time and memory allocation counters","and deletes user-reported metrics.","It does not affect whether the timer is running."],"Name":"ResetTimer","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BRun","Docs":["Run benchmarks f as a subbenchmark with the given name. It reports","whether there were any failures.","","A subbenchmark is like any other benchmark. A benchmark that calls Run at","least once will not be measured itself and will be called once with N=1."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"B","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.B","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-B-Run","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Run","Signature":"func (*B).Run(name string, f func(b *B)) bool","ID":"FunctionRun","Docs":["Run benchmarks f as a subbenchmark with the given name. It reports","whether there were any failures.","","A subbenchmark is like any other benchmark. A benchmark that calls Run at","least once will not be measured itself and will be called once with N=1."],"Name":"Run","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"name","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"f","TypeName":"func(b *testing.B)","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BRunParallel","Docs":["RunParallel runs a benchmark in parallel.","It creates multiple goroutines and distributes b.N iterations among them.","The number of goroutines defaults to GOMAXPROCS. To increase parallelism for","non-CPU-bound benchmarks, call SetParallelism before RunParallel.","RunParallel is usually used with the go test -cpu flag.","","The body function will be run in each goroutine. It should set up any","goroutine-local state and then iterate until pb.Next returns false.","It should not use the StartTimer, StopTimer, or ResetTimer functions,","because they have global effect. It should also not call Run."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"B","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.B","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-B-RunParallel","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RunParallel","Signature":"func (*B).RunParallel(body func(*PB))","ID":"FunctionRunParallel","Docs":["RunParallel runs a benchmark in parallel.","It creates multiple goroutines and distributes b.N iterations among them.","The number of goroutines defaults to GOMAXPROCS. To increase parallelism for","non-CPU-bound benchmarks, call SetParallelism before RunParallel.","RunParallel is usually used with the go test -cpu flag.","","The body function will be run in each goroutine. It should set up any","goroutine-local state and then iterate until pb.Next returns false.","It should not use the StartTimer, StopTimer, or ResetTimer functions,","because they have global effect. It should also not call Run."],"Name":"RunParallel","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"body","TypeName":"func(*testing.PB)","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BSetBytes","Docs":["SetBytes records the number of bytes processed in a single operation.","If this is called, the benchmark will report ns/op and MB/s."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"B","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.B","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-B-SetBytes","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetBytes","Signature":"func (*B).SetBytes(n int64)","ID":"FunctionSetBytes","Docs":["SetBytes records the number of bytes processed in a single operation.","If this is called, the benchmark will report ns/op and MB/s."],"Name":"SetBytes","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"n","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BSetParallelism","Docs":["SetParallelism sets the number of goroutines used by RunParallel to p*GOMAXPROCS.","There is usually no need to call SetParallelism for CPU-bound benchmarks.","If p is less than 1, this call will have no effect."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"B","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.B","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-B-SetParallelism","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetParallelism","Signature":"func (*B).SetParallelism(p int)","ID":"FunctionSetParallelism","Docs":["SetParallelism sets the number of goroutines used by RunParallel to p*GOMAXPROCS.","There is usually no need to call SetParallelism for CPU-bound benchmarks.","If p is less than 1, this call will have no effect."],"Name":"SetParallelism","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"p","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BStartTimer","Docs":["StartTimer starts timing a test. This function is called automatically","before a benchmark starts, but it can also be used to resume timing after","a call to StopTimer."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"B","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.B","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-B-StartTimer","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"StartTimer","Signature":"func (*B).StartTimer()","ID":"FunctionStartTimer","Docs":["StartTimer starts timing a test. This function is called automatically","before a benchmark starts, but it can also be used to resume timing after","a call to StopTimer."],"Name":"StartTimer","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BStopTimer","Docs":["StopTimer stops timing a test. This can be used to pause the timer","while performing complex initialization that you don't","want to measure."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"B","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.B","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-B-StopTimer","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"StopTimer","Signature":"func (*B).StopTimer()","ID":"FunctionStopTimer","Docs":["StopTimer stops timing a test. This can be used to pause the timer","while performing complex initialization that you don't","want to measure."],"Name":"StopTimer","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BenchmarkResultAllocedBytesPerOp","Docs":["AllocedBytesPerOp returns the \"B/op\" metric,","which is calculated as r.MemBytes / r.N."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"BenchmarkResult","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.BenchmarkResult","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-BenchmarkResult-AllocedBytesPerOp","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"AllocedBytesPerOp","Signature":"func (BenchmarkResult).AllocedBytesPerOp() int64","ID":"FunctionAllocedBytesPerOp","Docs":["AllocedBytesPerOp returns the \"B/op\" metric,","which is calculated as r.MemBytes / r.N."],"Name":"AllocedBytesPerOp","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BenchmarkResultAllocsPerOp","Docs":["AllocsPerOp returns the \"allocs/op\" metric,","which is calculated as r.MemAllocs / r.N."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"BenchmarkResult","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.BenchmarkResult","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-BenchmarkResult-AllocsPerOp","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"AllocsPerOp","Signature":"func (BenchmarkResult).AllocsPerOp() int64","ID":"FunctionAllocsPerOp","Docs":["AllocsPerOp returns the \"allocs/op\" metric,","which is calculated as r.MemAllocs / r.N."],"Name":"AllocsPerOp","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BenchmarkResultMemString","Docs":["MemString returns r.AllocedBytesPerOp and r.AllocsPerOp in the same format as 'go test'."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"BenchmarkResult","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.BenchmarkResult","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-BenchmarkResult-MemString","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MemString","Signature":"func (BenchmarkResult).MemString() string","ID":"FunctionMemString","Docs":["MemString returns r.AllocedBytesPerOp and r.AllocsPerOp in the same format as 'go test'."],"Name":"MemString","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BenchmarkResultNsPerOp","Docs":["NsPerOp returns the \"ns/op\" metric."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"BenchmarkResult","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.BenchmarkResult","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-BenchmarkResult-NsPerOp","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NsPerOp","Signature":"func (BenchmarkResult).NsPerOp() int64","ID":"FunctionNsPerOp","Docs":["NsPerOp returns the \"ns/op\" metric."],"Name":"NsPerOp","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"BenchmarkResultString","Docs":["String returns a summary of the benchmark results.","It follows the benchmark result line format from","https://golang.org/design/14313-benchmark-format, not including the","benchmark name.","Extra metrics override built-in metrics of the same name.","String does not include allocs/op or B/op, since those are reported","by MemString."],"IsOnPtr":false,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"BenchmarkResult","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.BenchmarkResult","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-BenchmarkResult-String","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"String","Signature":"func (BenchmarkResult).String() string","ID":"FunctionString","Docs":["String returns a summary of the benchmark results.","It follows the benchmark result line format from","https://golang.org/design/14313-benchmark-format, not including the","benchmark name.","Extra metrics override built-in metrics of the same name.","String does not include allocs/op or B/op, since those are reported","by MemString."],"Name":"String","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"MRun","Docs":["Run runs the tests. It returns an exit code to pass to os.Exit."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"M","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.M","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-M-Run","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Run","Signature":"func (*M).Run() int","ID":"FunctionRun","Docs":["Run runs the tests. It returns an exit code to pass to os.Exit."],"Name":"Run","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"PBNext","Docs":["Next reports whether there are more iterations to execute."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"PB","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.PB","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-PB-Next","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Next","Signature":"func (*PB).Next() bool","ID":"FunctionNext","Docs":["Next reports whether there are more iterations to execute."],"Name":"Next","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TParallel","Docs":["Parallel signals that this test is to be run in parallel with (and only with)","other parallel tests. When a test is run multiple times due to use of","-test.count or -test.cpu, multiple instances of a single test never run in","parallel with each other."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"T","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.T","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-T-Parallel","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Parallel","Signature":"func (*T).Parallel()","ID":"FunctionParallel","Docs":["Parallel signals that this test is to be run in parallel with (and only with)","other parallel tests. When a test is run multiple times due to use of","-test.count or -test.cpu, multiple instances of a single test never run in","parallel with each other."],"Name":"Parallel","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TRun","Docs":["Run runs f as a subtest of t called name. It runs f in a separate goroutine","and blocks until f returns or calls t.Parallel to become a parallel test.","Run reports whether f succeeded (or at least did not fail before calling t.Parallel).","","Run may be called simultaneously from multiple goroutines, but all such calls","must return before the outer test function for t returns."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"T","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.T","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-T-Run","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Run","Signature":"func (*T).Run(name string, f func(t *T)) bool","ID":"FunctionRun","Docs":["Run runs f as a subtest of t called name. It runs f in a separate goroutine","and blocks until f returns or calls t.Parallel to become a parallel test.","Run reports whether f succeeded (or at least did not fail before calling t.Parallel).","","Run may be called simultaneously from multiple goroutines, but all such calls","must return before the outer test function for t returns."],"Name":"Run","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"name","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"f","TypeName":"func(t *testing.T)","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}}],"InterfaceMethods":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TBCleanup","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"TB","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.Cleanup","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-TB-Cleanup","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Cleanup","Signature":"func (TB).Cleanup(func())","ID":"FunctionCleanup","Docs":[],"Name":"Cleanup","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"","TypeName":"func()","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TBError","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"TB","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.Error","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-TB-Error","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Error","Signature":"func (TB).Error(args ...interface{})","ID":"FunctionError","Docs":[],"Name":"Error","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(_)","Element":"parameter","Index":0},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TBErrorf","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"TB","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.Errorf","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-TB-Errorf","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Errorf","Signature":"func (TB).Errorf(format string, args ...interface{})","ID":"FunctionErrorf","Docs":[],"Name":"Errorf","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"format","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 1))","Element":"parameter","Index":1},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TBFail","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"TB","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.Fail","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-TB-Fail","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Fail","Signature":"func (TB).Fail()","ID":"FunctionFail","Docs":[],"Name":"Fail","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TBFailNow","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"TB","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.FailNow","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-TB-FailNow","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"FailNow","Signature":"func (TB).FailNow()","ID":"FunctionFailNow","Docs":[],"Name":"FailNow","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TBFailed","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"TB","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.Failed","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-TB-Failed","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Failed","Signature":"func (TB).Failed() bool","ID":"FunctionFailed","Docs":[],"Name":"Failed","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TBFatal","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"TB","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.Fatal","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-TB-Fatal","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Fatal","Signature":"func (TB).Fatal(args ...interface{})","ID":"FunctionFatal","Docs":[],"Name":"Fatal","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(_)","Element":"parameter","Index":0},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TBFatalf","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"TB","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.Fatalf","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-TB-Fatalf","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Fatalf","Signature":"func (TB).Fatalf(format string, args ...interface{})","ID":"FunctionFatalf","Docs":[],"Name":"Fatalf","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"format","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 1))","Element":"parameter","Index":1},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TBHelper","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"TB","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.Helper","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-TB-Helper","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Helper","Signature":"func (TB).Helper()","ID":"FunctionHelper","Docs":[],"Name":"Helper","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TBLog","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"TB","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.Log","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-TB-Log","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Log","Signature":"func (TB).Log(args ...interface{})","ID":"FunctionLog","Docs":[],"Name":"Log","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(_)","Element":"parameter","Index":0},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TBLogf","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"TB","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.Logf","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-TB-Logf","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Logf","Signature":"func (TB).Logf(format string, args ...interface{})","ID":"FunctionLogf","Docs":[],"Name":"Logf","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"format","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 1))","Element":"parameter","Index":1},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TBName","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"TB","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.Name","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-TB-Name","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Name","Signature":"func (TB).Name() string","ID":"FunctionName","Docs":[],"Name":"Name","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TBSkip","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"TB","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.Skip","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-TB-Skip","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Skip","Signature":"func (TB).Skip(args ...interface{})","ID":"FunctionSkip","Docs":[],"Name":"Skip","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(_)","Element":"parameter","Index":0},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TBSkipNow","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"TB","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.SkipNow","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-TB-SkipNow","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SkipNow","Signature":"func (TB).SkipNow()","ID":"FunctionSkipNow","Docs":[],"Name":"SkipNow","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TBSkipf","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"TB","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.Skipf","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-TB-Skipf","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Skipf","Signature":"func (TB).Skipf(format string, args ...interface{})","ID":"FunctionSkipf","Docs":[],"Name":"Skipf","PkgPath":"testing","PkgName":"testing","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"format","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(any(int i | i \u003e= 1))","Element":"parameter","Index":1},"VarName":"args","TypeName":"interface{}","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":true,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"TBSkipped","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"TB","PkgName":"testing","PkgPath":"testing","QualifiedName":"testing.Skipped","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-TB-Skipped","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Skipped","Signature":"func (TB).Skipped() bool","ID":"FunctionSkipped","Docs":[],"Name":"Skipped","PkgPath":"testing","PkgName":"testing","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}}]}