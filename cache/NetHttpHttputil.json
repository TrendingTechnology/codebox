{"Name":"httputil","PkgPath":"net/http/httputil","PkgName":"httputil","ID":"net/http/httputil","Funcs":[{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"DumpRequest","Signature":"func DumpRequest(req *net/http.Request, body bool) ([]byte, error)","ID":"FunctionDumpRequest","Docs":["DumpRequest returns the given request in its HTTP/1.x wire","representation. It should only be used by servers to debug client","requests. The returned representation is an approximation only;","some details of the initial request are lost while parsing it into","an http.Request. In particular, the order and case of header field","names are lost. The order of values in multi-valued headers is kept","intact. HTTP/2 requests are dumped in HTTP/1.x form, not in their","original binary representations.","","If body is true, DumpRequest also returns the body. To do so, it","consumes req.Body and then replaces it with a new io.ReadCloser","that yields the same bytes. If DumpRequest returns an error,","the state of req is undefined.","","The documentation for http.Request.Write details which fields","of req are included in the dump."],"Name":"DumpRequest","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"req","TypeName":"Request","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Request","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"body","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"into225","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"DumpRequestOut","Signature":"func DumpRequestOut(req *net/http.Request, body bool) ([]byte, error)","ID":"FunctionDumpRequestOut","Docs":["DumpRequestOut is like DumpRequest but for outgoing client requests. It","includes any headers that the standard http.Transport adds, such as","User-Agent."],"Name":"DumpRequestOut","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"req","TypeName":"Request","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Request","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"body","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"into652","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"DumpResponse","Signature":"func DumpResponse(resp *net/http.Response, body bool) ([]byte, error)","ID":"FunctionDumpResponse","Docs":["DumpResponse is like DumpRequest but dumps a response."],"Name":"DumpResponse","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"resp","TypeName":"Response","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Response","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"body","TypeName":"bool","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"into803","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"NewChunkedReader","Signature":"func NewChunkedReader(r io.Reader) io.Reader","ID":"FunctionNewChunkedReader","Docs":["NewChunkedReader returns a new chunkedReader that translates the data read from r","out of HTTP \"chunked\" format before returning it.","The chunkedReader returns io.EOF when the final 0-length chunk is read.","","NewChunkedReader is not needed by normal applications. The http package","automatically decodes chunking when reading response bodies."],"Name":"NewChunkedReader","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"r","TypeName":"Reader","PkgName":"io","PkgPath":"io","QualifiedName":"io.Reader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into785","TypeName":"Reader","PkgName":"io","PkgPath":"io","QualifiedName":"io.Reader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isResult()","Element":"result","Index":0},"Outp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0}}},"ClassName":"NewChunkedWriter","Signature":"func NewChunkedWriter(w io.Writer) io.WriteCloser","ID":"FunctionNewChunkedWriter","Docs":["NewChunkedWriter returns a new chunkedWriter that translates writes into HTTP","\"chunked\" format before writing them to w. Closing the returned chunkedWriter","sends the final 0-length chunk that marks the end of the stream but does","not send the final CRLF that appears after trailers; trailers and the last","CRLF must be written separately.","","NewChunkedWriter is not needed by normal applications. The http","package adds chunking automatically if handlers don't set a","Content-Length header. Using NewChunkedWriter inside a handler","would result in double chunking or chunking with a Content-Length","length, both of which are wrong."],"Name":"NewChunkedWriter","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"w","TypeName":"Writer","PkgName":"io","PkgPath":"io","QualifiedName":"io.Writer","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"from703","TypeName":"WriteCloser","PkgName":"io","PkgPath":"io","QualifiedName":"io.WriteCloser","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"NewClientConn","Signature":"func NewClientConn(c net.Conn, r *bufio.Reader) *ClientConn","ID":"FunctionNewClientConn","Docs":["NewClientConn is an artifact of Go's early HTTP implementation.","It is low-level, old, and unused by Go's current HTTP stack.","We should have deleted it before Go 1.","","Deprecated: Use the Client or Transport in package net/http instead."],"Name":"NewClientConn","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"c","TypeName":"Conn","PkgName":"net","PkgPath":"net","QualifiedName":"net.Conn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"r","TypeName":"Reader","PkgName":"bufio","PkgPath":"bufio","QualifiedName":"bufio.Reader","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into176","TypeName":"ClientConn","PkgName":"httputil","PkgPath":"net/http/httputil","QualifiedName":"net/http/httputil.ClientConn","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"NewProxyClientConn","Signature":"func NewProxyClientConn(c net.Conn, r *bufio.Reader) *ClientConn","ID":"FunctionNewProxyClientConn","Docs":["NewProxyClientConn is an artifact of Go's early HTTP implementation.","It is low-level, old, and unused by Go's current HTTP stack.","We should have deleted it before Go 1.","","Deprecated: Use the Client or Transport in package net/http instead."],"Name":"NewProxyClientConn","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"c","TypeName":"Conn","PkgName":"net","PkgPath":"net","QualifiedName":"net.Conn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"r","TypeName":"Reader","PkgName":"bufio","PkgPath":"bufio","QualifiedName":"bufio.Reader","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into354","TypeName":"ClientConn","PkgName":"httputil","PkgPath":"net/http/httputil","QualifiedName":"net/http/httputil.ClientConn","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"NewServerConn","Signature":"func NewServerConn(c net.Conn, r *bufio.Reader) *ServerConn","ID":"FunctionNewServerConn","Docs":["NewServerConn is an artifact of Go's early HTTP implementation.","It is low-level, old, and unused by Go's current HTTP stack.","We should have deleted it before Go 1.","","Deprecated: Use the Server in package net/http instead."],"Name":"NewServerConn","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"c","TypeName":"Conn","PkgName":"net","PkgPath":"net","QualifiedName":"net.Conn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"r","TypeName":"Reader","PkgName":"bufio","PkgPath":"bufio","QualifiedName":"bufio.Reader","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into138","TypeName":"ServerConn","PkgName":"httputil","PkgPath":"net/http/httputil","QualifiedName":"net/http/httputil.ServerConn","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"NewSingleHostReverseProxy","Signature":"func NewSingleHostReverseProxy(target *net/url.URL) *ReverseProxy","ID":"FunctionNewSingleHostReverseProxy","Docs":["NewSingleHostReverseProxy returns a new ReverseProxy that routes","URLs to the scheme, host, and base path provided in target. If the","target's path is \"/base\" and the incoming request was for \"/dir\",","the target request will be for /base/dir.","NewSingleHostReverseProxy does not rewrite the Host header.","To rewrite Host headers, use ReverseProxy directly with a custom","Director policy."],"Name":"NewSingleHostReverseProxy","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"target","TypeName":"URL","PkgName":"url","PkgPath":"net/url","QualifiedName":"net/url.URL","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"ReverseProxy","PkgName":"httputil","PkgPath":"net/http/httputil","QualifiedName":"net/http/httputil.ReverseProxy","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}],"TypeMethods":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ClientConnClose","Docs":["Close calls Hijack and then also closes the underlying connection."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ClientConn","PkgName":"httputil","PkgPath":"net/http/httputil","QualifiedName":"net/http/httputil.ClientConn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ClientConn-Close","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Close","Signature":"func (*ClientConn).Close() error","ID":"FunctionClose","Docs":["Close calls Hijack and then also closes the underlying connection."],"Name":"Close","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ClientConnDo","Docs":["Do is convenience method that writes a request and reads a response."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ClientConn","PkgName":"httputil","PkgPath":"net/http/httputil","QualifiedName":"net/http/httputil.ClientConn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ClientConn-Do","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Do","Signature":"func (*ClientConn).Do(req *net/http.Request) (*net/http.Response, error)","ID":"FunctionDo","Docs":["Do is convenience method that writes a request and reads a response."],"Name":"Do","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"req","TypeName":"Request","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Request","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Response","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Response","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ClientConnHijack","Docs":["Hijack detaches the ClientConn and returns the underlying connection as well","as the read-side bufio which may have some left over data. Hijack may be","called before the user or Read have signaled the end of the keep-alive","logic. The user should not call Hijack while Read or Write is in progress."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ClientConn","PkgName":"httputil","PkgPath":"net/http/httputil","QualifiedName":"net/http/httputil.ClientConn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ClientConn-Hijack","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Hijack","Signature":"func (*ClientConn).Hijack() (c net.Conn, r *bufio.Reader)","ID":"FunctionHijack","Docs":["Hijack detaches the ClientConn and returns the underlying connection as well","as the read-side bufio which may have some left over data. Hijack may be","called before the user or Read have signaled the end of the keep-alive","logic. The user should not call Hijack while Read or Write is in progress."],"Name":"Hijack","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"c","TypeName":"Conn","PkgName":"net","PkgPath":"net","QualifiedName":"net.Conn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"r","TypeName":"Reader","PkgName":"bufio","PkgPath":"bufio","QualifiedName":"bufio.Reader","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ClientConnPending","Docs":["Pending returns the number of unanswered requests","that have been sent on the connection."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ClientConn","PkgName":"httputil","PkgPath":"net/http/httputil","QualifiedName":"net/http/httputil.ClientConn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ClientConn-Pending","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Pending","Signature":"func (*ClientConn).Pending() int","ID":"FunctionPending","Docs":["Pending returns the number of unanswered requests","that have been sent on the connection."],"Name":"Pending","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ClientConnRead","Docs":["Read reads the next response from the wire. A valid response might be","returned together with an ErrPersistEOF, which means that the remote","requested that this be the last request serviced. Read can be called","concurrently with Write, but not with another Read."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ClientConn","PkgName":"httputil","PkgPath":"net/http/httputil","QualifiedName":"net/http/httputil.ClientConn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ClientConn-Read","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Read","Signature":"func (*ClientConn).Read(req *net/http.Request) (resp *net/http.Response, err error)","ID":"FunctionRead","Docs":["Read reads the next response from the wire. A valid response might be","returned together with an ErrPersistEOF, which means that the remote","requested that this be the last request serviced. Read can be called","concurrently with Write, but not with another Read."],"Name":"Read","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"req","TypeName":"Request","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Request","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"resp","TypeName":"Response","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Response","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"err","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ClientConnWrite","Docs":["Write writes a request. An ErrPersistEOF error is returned if the connection","has been closed in an HTTP keep-alive sense. If req.Close equals true, the","keep-alive connection is logically closed after this request and the opposing","server is informed. An ErrUnexpectedEOF indicates the remote closed the","underlying TCP connection, which is usually considered as graceful close."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ClientConn","PkgName":"httputil","PkgPath":"net/http/httputil","QualifiedName":"net/http/httputil.ClientConn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ClientConn-Write","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Write","Signature":"func (*ClientConn).Write(req *net/http.Request) error","ID":"FunctionWrite","Docs":["Write writes a request. An ErrPersistEOF error is returned if the connection","has been closed in an HTTP keep-alive sense. If req.Close equals true, the","keep-alive connection is logically closed after this request and the opposing","server is informed. An ErrUnexpectedEOF indicates the remote closed the","underlying TCP connection, which is usually considered as graceful close."],"Name":"Write","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"req","TypeName":"Request","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Request","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ReverseProxyServeHTTP","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ReverseProxy","PkgName":"httputil","PkgPath":"net/http/httputil","QualifiedName":"net/http/httputil.ReverseProxy","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ReverseProxy-ServeHTTP","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServeHTTP","Signature":"func (*ReverseProxy).ServeHTTP(rw net/http.ResponseWriter, req *net/http.Request)","ID":"FunctionServeHTTP","Docs":[],"Name":"ServeHTTP","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"rw","TypeName":"ResponseWriter","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.ResponseWriter","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"req","TypeName":"Request","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Request","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerConnClose","Docs":["Close calls Hijack and then also closes the underlying connection."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ServerConn","PkgName":"httputil","PkgPath":"net/http/httputil","QualifiedName":"net/http/httputil.ServerConn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ServerConn-Close","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Close","Signature":"func (*ServerConn).Close() error","ID":"FunctionClose","Docs":["Close calls Hijack and then also closes the underlying connection."],"Name":"Close","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerConnHijack","Docs":["Hijack detaches the ServerConn and returns the underlying connection as well","as the read-side bufio which may have some left over data. Hijack may be","called before Read has signaled the end of the keep-alive logic. The user","should not call Hijack while Read or Write is in progress."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ServerConn","PkgName":"httputil","PkgPath":"net/http/httputil","QualifiedName":"net/http/httputil.ServerConn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ServerConn-Hijack","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Hijack","Signature":"func (*ServerConn).Hijack() (net.Conn, *bufio.Reader)","ID":"FunctionHijack","Docs":["Hijack detaches the ServerConn and returns the underlying connection as well","as the read-side bufio which may have some left over data. Hijack may be","called before Read has signaled the end of the keep-alive logic. The user","should not call Hijack while Read or Write is in progress."],"Name":"Hijack","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Conn","PkgName":"net","PkgPath":"net","QualifiedName":"net.Conn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"Reader","PkgName":"bufio","PkgPath":"bufio","QualifiedName":"bufio.Reader","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerConnPending","Docs":["Pending returns the number of unanswered requests","that have been received on the connection."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ServerConn","PkgName":"httputil","PkgPath":"net/http/httputil","QualifiedName":"net/http/httputil.ServerConn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ServerConn-Pending","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Pending","Signature":"func (*ServerConn).Pending() int","ID":"FunctionPending","Docs":["Pending returns the number of unanswered requests","that have been received on the connection."],"Name":"Pending","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"int","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerConnRead","Docs":["Read returns the next request on the wire. An ErrPersistEOF is returned if","it is gracefully determined that there are no more requests (e.g. after the","first request on an HTTP/1.0 connection, or after a Connection:close on a","HTTP/1.1 connection)."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ServerConn","PkgName":"httputil","PkgPath":"net/http/httputil","QualifiedName":"net/http/httputil.ServerConn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ServerConn-Read","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Read","Signature":"func (*ServerConn).Read() (*net/http.Request, error)","ID":"FunctionRead","Docs":["Read returns the next request on the wire. An ErrPersistEOF is returned if","it is gracefully determined that there are no more requests (e.g. after the","first request on an HTTP/1.0 connection, or after a Connection:close on a","HTTP/1.1 connection)."],"Name":"Read","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"","TypeName":"Request","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Request","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ServerConnWrite","Docs":["Write writes resp in response to req. To close the connection gracefully, set the","Response.Close field to true. Write should be considered operational until","it returns an error, regardless of any errors returned on the Read side."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ServerConn","PkgName":"httputil","PkgPath":"net/http/httputil","QualifiedName":"net/http/httputil.ServerConn","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ServerConn-Write","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Write","Signature":"func (*ServerConn).Write(req *net/http.Request, resp *net/http.Response) error","ID":"FunctionWrite","Docs":["Write writes resp in response to req. To close the connection gracefully, set the","Response.Close field to true. Write should be considered operational until","it returns an error, regardless of any errors returned on the Read side."],"Name":"Write","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"req","TypeName":"Request","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Request","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"resp","TypeName":"Response","PkgName":"http","PkgPath":"net/http","QualifiedName":"net/http.Response","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}}],"InterfaceMethods":[{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"BufferPoolGet","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from317","TypeName":"BufferPool","PkgName":"httputil","PkgPath":"net/http/httputil","QualifiedName":"net/http/httputil.Get","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-BufferPool-Get","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Get","Signature":"func (BufferPool).Get() []byte","ID":"FunctionGet","Docs":[],"Name":"Get","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into786","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"BufferPoolPut","Docs":[],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"into320","TypeName":"BufferPool","PkgName":"httputil","PkgPath":"net/http/httputil","QualifiedName":"net/http/httputil.Put","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"interface-method-BufferPool-Put","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Put","Signature":"func (BufferPool).Put([]byte)","ID":"FunctionPut","Docs":[],"Name":"Put","PkgPath":"net/http/httputil","PkgName":"httputil","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"from399","TypeName":"byte","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":true}],"Results":null}}]}