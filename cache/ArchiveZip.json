{"Name":"zip","PkgPath":"archive/zip","PkgName":"zip","ID":"archive/zip","Funcs":[{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"FileInfoHeader","Signature":"func FileInfoHeader(fi os.FileInfo) (*FileHeader, error)","ID":"FunctionFileInfoHeader","Docs":["FileInfoHeader creates a partially-populated FileHeader from an","os.FileInfo.","Because os.FileInfo's Name method returns only the base name of","the file it describes, it may be necessary to modify the Name field","of the returned header to provide the full path name of the file.","If compression is desired, callers should set the FileHeader.Method","field; it is unset by default."],"Name":"FileInfoHeader","PkgPath":"archive/zip","PkgName":"zip","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"fi","TypeName":"FileInfo","PkgName":"os","PkgPath":"os","QualifiedName":"os.FileInfo","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"into329","TypeName":"FileHeader","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.FileHeader","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"NewReader","Signature":"func NewReader(r io.ReaderAt, size int64) (*Reader, error)","ID":"FunctionNewReader","Docs":["NewReader returns a new Reader reading from r, which is assumed to","have the given size in bytes."],"Name":"NewReader","PkgPath":"archive/zip","PkgName":"zip","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"r","TypeName":"ReaderAt","PkgName":"io","PkgPath":"io","QualifiedName":"io.ReaderAt","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"size","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"into464","TypeName":"Reader","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.Reader","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isResult()","Element":"result","Index":0},"Outp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0}}},"ClassName":"NewWriter","Signature":"func NewWriter(w io.Writer) *Writer","ID":"FunctionNewWriter","Docs":["NewWriter returns a new Writer writing a zip file to w."],"Name":"NewWriter","PkgPath":"archive/zip","PkgName":"zip","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"w","TypeName":"Writer","PkgName":"io","PkgPath":"io","QualifiedName":"io.Writer","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"from164","TypeName":"Writer","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.Writer","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"OpenReader","Signature":"func OpenReader(name string) (*ReadCloser, error)","ID":"FunctionOpenReader","Docs":["OpenReader will open the Zip file specified by name and return a ReadCloser."],"Name":"OpenReader","PkgPath":"archive/zip","PkgName":"zip","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"name","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"into829","TypeName":"ReadCloser","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.ReadCloser","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RegisterCompressor","Signature":"func RegisterCompressor(method uint16, comp Compressor)","ID":"FunctionRegisterCompressor","Docs":["RegisterCompressor registers custom compressors for a specified method ID.","The common methods Store and Deflate are built in."],"Name":"RegisterCompressor","PkgPath":"archive/zip","PkgName":"zip","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"method","TypeName":"uint16","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"comp","TypeName":"Compressor","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.Compressor","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":null},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RegisterDecompressor","Signature":"func RegisterDecompressor(method uint16, dcomp Decompressor)","ID":"FunctionRegisterDecompressor","Docs":["RegisterDecompressor allows custom decompressors for a specified method ID.","The common methods Store and Deflate are built in."],"Name":"RegisterDecompressor","PkgPath":"archive/zip","PkgName":"zip","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"method","TypeName":"uint16","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"dcomp","TypeName":"Decompressor","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.Decompressor","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":null}],"TypeMethods":[{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"FileDataOffset","Docs":["DataOffset returns the offset of the file's possibly-compressed","data, relative to the beginning of the zip file.","","Most callers should instead use Open, which transparently","decompresses data and verifies checksums."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"File","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.File","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-File-DataOffset","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"DataOffset","Signature":"func (*File).DataOffset() (offset int64, err error)","ID":"FunctionDataOffset","Docs":["DataOffset returns the offset of the file's possibly-compressed","data, relative to the beginning of the zip file.","","Most callers should instead use Open, which transparently","decompresses data and verifies checksums."],"Name":"DataOffset","PkgPath":"archive/zip","PkgName":"zip","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"offset","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"err","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult(0)","Element":"result","Index":0}}},"ClassName":"FileOpen","Docs":["Open returns a ReadCloser that provides access to the File's contents.","Multiple files may be read concurrently."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from611","TypeName":"File","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.File","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-File-Open","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Open","Signature":"func (*File).Open() (io.ReadCloser, error)","ID":"FunctionOpen","Docs":["Open returns a ReadCloser that provides access to the File's contents.","Multiple files may be read concurrently."],"Name":"Open","PkgPath":"archive/zip","PkgName":"zip","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"into334","TypeName":"ReadCloser","PkgName":"io","PkgPath":"io","QualifiedName":"io.ReadCloser","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"FileHeaderFileInfo","Docs":["FileInfo returns an os.FileInfo for the FileHeader."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from450","TypeName":"FileHeader","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.FileHeader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-FileHeader-FileInfo","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"FileInfo","Signature":"func (*FileHeader).FileInfo() os.FileInfo","ID":"FunctionFileInfo","Docs":["FileInfo returns an os.FileInfo for the FileHeader."],"Name":"FileInfo","PkgPath":"archive/zip","PkgName":"zip","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"into538","TypeName":"FileInfo","PkgName":"os","PkgPath":"os","QualifiedName":"os.FileInfo","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"FileHeaderModTime","Docs":["ModTime returns the modification time in UTC using the legacy","ModifiedDate and ModifiedTime fields.","","Deprecated: Use Modified instead."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"FileHeader","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.FileHeader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-FileHeader-ModTime","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ModTime","Signature":"func (*FileHeader).ModTime() time.Time","ID":"FunctionModTime","Docs":["ModTime returns the modification time in UTC using the legacy","ModifiedDate and ModifiedTime fields.","","Deprecated: Use Modified instead."],"Name":"ModTime","PkgPath":"archive/zip","PkgName":"zip","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"Outp":{"Placeholder":"isResult()","Element":"result","Index":0}}},"ClassName":"FileHeaderMode","Docs":["Mode returns the permission and mode bits for the FileHeader."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from674","TypeName":"FileHeader","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.FileHeader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-FileHeader-Mode","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Mode","Signature":"func (*FileHeader).Mode() (mode os.FileMode)","ID":"FunctionMode","Docs":["Mode returns the permission and mode bits for the FileHeader."],"Name":"Mode","PkgPath":"archive/zip","PkgName":"zip","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"mode","TypeName":"FileMode","PkgName":"os","PkgPath":"os","QualifiedName":"os.FileMode","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"FileHeaderSetModTime","Docs":["SetModTime sets the Modified, ModifiedTime, and ModifiedDate fields","to the given time in UTC.","","Deprecated: Use Modified instead."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"FileHeader","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.FileHeader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-FileHeader-SetModTime","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetModTime","Signature":"func (*FileHeader).SetModTime(t time.Time)","ID":"FunctionSetModTime","Docs":["SetModTime sets the Modified, ModifiedTime, and ModifiedDate fields","to the given time in UTC.","","Deprecated: Use Modified instead."],"Name":"SetModTime","PkgPath":"archive/zip","PkgName":"zip","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"t","TypeName":"Time","PkgName":"time","PkgPath":"time","QualifiedName":"time.Time","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":true,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"FileHeaderSetMode","Docs":["SetMode changes the permission and mode bits for the FileHeader."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from160","TypeName":"FileHeader","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.FileHeader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-FileHeader-SetMode","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetMode","Signature":"func (*FileHeader).SetMode(mode os.FileMode)","ID":"FunctionSetMode","Docs":["SetMode changes the permission and mode bits for the FileHeader."],"Name":"SetMode","PkgPath":"archive/zip","PkgName":"zip","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"mode","TypeName":"FileMode","PkgName":"os","PkgPath":"os","QualifiedName":"os.FileMode","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"ReadCloserClose","Docs":["Close closes the Zip file, rendering it unusable for I/O."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"ReadCloser","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.ReadCloser","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-ReadCloser-Close","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Close","Signature":"func (*ReadCloser).Close() error","ID":"FunctionClose","Docs":["Close closes the Zip file, rendering it unusable for I/O."],"Name":"Close","PkgPath":"archive/zip","PkgName":"zip","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"ReaderRegisterDecompressor","Docs":["RegisterDecompressor registers or overrides a custom decompressor for a","specific method ID. If a decompressor for a given method is not found,","Reader will default to looking up the decompressor at the package level."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"into931","TypeName":"Reader","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.Reader","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Reader-RegisterDecompressor","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RegisterDecompressor","Signature":"func (*Reader).RegisterDecompressor(method uint16, dcomp Decompressor)","ID":"FunctionRegisterDecompressor","Docs":["RegisterDecompressor registers or overrides a custom decompressor for a","specific method ID. If a decompressor for a given method is not found,","Reader will default to looking up the decompressor at the package level."],"Name":"RegisterDecompressor","PkgPath":"archive/zip","PkgName":"zip","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"method","TypeName":"uint16","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"dcomp","TypeName":"Decompressor","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.Decompressor","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"WriterClose","Docs":["Close finishes writing the zip file by writing the central directory.","It does not close the underlying writer."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Writer","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.Writer","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Writer-Close","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Close","Signature":"func (*Writer).Close() error","ID":"FunctionClose","Docs":["Close finishes writing the zip file by writing the central directory.","It does not close the underlying writer."],"Name":"Close","PkgPath":"archive/zip","PkgName":"zip","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isResult(0)","Element":"result","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"WriterCreate","Docs":["Create adds a file to the zip file using the provided name.","It returns a Writer to which the file contents should be written.","The file contents will be compressed using the Deflate method.","The name must be a relative path: it must not start with a drive","letter (e.g. C:) or leading slash, and only forward slashes are","allowed. To create a directory instead of a file, add a trailing","slash to the name.","The file's contents must be written to the io.Writer before the next","call to Create, CreateHeader, or Close."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"from878","TypeName":"Writer","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.Writer","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Writer-Create","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Create","Signature":"func (*Writer).Create(name string) (io.Writer, error)","ID":"FunctionCreate","Docs":["Create adds a file to the zip file using the provided name.","It returns a Writer to which the file contents should be written.","The file contents will be compressed using the Deflate method.","The name must be a relative path: it must not start with a drive","letter (e.g. C:) or leading slash, and only forward slashes are","allowed. To create a directory instead of a file, add a trailing","slash to the name.","The file's contents must be written to the io.Writer before the next","call to Create, CreateHeader, or Close."],"Name":"Create","PkgPath":"archive/zip","PkgName":"zip","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"name","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"into485","TypeName":"Writer","PkgName":"io","PkgPath":"io","QualifiedName":"io.Writer","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isResult(0)","Element":"result","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"WriterCreateHeader","Docs":["CreateHeader adds a file to the zip archive using the provided FileHeader","for the file metadata. Writer takes ownership of fh and may mutate","its fields. The caller must not modify fh after calling CreateHeader.","","This returns a Writer to which the file contents should be written.","The file's contents must be written to the io.Writer before the next","call to Create, CreateHeader, or Close."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"into133","TypeName":"Writer","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.Writer","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Writer-CreateHeader","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"CreateHeader","Signature":"func (*Writer).CreateHeader(fh *FileHeader) (io.Writer, error)","ID":"FunctionCreateHeader","Docs":["CreateHeader adds a file to the zip archive using the provided FileHeader","for the file metadata. Writer takes ownership of fh and may mutate","its fields. The caller must not modify fh after calling CreateHeader.","","This returns a Writer to which the file contents should be written.","The file's contents must be written to the io.Writer before the next","call to Create, CreateHeader, or Close."],"Name":"CreateHeader","PkgPath":"archive/zip","PkgName":"zip","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"fh","TypeName":"FileHeader","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.FileHeader","IsPtr":true,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":true,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult(0)","Element":"result","Index":0},"VarName":"from869","TypeName":"Writer","PkgName":"io","PkgPath":"io","QualifiedName":"io.Writer","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isResult(1)","Element":"result","Index":1},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"WriterFlush","Docs":["Flush flushes any buffered data to the underlying writer.","Calling Flush is not normally necessary; calling Close is sufficient."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Writer","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.Writer","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Writer-Flush","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"Flush","Signature":"func (*Writer).Flush() error","ID":"FunctionFlush","Docs":["Flush flushes any buffered data to the underlying writer.","Calling Flush is not normally necessary; calling Close is sufficient."],"Name":"Flush","PkgPath":"archive/zip","PkgName":"zip","Parameters":null,"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"WriterRegisterCompressor","Docs":["RegisterCompressor registers or overrides a custom compressor for a specific","method ID. If a compressor for a given method is not found, Writer will","default to looking up the compressor at the package level."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"into137","TypeName":"Writer","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.Writer","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Writer-RegisterCompressor","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"RegisterCompressor","Signature":"func (*Writer).RegisterCompressor(method uint16, comp Compressor)","ID":"FunctionRegisterCompressor","Docs":["RegisterCompressor registers or overrides a custom compressor for a specific","method ID. If a compressor for a given method is not found, Writer will","default to looking up the compressor at the package level."],"Name":"RegisterCompressor","PkgPath":"archive/zip","PkgName":"zip","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"method","TypeName":"uint16","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},{"Identity":{"Placeholder":"isParameter(1)","Element":"parameter","Index":1},"VarName":"comp","TypeName":"Compressor","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.Compressor","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}],"Results":null}},{"CodeQL":{"IsEnabled":true,"Pointers":{"Inp":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"Outp":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1}}},"ClassName":"WriterSetComment","Docs":["SetComment sets the end-of-central-directory comment field.","It can only be called before Close."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"into163","TypeName":"Writer","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.Writer","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Writer-SetComment","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetComment","Signature":"func (*Writer).SetComment(comment string) error","ID":"FunctionSetComment","Docs":["SetComment sets the end-of-central-directory comment field.","It can only be called before Close."],"Name":"SetComment","PkgPath":"archive/zip","PkgName":"zip","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"comment","TypeName":"string","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":[{"Identity":{"Placeholder":"isResult()","Element":"result","Index":0},"VarName":"","TypeName":"error","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":true,"IsStruct":false,"IsRepeated":false}]}},{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"WriterSetOffset","Docs":["SetOffset sets the offset of the beginning of the zip data within the","underlying writer. It should be used when the zip data is appended to an","existing file, such as a binary executable.","It must be called before any data is written."],"IsOnPtr":true,"Receiver":{"Identity":{"Placeholder":"isReceiver()","Element":"receiver","Index":-1},"VarName":"","TypeName":"Writer","PkgName":"zip","PkgPath":"archive/zip","QualifiedName":"archive/zip.Writer","IsPtr":false,"IsBasic":false,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false},"ID":"type-method-Writer-SetOffset","Func":{"CodeQL":{"IsEnabled":false,"Pointers":{"Inp":{"Placeholder":"TODO","Element":"TODO","Index":-1},"Outp":{"Placeholder":"TODO","Element":"TODO","Index":-1}}},"ClassName":"SetOffset","Signature":"func (*Writer).SetOffset(n int64)","ID":"FunctionSetOffset","Docs":["SetOffset sets the offset of the beginning of the zip data within the","underlying writer. It should be used when the zip data is appended to an","existing file, such as a binary executable.","It must be called before any data is written."],"Name":"SetOffset","PkgPath":"archive/zip","PkgName":"zip","Parameters":[{"Identity":{"Placeholder":"isParameter(0)","Element":"parameter","Index":0},"VarName":"n","TypeName":"int64","PkgName":"","PkgPath":"","QualifiedName":"","IsPtr":false,"IsBasic":true,"IsVariadic":false,"IsNullable":false,"IsStruct":false,"IsRepeated":false}],"Results":null}}],"InterfaceMethods":[]}